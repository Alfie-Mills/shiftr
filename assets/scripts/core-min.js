"use strict";function on_load(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];document.addEventListener("DOMContentLoaded",function(e){})}function vw(){return window.innerWidth}function vh(){return window.innerHeight}"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(e,t){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(e),s=1;s<arguments.length;s++){var i=arguments[s];if(null!=i)for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])}return n},writable:!0,configurable:!0}),Element.prototype.animateScroll=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;t+=document.querySelector(".header").offsetHeight;var n=window.pageYOffset||document.documentElement.scrollTop,s=this.getBoundingClientRect().top+n,i=(i=s-n)-t,o=0;Math.easeInOutQuad=function(e,t,n,s){return(e/=s/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},function t(){o+=16.66;var s=Math.easeInOutQuad(o,n,i,e);document.documentElement.scrollTop=document.body.scrollTop=s,o<e&&setTimeout(t,16.66)}()},Element.prototype.shiftrCarousel=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={autoplay:!0,speed:4e3,transition:800,show_markers:!0,pause_on_marker_hover:!0},n=0;0==Object.keys(e).length&&(e=t);var s=Object.assign(t,e),i=this.children[0],o=this.children[0].children;i.style.height=o[0].offsetHeight+"px";var r=void 0;y()&&((r=document.createElement("div")).classList.add("stage-map"),this.appendChild(r));var a=!1,c=!1;for(n=0;n<o.length;n++)if(o[n].dataset.shiftrCarouselProp=n,o[n].dataset.shiftrCarouselActive="false",y()){var l=document.createElement("div"),d=document.createElement("span");l.dataset.shiftrCarouselMarker=n,l.appendChild(d),r.appendChild(l)}var u=void 0;y()&&(u=Object.keys(r.children).map(function(e){return r.children[e]})),o[0].classList.add("active"),o[0].dataset.shiftrCarouselActive="true",y()&&u[0].classList.add("active");var f=[];for(n=0;n<o.length;n++){f.push([]),o[n].querySelectorAll("*").forEach(function(e){"IMG"==e.nodeName&&f[n].push(e)})}f.length>0&&p(f[0]),f.length>1&&setTimeout(function(e){p(f[1])},s.speed/2);var v=function(){if(a)return!1;if(c)return!1;c=!0;var e=g(),t=L(e);if(y()&&u[t].classList.remove("active"),t==o.length-1)o[0].style.zIndex=150,o[0].classList.add("active"),o[0].dataset.shiftrCarouselActive="true",y()&&u[0].classList.add("active"),setTimeout(function(){o[0].style.zIndex=""},s.transition);else{var n=e.nextElementSibling,i=parseInt(n.dataset.shiftrCarouselProp,10);n.classList.add("active"),n.dataset.shiftrCarouselActive="true",y()&&u[i].classList.add("active"),t==o.length-2||f[i+1]&&p(f[i+1])}e.dataset.shiftrCarouselActive="false",setTimeout(function(){e.classList.remove("active"),c=!1},s.transition)},m=void 0,h=void 0;function p(e){for(n=0;n<e.length;n++)!1===e[n].hasAttribute("src")&&(e[n].src=e[n].dataset.src,e[n].dataset.src="")}function g(){var e=void 0;for(n=0;n<o.length;n++)"true"==o[n].dataset.shiftrCarouselActive&&(e=o[n]);return e}function L(e){return parseInt(e.dataset.shiftrCarouselProp,10)}function y(){return!!s.show_markers}s.autoplay&&(m=setInterval(v,s.speed)),y()&&u.forEach(function(e){e.addEventListener("click",function(){if(c)return a=!1,!1;var t=g(),n=L(t),i=(o[e.dataset.shiftrCarouselMarker],e.dataset.shiftrCarouselMarker);a=!1,s.autoplay&&(clearInterval(m),clearTimeout(h)),n!=i&&(c=!0,u[n].classList.remove("active"),o[i].style.zIndex=150,o[i].classList.add("active"),o[i].dataset.shiftrCarouselActive="true",u[i].classList.add("active"),t.dataset.shiftrCarouselActive="false",setTimeout(function(){t.classList.remove("active"),o[i].style.zIndex="",c=!1},s.transition)),s.autoplay&&(h=setTimeout(function(){m=setInterval(v,s.speed)},s.speed))}),e.addEventListener("mouseover",function(){o[e.dataset.shiftrCarouselMarker];var t=e.dataset.shiftrCarouselMarker;s.pause_on_marker_hover&&(a=!0),f[t]&&p(f[t])}),e.addEventListener("mouseleave",function(){a=!1})})},Element.prototype.floater=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={bounding:this.parentElement,float_buffer:0,header:document.querySelector(".header"),starting:null,ending:null,events:{resize:window,orientationchange:window}};0==Object.keys(e).length&&(e=t);var n,s,i,o,r,a=Object.assign(t,e),c=this,l=a.bounding,d=a.float_buffer;a.header&&(d+=a.header.offsetHeight);var u=function(e){var t=window.pageYOffset||document.documentElement.scrollTop;"scroll"!=e.type&&(n=c.getBoundingClientRect(),s=l.getBoundingClientRect(),n.left,o=null!==a.starting?a.starting.getBoundingClientRect().top+t:s.top+t,r=null!==a.ending?a.ending.getBoundingClientRect().bottom+t:s.bottom+t),i=t+d,t+d+c.offsetHeight>=r?(c.classList.add("pause"),c.classList.remove("sticky"),c.setAttribute("style","")):i>=o?(c.style.width=l.offsetWidth+"px",c.style.top=d+"px",c.style.left=s.left+"px",c.classList.add("sticky"),c.classList.remove("pause")):i<=o&&(c.classList.remove("sticky"),c.setAttribute("style",""))};Object.keys(a.events).forEach(function(e){a.events[e].addEventListener(e,u)}),document.addEventListener("DOMContentLoaded",u),window.addEventListener("scroll",u)},Element.prototype.follower=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={sections:document.querySelectorAll("section")};0==Object.keys(e).length&&(e=t);var n,s=Object.assign(t,e),i=this.querySelectorAll("span"),o=s.sections;i.forEach(function(e){e.addEventListener("click",function(t){document.querySelector(e.getAttribute("data-on-page-link")).animateScroll()})});var r=function(e){var t=window.pageYOffset||document.documentElement.scrollTop,s=t+vh()/2;o.forEach(function(o){"scroll"!=e.type&&(a=(n=o.getBoundingClientRect()).top+t,c=n.bottom+t);var r=o.getAttribute("id").substring(8),a=o.getBoundingClientRect().top+t,c=o.getBoundingClientRect().bottom+t;s>a&&s<c?i[r-1].classList.add("active"):i[r-1].classList.remove("active")})};document.addEventListener("DOMContentLoaded",r),window.addEventListener("scroll",r)};var s="s",m="m",l="l",xl="xl",max="max";function x(e,t){var n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];switch(e){case s:n=450;break;case m:n=768;break;case l:n=1024;break;case xl:n=1600;break;case max:n=1920;break;default:n=e}var r=function(){var e=!1;if(vw()>n){if(!0===o&&!1===e)return;t(),e=!1}else{if(!0===o&&!0===e)return;i(),e=!0}};document.addEventListener("DOMContentLoaded",r),window.addEventListener("resize",r),window.addEventListener("orientationchange",r)}!function(){if(null===document.querySelector("[data-shiftr-accordion]"))return!1;document.querySelector(".accordion").querySelectorAll(".single").forEach(function(e){e.addEventListener("click",function(t){t.preventDefault(),e.classList.toggle("open")})})}(),function(){if(null!==document.querySelector(".shiftr-cookie-notice")){var e=document.getElementById("shiftr-cookie-accept"),t=document.querySelector(".shiftr-cookie-notice");e.addEventListener("click",function(e){e.preventDefault(),t.classList.add("accepted");var n="shiftr_"+shiftr.name+"_consent";n=(n=n.replace(" ","_")).toLowerCase();document.cookie=n+"="+!0+"; expires=Thu, 18 Dec 2019 12:00:00 UTC; path=/",setTimeout(function(){t.classList.remove("posted")},750),setTimeout(function(){document.body.removeChild(t)},2e3)})}}(),function(){var e=shiftr.form,t="focus",n="success",s="error",i=document.querySelectorAll("input, textarea"),o=["name","text","email"];function r(e,t){var n=document.createElement("span");n.classList.add("validation"),n.innerHTML=t,e.parentElement.appendChild(n),setTimeout(function(){n.classList.add("pop")},400),setTimeout(function(){a(e)},6e3)}function a(e){var t=e.nextElementSibling;t&&"SPAN"==t.nodeName&&(t.classList.remove("pop"),setTimeout(function(){e.parentElement.removeChild(t)},400))}if(i.forEach(function(e){if(o.indexOf(e.type)>=0||"TEXTAREA"==e.nodeName){var i=e.previousElementSibling;e.addEventListener("focus",function(){this.classList.add(t),i.classList.add(t)}),e.addEventListener("blur",function(){this.className="",i.className="",""!=this.value&&(this.checkValidity()?(i.classList.add(n),a(this)):i.classList.add(s))}),e.addEventListener("invalid",function(e){e.preventDefault(),i.classList.add(s),r(this,this.validationMessage)})}else"checkbox"==e.type&&(e.addEventListener("change",function(){e.checked&&a(e)}),e.addEventListener("invalid",function(e){e.preventDefault(),r(this,this.validationMessage)}))}),document.querySelector(".form")){var c=document.querySelector(".form");c.addEventListener("submit",function(t){t.preventDefault(),c.querySelector('input[type="submit"]').classList.add("submitting");var n=new FormData(c),s=new XMLHttpRequest;s.onload=function(){if(this.status>=200&&this.status<400){console.log(this.responseText);var t=JSON.parse(this.responseText);c.querySelector('input[type="submit"]').classList.remove("submitting"),t.sent&&function(t){var n=document.querySelector("form"),s=document.createElement("div"),i=document.createElement("div"),o=document.createElement("span"),r=document.createElement("p"),a=document.createElement("span"),c=document.createElement("button");switch(s.classList.add("submission"),t){case"POST":var d={h:e.error_heading,c:e.error_body};a.innerHTML="ERROR REF: "+t;break;default:var d={h:e.success_heading,c:e.success_body}}o.innerHTML=d.h,r.innerHTML=d.c,c.innerHTML="Close",c.setAttribute("id","close-submission"),c.classList.add("button"),i.appendChild(o),i.appendChild(r),i.appendChild(a),s.appendChild(i),s.appendChild(c),n.appendChild(s),setTimeout(function(){s.classList.add("show")},100),c.addEventListener("click",function(e){e.preventDefault(),clearTimeout(f),l(s,t)});var u=void 0;u=-1==["POST","MAIL"].indexOf(t)?8100:3e4;var f=setTimeout(function(){l(s,t)},u)}(!0)}else console.log("error",s)},s.onerror=function(){alert(e.xhr_error)},s.open("POST",e.ajax),s.send(n)})}function l(e,t){var n;if(!0===t)for(n=0;n<i.length;n++)o.indexOf(i[n].type)>0||"TEXTAREA"==i[n].nodeName?(i[n].value="",i[n].className="",i[n].previousElementSibling.className=""):"checkbox"==i[n].type&&(i[n].checked=!1);setTimeout(function(){e.classList.remove("show")},100)}}(),function(){if(null===document.querySelector("[data-shiftr-gallery]"))return!1;var e=document.createElement("div"),t=document.createElement("img");e.classList.add("gallery-viewer"),e.appendChild(t),document.body.appendChild(e);document.querySelector(".gallery-list");var n=document.querySelectorAll("[data-shiftr-gallery-image]"),s=[];n.forEach(function(n){s.push(n.src),n.addEventListener("click",function(){t.src=n.src,e.classList.contains("display")||(e.classList.add("pre"),setTimeout(function(){e.classList.add("display")},100))})});var i=s.length;e.addEventListener("click",function(){e.classList.remove("display"),setTimeout(function(){e.classList.remove("pre")},600)}),t.addEventListener("click",function(e){e.stopPropagation()}),document.addEventListener("keydown",function(e){var n=e.keyCode||e.which,o=s.indexOf(t.src);if(37==n){if(0==o)return void(t.src=s[i-1]);t.src=s[o-1]}if(39==n){if(o+1==i)return void(t.src=s[0]);t.src=s[o+1]}})}(),function(){var e=document.querySelector(".toggle"),t=document.querySelector(".main-nav"),n=document.querySelectorAll("li.parent"),s=document.querySelector(".header"),i=document.body,o=function(e){e.stopPropagation()},r=function(n){n.stopPropagation(),e.classList.toggle("transition"),i.classList.toggle("no-scroll"),s.offsetHeight>t.offsetHeight?s.setAttribute("style",""):s.style.height="100vh",t.classList.toggle("show")},a=function(){e.classList.remove("transition"),s.setAttribute("style",""),i.classList.remove("no-scroll"),t.classList.remove("show")};x(m,function(){e.removeEventListener("click",r),t.removeEventListener("click",o),window.removeEventListener("click",a)},function(){e.addEventListener("click",r),t.addEventListener("click",o),window.addEventListener("click",a)},!0),x(m,function(){n.forEach(function(e){var t=e.children[0],n=e.children[1],s=void 0;t.addEventListener("mouseover",function(t){t.preventDefault(),clearTimeout(s),!0!==e.classList.contains("show")&&e.classList.add("show")}),t.addEventListener("mouseleave",function(t){s=setTimeout(function(){e.classList.remove("show")},200)}),n.addEventListener("mouseover",function(){clearTimeout(s)}),n.addEventListener("mouseleave",function(){s=setTimeout(function(){e.classList.remove("show")},200)})})}),x(l,function(){var e=document.querySelector(".blog-sidebar"),t=document.querySelector(".blog-layout > div");if(null!==e){e.offsetWidth;var n=e.getBoundingClientRect(),i=t.getBoundingClientRect();window.addEventListener("scroll",function(){var t=window.scrollY;t+e.offsetHeight+s.offsetHeight+20>=i.bottom?(e.classList.add("pause"),e.classList.remove("sticky")):t+s.offsetHeight+20>=i.top?(e.style.width=e.offsetWidth+"px",e.style.top=s.offsetHeight+20+"px",e.style.left=n.left+"px",e.classList.add("sticky"),e.classList.remove("pause")):(e.classList.remove("sticky"),e.setAttribute("style",""))})}}),document.querySelector("[data-shiftr-carousel]")&&document.querySelector(".hero-carousel")&&(document.addEventListener("DOMContentLoaded",function(){setTimeout(function(){document.querySelector(".hero-carousel .content").classList.add("load")},800)}),document.querySelector(".hero-carousel").shiftrCarousel({pause_on_marker_hover:!1,speed:6e3}))}(),function(){function e(e){var t=e.lastIndexOf(" ");return e.slice(0,t)+e.slice(t).replace(" ","&nbsp;")}document.querySelectorAll("[data-orphan]").forEach(function(t){var n=t.innerHTML,s=[];n.indexOf("<br>")>=0&&n.indexOf(" ")>=0?(n.split("<br>").forEach(function(t){s.push(e(t))}),t.innerHTML=s.join("<br>")):n.indexOf(" ")>=0&&(t.innerHTML=e(n))})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
