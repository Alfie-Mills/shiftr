"use strict";function on_load(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];document.addEventListener("DOMContentLoaded",function(e){})}function vw(){return window.innerWidth}function vh(){return window.innerHeight}"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(e,t){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(e),i=1;i<arguments.length;i++){var s=arguments[i];if(null!=s)for(var o in s)Object.prototype.hasOwnProperty.call(s,o)&&(n[o]=s[o])}return n},writable:!0,configurable:!0}),Element.prototype.animateScroll=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;t+=document.querySelector(".header").offsetHeight;var n=window.pageYOffset||document.documentElement.scrollTop,i=this.getBoundingClientRect().top+n,s=(s=i-n)-t,o=0;Math.easeInOutQuad=function(e,t,n,i){return(e/=i/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},function t(){o+=16.66;var i=Math.easeInOutQuad(o,n,s,e);document.documentElement.scrollTop=document.body.scrollTop=i,o<e&&setTimeout(t,16.66)}()},Element.prototype.shiftrCarousel=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={autoplay:!0,speed:4e3,transition:800,show_markers:!0,pause_on_marker_hover:!0},n=0;0==Object.keys(e).length&&(e=t);var i=Object.assign(t,e),s=this.children[0],o=this.children[0].children;s.style.height=o[0].offsetHeight+"px";var r=void 0;y()&&((r=document.createElement("div")).classList.add("stage-map"),this.appendChild(r));var a=!1,c=!1;for(n=0;n<o.length;n++)if(o[n].dataset.shiftrCarouselProp=n,o[n].dataset.shiftrCarouselActive="false",y()){var l=document.createElement("div"),d=document.createElement("span");l.dataset.shiftrCarouselMarker=n,l.appendChild(d),r.appendChild(l)}var u=void 0;y()&&(u=Object.keys(r.children).map(function(e){return r.children[e]})),o[0].classList.add("active"),o[0].dataset.shiftrCarouselActive="true",y()&&u[0].classList.add("active");var f=[];for(n=0;n<o.length;n++){f.push([]),o[n].querySelectorAll("*").forEach(function(e){"IMG"==e.nodeName&&f[n].push(e)})}f.length>0&&p(f[0]),f.length>1&&setTimeout(function(e){p(f[1])},i.speed/2);var v=function(){if(a)return!1;if(c)return!1;c=!0;var e=g(),t=L(e);if(y()&&u[t].classList.remove("active"),t==o.length-1)o[0].style.zIndex=150,o[0].classList.add("active"),o[0].dataset.shiftrCarouselActive="true",y()&&u[0].classList.add("active"),setTimeout(function(){o[0].style.zIndex=""},i.transition);else{var n=e.nextElementSibling,s=parseInt(n.dataset.shiftrCarouselProp,10);n.classList.add("active"),n.dataset.shiftrCarouselActive="true",y()&&u[s].classList.add("active"),t==o.length-2||f[s+1]&&p(f[s+1])}e.dataset.shiftrCarouselActive="false",setTimeout(function(){e.classList.remove("active"),c=!1},i.transition)},m=void 0,h=void 0;function p(e){for(n=0;n<e.length;n++)!1===e[n].hasAttribute("src")&&(e[n].src=e[n].dataset.src,e[n].dataset.src="")}function g(){var e=void 0;for(n=0;n<o.length;n++)"true"==o[n].dataset.shiftrCarouselActive&&(e=o[n]);return e}function L(e){return parseInt(e.dataset.shiftrCarouselProp,10)}function y(){return!!i.show_markers}i.autoplay&&(m=setInterval(v,i.speed)),y()&&u.forEach(function(e){e.addEventListener("click",function(){if(c)return a=!1,!1;var t=g(),n=L(t),s=(o[e.dataset.shiftrCarouselMarker],e.dataset.shiftrCarouselMarker);a=!1,i.autoplay&&(clearInterval(m),clearTimeout(h)),n!=s&&(c=!0,u[n].classList.remove("active"),o[s].style.zIndex=150,o[s].classList.add("active"),o[s].dataset.shiftrCarouselActive="true",u[s].classList.add("active"),t.dataset.shiftrCarouselActive="false",setTimeout(function(){t.classList.remove("active"),o[s].style.zIndex="",c=!1},i.transition)),i.autoplay&&(h=setTimeout(function(){m=setInterval(v,i.speed)},i.speed))}),e.addEventListener("mouseover",function(){o[e.dataset.shiftrCarouselMarker];var t=e.dataset.shiftrCarouselMarker;i.pause_on_marker_hover&&(a=!0),f[t]&&p(f[t])}),e.addEventListener("mouseleave",function(){a=!1})})},Element.prototype.floater=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={bounding:this.parentElement,float_buffer:0,header:document.querySelector(".header"),starting:null,ending:null,events:{resize:window,orientationchange:window}};0==Object.keys(e).length&&(e=t);var n,i,s,o,r,a=Object.assign(t,e),c=this,l=a.bounding,d=a.float_buffer;a.header&&(d+=a.header.offsetHeight);var u=function(e){var t=window.pageYOffset||document.documentElement.scrollTop;"scroll"!=e.type&&(n=c.getBoundingClientRect(),i=l.getBoundingClientRect(),n.left,o=null!==a.starting?a.starting.getBoundingClientRect().top+t:i.top+t,r=null!==a.ending?a.ending.getBoundingClientRect().bottom+t:i.bottom+t),s=t+d,t+d+c.offsetHeight>=r?(c.classList.add("pause"),c.classList.remove("sticky"),c.setAttribute("style","")):s>=o?(c.style.width=l.offsetWidth+"px",c.style.top=d+"px",c.style.left=i.left+"px",c.classList.add("sticky"),c.classList.remove("pause")):s<=o&&(c.classList.remove("sticky"),c.setAttribute("style",""))};Object.keys(a.events).forEach(function(e){a.events[e].addEventListener(e,u)}),document.addEventListener("DOMContentLoaded",u),window.addEventListener("scroll",u)},Element.prototype.follower=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={sections:document.querySelectorAll("section")};0==Object.keys(e).length&&(e=t);var n,i=Object.assign(t,e),s=this.querySelectorAll("span"),o=i.sections;s.forEach(function(e){e.addEventListener("click",function(t){document.querySelector(e.getAttribute("data-on-page-link")).animateScroll()})});var r=function(e){var t=window.pageYOffset||document.documentElement.scrollTop,i=t+vh()/2;o.forEach(function(o){"scroll"!=e.type&&(a=(n=o.getBoundingClientRect()).top+t,c=n.bottom+t);var r=o.getAttribute("id").substring(8),a=o.getBoundingClientRect().top+t,c=o.getBoundingClientRect().bottom+t;i>a&&i<c?s[r-1].classList.add("active"):s[r-1].classList.remove("active")})};document.addEventListener("DOMContentLoaded",r),window.addEventListener("scroll",r)};var s="s",m="m",l="l",xl="xl",max="max";function x(e,t){var n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];switch(e){case s:n=450;break;case m:n=768;break;case l:n=1024;break;case xl:n=1600;break;case max:n=1920;break;default:n=e}var r=function(){var e=!1;if(vw()>n){if(!0===o&&!1===e)return;t(),e=!1}else{if(!0===o&&!0===e)return;i(),e=!0}};document.addEventListener("DOMContentLoaded",r),window.addEventListener("resize",r),window.addEventListener("orientationchange",r)}!function(){if(null===document.querySelector("[data-shiftr-accordion]"))return!1;document.querySelector(".accordion").querySelectorAll(".single").forEach(function(e){e.addEventListener("click",function(t){t.preventDefault(),e.classList.toggle("open")})})}(),function(){if(null!==document.querySelector(".shiftr-cookie-notice")){var e=document.getElementById("shiftr-cookie-accept"),t=document.querySelector(".shiftr-cookie-notice");e.addEventListener("click",function(e){e.preventDefault(),t.classList.add("accepted");var n="shiftr_"+shiftr.name+"_consent";n=(n=n.replace(" ","_")).toLowerCase();document.cookie=n+"="+!0+"; expires=Thu, 18 Dec 2019 12:00:00 UTC; path=/",setTimeout(function(){t.classList.remove("posted")},750),setTimeout(function(){document.body.removeChild(t)},2e3)})}}(),function(){var e=shiftr.form,t="focus",n="success",i="error",s=document.querySelectorAll("input, textarea"),o=["name","text","email"];function r(e,t){var n=document.createElement("span");n.classList.add("validation"),n.innerHTML=t,e.parentElement.appendChild(n),setTimeout(function(){n.classList.add("pop")},400),setTimeout(function(){a(e)},6e3)}function a(e){var t=e.nextElementSibling;t&&"SPAN"==t.nodeName&&(t.classList.remove("pop"),setTimeout(function(){e.parentElement.removeChild(t)},400))}if(s.forEach(function(e){if(o.indexOf(e.type)>=0||"TEXTAREA"==e.nodeName){var s=e.previousElementSibling;e.addEventListener("focus",function(){this.classList.add(t),s.classList.add(t)}),e.addEventListener("blur",function(){this.className="",s.className="",""!=this.value&&(this.checkValidity()?(s.classList.add(n),a(this)):s.classList.add(i))}),e.addEventListener("invalid",function(e){e.preventDefault(),s.classList.add(i),r(this,this.validationMessage)})}else"checkbox"==e.type&&(e.addEventListener("change",function(){e.checked&&a(e)}),e.addEventListener("invalid",function(e){e.preventDefault(),r(this,this.validationMessage)}))}),document.querySelector(".form")){var c=document.querySelector(".form");c.addEventListener("submit",function(t){t.preventDefault(),c.querySelector('input[type="submit"]').classList.add("submitting");var n=new FormData(c),i=new XMLHttpRequest;i.onload=function(){if(this.status>=200&&this.status<400){console.log(this.responseText);var t=JSON.parse(this.responseText);c.querySelector('input[type="submit"]').classList.remove("submitting"),t.sent&&function(t){var n=document.querySelector("form"),i=document.createElement("div"),s=document.createElement("div"),o=document.createElement("span"),r=document.createElement("p"),a=document.createElement("span"),c=document.createElement("button");switch(i.classList.add("submission"),t){case"POST":var d={h:e.error_heading,c:e.error_body};a.innerHTML="ERROR REF: "+t;break;default:var d={h:e.success_heading,c:e.success_body}}o.innerHTML=d.h,r.innerHTML=d.c,c.innerHTML="Close",c.setAttribute("id","close-submission"),c.classList.add("button"),s.appendChild(o),s.appendChild(r),s.appendChild(a),i.appendChild(s),i.appendChild(c),n.appendChild(i),setTimeout(function(){i.classList.add("show")},100),c.addEventListener("click",function(e){e.preventDefault(),clearTimeout(f),l(i,t)});var u=void 0;u=-1==["POST","MAIL"].indexOf(t)?8100:3e4;var f=setTimeout(function(){l(i,t)},u)}(!0)}else console.log("error",i)},i.onerror=function(){alert(e.xhr_error)},i.open("POST",e.ajax),i.send(n)})}function l(e,t){var n;if(!0===t)for(n=0;n<s.length;n++)o.indexOf(s[n].type)>0||"TEXTAREA"==s[n].nodeName?(s[n].value="",s[n].className="",s[n].previousElementSibling.className=""):"checkbox"==s[n].type&&(s[n].checked=!1);setTimeout(function(){e.classList.remove("show")},100)}}(),function(){if(null===document.querySelector("[data-shiftr-gallery]"))return!1;var e=document.createElement("div"),t=document.createElement("img");e.classList.add("gallery-viewer"),e.appendChild(t),document.body.appendChild(e);document.querySelector(".gallery-list");var n=document.querySelectorAll("[data-shiftr-gallery-image]"),i=[];n.forEach(function(n){i.push(n.src),n.addEventListener("click",function(){t.src=n.src,e.classList.contains("display")||(e.classList.add("pre"),setTimeout(function(){e.classList.add("display")},100))})});var s=i.length;e.addEventListener("click",function(){e.classList.remove("display"),setTimeout(function(){e.classList.remove("pre")},600)}),t.addEventListener("click",function(e){e.stopPropagation()}),document.addEventListener("keydown",function(e){var n=e.keyCode||e.which,o=i.indexOf(t.src);if(37==n){if(0==o)return void(t.src=i[s-1]);t.src=i[o-1]}if(39==n){if(o+1==s)return void(t.src=i[0]);t.src=i[o+1]}})}(),function(){var e=document.querySelector(".toggle"),t=document.querySelector(".main-nav"),n=document.querySelectorAll("li.parent"),i=document.querySelector(".header"),s=document.body,o=function(e){e.stopPropagation()},r=function(n){n.stopPropagation(),e.classList.toggle("transition"),s.classList.toggle("no-scroll"),i.offsetHeight>t.offsetHeight?i.setAttribute("style",""):i.style.height="100vh",t.classList.toggle("show")},a=function(){e.classList.remove("transition"),i.setAttribute("style",""),s.classList.remove("no-scroll"),t.classList.remove("show")};x(m,function(){e.removeEventListener("click",r),t.removeEventListener("click",o),window.removeEventListener("click",a)},function(){e.addEventListener("click",r),t.addEventListener("click",o),window.addEventListener("click",a)},!0),x(m,function(){n.forEach(function(e){var t=e.children[0],n=e.children[1],i=void 0;t.addEventListener("mouseover",function(t){t.preventDefault(),clearTimeout(i),!0!==e.classList.contains("show")&&e.classList.add("show")}),t.addEventListener("mouseleave",function(t){i=setTimeout(function(){e.classList.remove("show")},200)}),n.addEventListener("mouseover",function(){clearTimeout(i)}),n.addEventListener("mouseleave",function(){i=setTimeout(function(){e.classList.remove("show")},200)})})});var c=document.getElementById("the_logo"),d=c.getAttribute("viewBox").split(" "),u=d[2]/d[3],f=c.parentElement.offsetHeight/10*u;c.style.width=f+"rem",x(l,function(){var e=document.querySelector(".blog-sidebar"),t=document.querySelector(".blog-layout > div");if(null!==e){e.offsetWidth;var n=e.getBoundingClientRect(),s=t.getBoundingClientRect();window.addEventListener("scroll",function(){var t=window.scrollY;t+e.offsetHeight+i.offsetHeight+20>=s.bottom?(e.classList.add("pause"),e.classList.remove("sticky")):t+i.offsetHeight+20>=s.top?(e.style.width=e.offsetWidth+"px",e.style.top=i.offsetHeight+20+"px",e.style.left=n.left+"px",e.classList.add("sticky"),e.classList.remove("pause")):(e.classList.remove("sticky"),e.setAttribute("style",""))})}}),document.querySelector("[data-shiftr-carousel]")&&document.querySelector(".hero-carousel")&&(document.addEventListener("DOMContentLoaded",function(){setTimeout(function(){document.querySelector(".hero-carousel .content").classList.add("load")},800)}),document.querySelector(".hero-carousel").shiftrCarousel({pause_on_marker_hover:!1,speed:6e3}))}(),function(){function e(e){var t=e.lastIndexOf(" ");return e.slice(0,t)+e.slice(t).replace(" ","&nbsp;")}document.querySelectorAll("[data-orphan]").forEach(function(t){var n=t.innerHTML,i=[];n.indexOf("<br>")>=0&&n.indexOf(" ")>=0?(n.split("<br>").forEach(function(t){i.push(e(t))}),t.innerHTML=i.join("<br>")):n.indexOf(" ")>=0&&(t.innerHTML=e(n))})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
