





.shiftr-form .field span.validation {
  padding: .6rem 1.4rem .6rem 1rem;
  position: absolute;
  right: 1.4rem;
  top: 50%;
  transform: translateY(-50%) scale(0);
  transform-origin: 100% 50%;
  opacity: 0;
  color: #080808;
  background-color: #FAFAFA;
  border-radius: .4rem;
  box-shadow: 0 0 2rem rgba(34, 34, 34, 0.2);
  font-size: 1.4rem;
  line-height: 1;
  z-index: 100;
  transition: 200ms ease-in-out; }
  .shiftr-form .field span.validation::before {
    content: "";
    display: block;
    position: absolute;
    width: .8rem;
    height: .8rem;
    top: 50%;
    right: -.4rem;
    transform: translateY(-50%);
    background-color: #E30617;
    border-radius: .5rem; }
  .shiftr-form .field span.validation.pop {
    transform: translateY(-50%) scale(1);
    opacity: 1; }

.shiftr-form .field.field-type-checkbox span.validation {
  padding: .6rem 1rem 1rem 1rem;
  top: -.5rem;
  left: 0;
  right: auto;
  transform: translateY(-100%) scale(0);
  transform-origin: 50% 100%; }
  .shiftr-form .field.field-type-checkbox span.validation::before {
    top: auto;
    right: 50%;
    bottom: 0;
    transform: translate(50%, 50%); }
  .shiftr-form .field.field-type-checkbox span.validation.pop {
    transform: translateY(-100%) scale(1);
    opacity: 1; }

.shiftr-form .form-submission {
  width: calc( 100vw - 2rem);
  max-width: 40rem;
  padding: 1rem;
  display: flex;
  align-items: center;
  position: fixed;
  left: 1rem;
  bottom: 1rem;
  z-index: 9999;
  background-color: #FAFAFA;
  color: #080808;
  border-radius: .4rem;
  box-shadow: 0 0 4rem rgba(8, 8, 8, 0.2);
  transition: 200ms cubic-bezier(0.2, 0.7, 0.5, 1.2);
  opacity: 0;
  transform: translateY(4rem) scale(0.8); }
  .shiftr-form .form-submission span:first-of-type {
    margin-bottom: 1rem;
    display: block;
    font-size: 2.2rem;
    font-weight: 700; }
  .shiftr-form .form-submission button {
    margin: 0;
    align-self: flex-end; }
  .shiftr-form .form-submission span:last-of-type {
    font-size: 1.4rem;
    font-weight: 700;
    text-transform: uppercase; }
  .shiftr-form .form-submission.show {
    opacity: 1;
    transform: translateY(0) scale(1); }
  @media screen and (min-width: 768px) {
    .shiftr-form .form-submission {
      left: 50%;
      bottom: 50%;
      transform: translate(-50%, calc( -50% + 4rem)) scale(0.8); }
      .shiftr-form .form-submission.show {
        transform: translate(-50%, -50%) scale(1); } }
  @media screen and (min-width: 1024px) {
    .shiftr-form .form-submission {
      position: absolute;
      left: 50%;
      bottom: 50%;
      transform: translate(-50%, 50%) scale(0.8); }
      .shiftr-form .form-submission.show {
        transform: translate(-50%, 50%) scale(1); } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
