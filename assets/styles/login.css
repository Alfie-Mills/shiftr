
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */


html {
  line-height: 1.15;
  
  -ms-text-size-adjust: 100%;
  
  -webkit-text-size-adjust: 100%;
   }



body {
  margin: 0; }


article,
aside,
footer,
header,
nav,
section {
  display: block; }


h1 {
  font-size: 2em;
  margin: 0.67em 0; }



figcaption,
figure {
  display: block; }


figure {
  margin: 1em 40px; }


hr {
  box-sizing: content-box;
  
  height: 0;
  
  overflow: visible;
   }


main {
  display: block; }


pre {
  font-family: monospace, monospace;
  
  font-size: 1em;
   }



a {
  background-color: transparent;
  
  -webkit-text-decoration-skip: objects;
   }



abbr[title] {
  border-bottom: none;
  
  text-decoration: underline;
  
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
   }


b,
strong {
  font-weight: inherit; }


b,
strong {
  font-weight: bolder; }


code,
kbd,
samp {
  font-family: monospace, monospace;
  
  font-size: 1em;
   }


dfn {
  font-style: italic; }


mark {
  background-color: #ff0;
  color: #000; }


small {
  font-size: 80%; }


sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }



audio,
video {
  display: inline-block; }


audio:not([controls]) {
  display: none;
  height: 0; }


img {
  border-style: none; }


svg:not(:root) {
  overflow: hidden; }



button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  
  font-size: 100%;
  
  line-height: 1.15;
  
  margin: 0;
   }


button {
  overflow: visible; }


button,
select {
  
  text-transform: none; }


button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
   }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  
   }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }


input {
  overflow: visible; }


[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  
  padding: 0;
   }


[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }


[type="search"] {
  -webkit-appearance: textfield;
  
  outline-offset: -2px;
  
   }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }


::-webkit-file-upload-button {
  -webkit-appearance: button;
  
  font: inherit;
   }


fieldset {
  padding: 0.35em 0.75em 0.625em; }


legend {
  box-sizing: border-box;
  
  display: table;
  
  max-width: 100%;
  
  padding: 0;
  
  color: inherit;
  
  white-space: normal;
   }


progress {
  display: inline-block;
  
  vertical-align: baseline;
   }


textarea {
  overflow: auto; }



details {
  display: block; }


summary {
  display: list-item; }


menu {
  display: block; }



canvas {
  display: inline-block; }


template {
  display: none; }



[hidden] {
  display: none; }







* {
  box-sizing: border-box; }

img, video {
  max-width: 100%;
  height: auto;
  display: block; }

*::selection {
  color: #FAFAFA;
  background-color: #444BB0;
  text-shadow: none; }

body {
  width: 100%;
  max-width: 100%;
  position: relative;
  overflow-x: hidden;
  background-color: #FAFAFA;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }
  body.no-scroll {
    overflow-y: hidden; }

main {
  padding-top: 12rem;
  position: relative;
  background-color: #FAFAFA; }

section.contain {
  width: 100%;
  padding-left: 1rem;
  padding-right: 1rem; }
  section.contain > div {
    max-width: 124rem;
    margin: 0 auto; }
  @media screen and (min-width: 768px) {
    section.contain {
      padding-left: 2rem;
      padding-right: 2rem; } }

section.contain {
  padding-top: 4rem;
  padding-bottom: 4rem; }

section.full-width {
  padding: 4rem 1rem; }
  @media screen and (min-width: 768px) {
    section.full-width {
      padding: 4rem 2rem; } }

section.grey {
  margin-top: 4rem;
  margin-bottom: 4rem;
  padding-top: 4rem;
  padding-bottom: 4rem;
  background-color: #ededed; }


p, h1, h2, h3, h4, h5, h6 {
  margin: 0;
  padding: 0;
  border: 0; }

html {
  font-size: 62.5%; }

body, input, textarea, button, select {
  font-family: "Nunito", sans-serif;
  font-size: 1.8rem;
  font-weight: 400;
  font-style: normal;
  color: #222222; }

p {
  max-width: 68.4rem;
  margin-bottom: 2.88rem;
  line-height: 1.6;
  text-align: left; }
  p:last-child {
    margin-bottom: 0; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Nunito", sans-serif;
  font-weight: 700;
  text-align: left;
  text-transform: capitalize;
  line-height: 1.4;
  color: #080808; }

h1 {
  font-size: 4rem;
  max-width: 68.4rem; }

h2 {
  font-size: 3.2rem;
  max-width: 68.4rem; }

h3 {
  font-size: 2.6rem;
  max-width: 68.4rem; }

h4 {
  font-size: 2.2rem;
  max-width: 68.4rem; }

h5 {
  font-size: 1.8rem;
  max-width: 68.4rem; }

h6 {
  font-size: 1.4rem;
  max-width: 68.4rem; }

a {
  color: #E44BB0;
  line-height: 1.6;
  text-decoration: none;
  transition: 300ms; }
  a:hover {
    color: #444BB0; }

a + p {
  margin-top: 2.88rem; }

p a, li:not(.menu-item) a, small a {
  display: inline-block;
  position: relative;
  color: inherit;
  font-weight: 700; }
  p a::after, li:not(.menu-item) a::after, small a::after {
    content: "";
    display: block;
    position: absolute;
    width: 100%;
    height: .1rem;
    background-color: #E44BB0;
    transition: 300ms;
    transform: scaleX(1); }
  p a:hover, li:not(.menu-item) a:hover, small a:hover {
    color: #E44BB0; }
    p a:hover::after, li:not(.menu-item) a:hover::after, small a:hover::after {
      transform: scaleX(0); }

.login a::after {
  display: none; }

.login h1 a {
  width: 100%;
  background-image: url("../media/_shiftr/shiftr-full.svg");
  background-size: contain; }

.login form {
  box-shadow: 0 0 4rem rgba(110, 110, 110, 0.4);
  border-radius: .8rem; }

.login #login_error,
.login .message,
.login .success {
  border-left: none;
  border: 0.1rem solid #42C2FF;
  border-radius: .8rem;
  font-size: 1.6rem; }

.login #login_error {
  border-color: #E30617; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
