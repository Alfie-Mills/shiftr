/*

	//  //// --|    Style.scss

*/
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0; }

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block; }

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1em 40px; }

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
     * Add the correct display in IE.
     */
main {
  display: block; }

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit; }

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder; }

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic; }

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000; }

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%; }

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block; }

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none; }

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden; }

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible; }

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none; }

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */ }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible; }

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
     * Correct the padding in Firefox.
     */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */ }

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto; }

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block; }

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item; }

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block; }

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block; }

/**
     * Add the correct display in IE.
     */
template {
  display: none; }

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none; }

/*

    //  //// --|    Settings

*/
/*

    //  //// --|    Placeholders

*/
.hero-standard .content h1, .hero-carousel .content h1, .hero-standard .content p, .hero-carousel .content p {
  text-shadow: 0 0 1.8rem rgba(110, 110, 110, 0.8); }

/*

    //  //// --|    Functions

*/
/*

    //  //// --|    Mixins

*/
/*

    //  //// --|    Grid & Layouts

*/
/*

    //  //// --|    Features

*/
.top, .bottom {
  position: absolute;
  top: 0;
  left: 0; }

.top {
  z-index: 2;
  transition: 300ms; }
  .top:hover {
    opacity: 0; }

.bottom {
  z-index: 1; }

/*

	//  //// --|    Core

*/
* {
  box-sizing: border-box; }

img, video {
  max-width: 100%;
  height: auto;
  display: block; }

*::selection {
  color: #FAFAFA;
  background-color: #444BB0;
  text-shadow: none; }

body {
  width: 100%;
  max-width: 100%;
  position: relative;
  overflow-x: hidden;
  background-color: #FAFAFA; }

section.contain, .header-primary, footer, .hero-standard .content, .hero-carousel .content {
  width: 100%;
  padding-left: 1rem;
  padding-right: 1rem; }
  section.contain > div, .header-primary > div, footer > div, .hero-standard .content > div, .hero-carousel .content > div {
    max-width: 124rem;
    margin: 0 auto; }
  @media screen and (min-width: 768px) {
    section.contain, .header-primary, footer, .hero-standard .content, .hero-carousel .content {
      padding-left: 2rem;
      padding-right: 2rem; } }

main {
  min-height: calc( 100vh - 5rem);
  padding-top: 12rem;
  position: relative;
  background-color: #FAFAFA; }

section.contain {
  padding-top: 4rem;
  padding-bottom: 4rem; }

section.free {
  padding: 4rem 1rem; }
  @media screen and (min-width: 768px) {
    section.free {
      padding: 4rem 2rem; } }

section.grey {
  background-color: #ededed; }

section.gradient {
  padding-top: 8rem;
  padding-bottom: 8rem;
  background: #944bb0;
  background: linear-gradient(135deg, #E44BB0 0%, #444BB0 100%);
  color: #FAFAFA; }
  section.gradient h2 {
    color: #FAFAFA; }

/*

    //  //// --|    Header

*/
.header-primary {
  width: 100%;
  height: 6rem;
  padding: 1rem;
  position: fixed;
  z-index: 999;
  overflow: hidden;
  background-color: rgba(237, 237, 237, 0.96);
  -webkit-backdrop-filter: blur(2px);
  box-shadow: 0 0 8rem rgba(110, 110, 110, 0.4);
  transition: 400ms cubic-bezier(0.2, 0.7, 0.5, 1.1); }
  .header-primary .logo {
    min-height: 100%;
    position: absolute;
    top: 0;
    left: 0; }
    .header-primary .logo svg {
      min-height: 100%; }
  .header-primary > div {
    height: 100%;
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: center; }
    .header-primary > div > div:not(.toggle) {
      display: flex;
      align-items: center; }
      .header-primary > div > div:not(.toggle) span {
        margin-left: 4rem;
        color: #944bb0;
        font-size: 2rem;
        font-weight: 400;
        line-height: 1; }
  .header-primary.slider {
    height: 26.2rem; }
  @media screen and (min-width: 768px) {
    .header-primary {
      padding: 1rem 2rem; } }
  @media screen and (min-width: 1024px) {
    .header-primary {
      overflow: visible; }
      .header-primary .logo {
        position: relative; } }

/*

    //  //// --|    Footer

*/
footer {
  margin: 0 auto;
  padding: 4rem 1rem;
  position: relative;
  background-color: #ededed; }
  footer p {
    margin: 0; }
  footer .footer-info {
    display: flex;
    justify-content: space-between; }
  footer small.creator {
    margin: 0;
    color: #080808;
    font-size: 1.4rem;
    line-height: 1.6; }

/*

    //  //// --|    Typography

*/
p, h1, h2, h3, h4, h5, h6 {
  margin: 0;
  padding: 0;
  border: 0; }

html {
  font-size: 62.5%; }

body, input, textarea, button {
  font-family: "Nunito", sans-serif;
  font-size: 1.8rem;
  font-weight: 400;
  font-style: normal;
  color: #222222; }

p {
  max-width: 68.4rem;
  margin-bottom: 2.88rem;
  line-height: 1.6;
  text-align: left; }
  p:last-child {
    margin-bottom: 0; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Nunito", sans-serif;
  font-weight: 700;
  text-align: left;
  text-transform: capitalize;
  line-height: 1.5;
  color: #080808; }

article h2 {
  margin-bottom: 1.44rem; }

article h3 {
  margin-bottom: 1.44rem; }

h1 {
  font-size: 4rem;
  max-width: 68.4rem; }

h2 {
  font-size: 3.2rem;
  max-width: 68.4rem; }

h3 {
  font-size: 2.6rem;
  max-width: 68.4rem; }

h4 {
  font-size: 2.2rem;
  max-width: 68.4rem; }

h5 {
  font-size: 1.8rem;
  max-width: 68.4rem; }

h6 {
  font-size: 1.4rem;
  max-width: 68.4rem; }

a {
  color: #E44BB0;
  line-height: 1.6;
  text-decoration: none;
  transition: 300ms; }
  a:hover {
    color: #444BB0; }

a + p {
  margin-top: 2.88rem; }

p > a, li:not(.menu-item) > a, small > a, .link {
  display: inline-block;
  position: relative;
  color: inherit;
  font-weight: 700; }
  p > a::after, li:not(.menu-item) > a::after, small > a::after, .link::after {
    content: "";
    display: block;
    position: absolute;
    width: 100%;
    height: .1rem;
    background-color: #E44BB0;
    transition: 300ms;
    transform: scaleX(1); }
  p > a:hover, li:not(.menu-item) > a:hover, small > a:hover, .link:hover {
    color: #E44BB0; }
    p > a:hover::after, li:not(.menu-item) > a:hover::after, small > a:hover::after, .link:hover::after {
      transform: scaleX(0); }

/*

    //  //// --|    Lists - Ordered & Unordered

*/
ul, ol {
  margin-top: 0;
  margin-bottom: 2.4rem;
  padding-left: 0.4rem;
  line-height: 1.5; }
  ul li, ol li {
    margin-bottom: 1.44rem; }
    ul li:last-of-type, ol li:last-of-type {
      margin-bottom: 0; }

ul {
  list-style: circle outside;
  padding-left: 2rem; }

ol {
  list-style: decimal inside; }

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
  padding-left: 3rem; }

/*

    //  //// --|    Buttons

*/
.button,
button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  margin: 0;
  padding: 0.6rem 2rem;
  display: inline-block;
  border: 0.1rem solid transparent;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  line-height: 1.5;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: .1rem;
  transition: 300ms;
  cursor: pointer; }

.button,
button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  color: #FAFAFA;
  background-color: #444BB0; }
  .button:hover,
  button:hover,
  input[type="submit"]:hover,
  input[type="reset"]:hover,
  input[type="button"]:hover {
    color: #FAFAFA;
    background-color: #E44BB0; }

input[type="submit"] {
  margin: 0; }
  input[type="submit"].submitting {
    animation: pulsing 2s infinite forwards; }

@keyframes pulsing {
  0% {
    background-color: #444BB0; }
  50% {
    background-color: #E44BB0; }
  100% {
    background-color: #444BB0; } }

/*

    //  //// --|    Inputs & Labels

*/
label {
  display: block;
  font-size: 1.4rem;
  font-weight: 700;
  line-height: 1.5;
  color: #3b3b3b;
  transition: 200ms; }
  label.success {
    color: #04BF2F; }
  label.error {
    color: #E30617; }
  label.focus {
    color: #444BB0; }

input[type="name"],
input[type="email"],
input[type="number"],
input[type="search"],
input[type="text"],
input[type="tel"],
input[type="url"],
input[type="password"],
textarea {
  width: 100%;
  max-width: 50rem;
  margin-left: auto;
  margin-right: auto;
  padding: .5rem 1rem;
  display: block;
  line-height: 1;
  background-color: #ededed;
  border: none;
  border-radius: 0.4rem;
  -webkit-appearance: none;
  transition: 200ms;
  outline: none;
  outline-width: 0; }
  input[type="name"]:-webkit-autofill, input[type="name"]:-webkit-autofill:hover, input[type="name"]:-webkit-autofill:focus, input[type="name"]:-webkit-autofill:active,
  input[type="email"]:-webkit-autofill,
  input[type="email"]:-webkit-autofill:hover,
  input[type="email"]:-webkit-autofill:focus,
  input[type="email"]:-webkit-autofill:active,
  input[type="number"]:-webkit-autofill,
  input[type="number"]:-webkit-autofill:hover,
  input[type="number"]:-webkit-autofill:focus,
  input[type="number"]:-webkit-autofill:active,
  input[type="search"]:-webkit-autofill,
  input[type="search"]:-webkit-autofill:hover,
  input[type="search"]:-webkit-autofill:focus,
  input[type="search"]:-webkit-autofill:active,
  input[type="text"]:-webkit-autofill,
  input[type="text"]:-webkit-autofill:hover,
  input[type="text"]:-webkit-autofill:focus,
  input[type="text"]:-webkit-autofill:active,
  input[type="tel"]:-webkit-autofill,
  input[type="tel"]:-webkit-autofill:hover,
  input[type="tel"]:-webkit-autofill:focus,
  input[type="tel"]:-webkit-autofill:active,
  input[type="url"]:-webkit-autofill,
  input[type="url"]:-webkit-autofill:hover,
  input[type="url"]:-webkit-autofill:focus,
  input[type="url"]:-webkit-autofill:active,
  input[type="password"]:-webkit-autofill,
  input[type="password"]:-webkit-autofill:hover,
  input[type="password"]:-webkit-autofill:focus,
  input[type="password"]:-webkit-autofill:active,
  textarea:-webkit-autofill,
  textarea:-webkit-autofill:hover,
  textarea:-webkit-autofill:focus,
  textarea:-webkit-autofill:active {
    -webkit-box-shadow: 0 0 0 30px #ededed inset !important; }
  input[type="name"].focus,
  input[type="email"].focus,
  input[type="number"].focus,
  input[type="search"].focus,
  input[type="text"].focus,
  input[type="tel"].focus,
  input[type="url"].focus,
  input[type="password"].focus,
  textarea.focus {
    box-shadow: 0 0 2rem rgba(34, 34, 34, 0.2); }

.input, .textarea {
  margin-bottom: 2rem;
  position: relative; }
  .input label, .textarea label {
    padding-left: 1rem;
    text-transform: uppercase;
    letter-spacing: .15rem; }
  @media screen and (min-width: 768px) {
    .input, .textarea {
      margin-bottom: 0; } }

.validation {
  padding: .4rem 1rem;
  position: absolute;
  right: 0;
  bottom: -.2rem;
  transform: translateY(100%) scale(0);
  transform-origin: 100% 0;
  opacity: 0;
  color: #080808;
  background-color: #FAFAFA;
  border-radius: .4rem;
  box-shadow: 0.5rem 0.5rem 2rem rgba(34, 34, 34, 0.4);
  font-size: 1.4rem;
  line-height: 1;
  z-index: 100;
  transition: 200ms; }
  .validation::before {
    content: "";
    display: block;
    position: absolute;
    width: 1rem;
    height: 1rem;
    top: -.1rem;
    right: 0;
    transform: translate(50%, -50%);
    background-color: #E30617;
    border-radius: 1rem; }
  .validation.pop {
    transform: translateY(100%) scale(1);
    opacity: 1; }

textarea {
  height: 9.64rem;
  line-height: 1.5;
  resize: none; }

select {
  height: 3.6rem;
  margin-bottom: 3rem;
  padding: 0.6rem 1rem;
  display: block;
  line-height: 1.6;
  background-color: #ededed;
  border: none;
  border-radius: 0.4rem;
  -webkit-appearance: none;
  -moz-appearance: none;
       appearance: none; }

.checkbox {
  margin-bottom: 2rem;
  position: relative;
  display: flex;
  align-items: center; }
  .checkbox label {
    display: inline-block;
    padding-bottom: 0;
    padding-left: 1rem;
    vertical-align: middle; }
  .checkbox .validation {
    left: 0;
    right: auto;
    transform-origin: 0 0; }
    .checkbox .validation::before {
      left: 0;
      right: auto;
      transform: translate(-50%, -50%); }
  @media screen and (min-width: 768px) {
    .checkbox {
      margin-bottom: 0; } }

/*

    //  //// --|    Code

*/
.code {
  width: 100%;
  margin: 7.2rem 0 7.2rem 0;
  text-align: left; }
  .code span {
    margin-bottom: 0.6rem;
    padding-left: 2%;
    display: block;
    color: #6e6e6e;
    font-size: 1.2rem;
    font-weight: 700;
    text-transform: uppercase; }

pre {
  width: 100%;
  margin: 0;
  padding: 1.75rem;
  background-color: #e1e1e1;
  border-radius: .4rem;
  overflow-x: scroll;
  font-size: 80%;
  line-height: 1.4;
  transition: 200ms; }
  pre code {
    width: 100%; }
  pre:hover {
    box-shadow: 0 0 1rem rgba(8, 8, 8, 0.2);
    background-color: #d4d4d4; }
  @media screen and (min-width: 768px) {
    pre {
      padding: 3.5rem; } }

/*

    //  //// --|    Table

*/
table {
  width: 100%;
  margin-bottom: 2.4rem;
  line-height: 1.6; }
  table th {
    padding-bottom: 0rem;
    color: #080808;
    font-size: 2rem;
    font-weight: 700;
    line-height: 1.5;
    text-align: left; }
  table td {
    padding-top: 1.8rem;
    padding-bottom: 0.5rem;
    border-bottom: 0.1rem solid #080808;
    font-size: 1.6rem;
    font-weight: 400;
    line-height: 1.6; }

/*

    //  //// --|    Navigation - Header

*/
nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0; }
  nav ul a, nav ul span {
    cursor: pointer;
    line-height: 1.6;
    transition: 300ms; }
    nav ul a:hover, nav ul span:hover {
      color: #E44BB0; }
  nav ul span {
    display: inline-block; }

.main-nav {
  width: 100%;
  margin: 0;
  padding: 0;
  padding-top: 5rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 10; }
  .main-nav ul {
    width: auto;
    margin: 0 auto;
    padding: 3rem 0;
    display: block;
    position: relative; }
    .main-nav ul li {
      margin-bottom: .8rem;
      display: block;
      font-size: 2rem;
      font-weight: 700;
      text-align: right;
      line-height: 1; }
      .main-nav ul li a, .main-nav ul li span {
        padding: .8rem 0;
        color: #080808;
        font-weight: 300; }
        .main-nav ul li a.active, .main-nav ul li span.active {
          color: #E44BB0; }
        .main-nav ul li a::after, .main-nav ul li span::after {
          display: none; }
        .main-nav ul li a:hover, .main-nav ul li span:hover {
          color: #E44BB0; }
      .main-nav ul li.parent {
        position: relative; }
        .main-nav ul li.parent .sub-menu {
          margin-top: 1rem;
          padding: 1rem;
          display: none;
          position: relative;
          background-color: #ededed; }
      .main-nav ul li.show .sub-menu {
        display: block; }
      .main-nav ul li:last-of-type {
        margin-right: 0; }
  @media screen and (min-width: 1024px) {
    .main-nav {
      width: auto;
      padding: 0;
      display: block;
      position: relative; }
      .main-nav ul {
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center; }
        .main-nav ul li {
          height: 4rem;
          margin: 0 2rem 0 0;
          font-size: 1.6rem;
          text-align: left; }
          .main-nav ul li.parent {
            position: relative; }
            .main-nav ul li.parent .sub-menu {
              min-width: calc( 100% + 4rem);
              margin-top: 0;
              padding: 1rem 2rem;
              position: absolute;
              top: calc( 100% + 1rem);
              left: -2rem;
              background-color: rgba(237, 237, 237, 0.96);
              -webkit-backdrop-filter: blur(2px);
              box-shadow: 0 4rem 4rem rgba(110, 110, 110, 0.2); }
              .main-nav ul li.parent .sub-menu::before {
                content: "";
                display: block;
                position: absolute;
                width: calc( 100% - 2rem);
                height: .1rem;
                top: 0;
                left: 1rem;
                background-color: #e1e1e1; }
              .main-nav ul li.parent .sub-menu li {
                margin: 0 0 .8rem; }
                .main-nav ul li.parent .sub-menu li:last-of-type {
                  margin-bottom: 0; }
          .main-nav ul li.show .sub-menu {
            display: block; }
          .main-nav ul li:last-of-type {
            margin-bottom: 0;
            margin-right: 0; } }

.no-scroll {
  overflow-y: hidden; }

/*

    //  //// --|    Hamburger Menu Toggle

*/
.toggle {
  width: 2.6rem;
  height: 4rem;
  padding: 1.55rem 0;
  display: inline-block;
  position: absolute;
  top: 0;
  right: 0;
  cursor: pointer;
  z-index: 20;
  transition: 400ms; }
  .toggle span {
    width: 2.6rem;
    height: .1rem;
    display: block;
    position: absolute;
    left: 0;
    background-color: #080808; }
  .toggle span.before {
    transition: transform 250ms 350ms ease-in, opacity 0ms 350ms;
    transform-origin: 50% 50%; }
    .toggle span.before:nth-child(1) {
      top: 1.6rem; }
    .toggle span.before:nth-child(2) {
      bottom: 1.6rem; }
  .toggle span.after {
    top: 2rem;
    visibility: hidden;
    transition: transform 150ms 200ms ease-out, visibility 0ms 350ms;
    transform-origin: 50% 50%; }
  .toggle.transition span.before {
    transition: transform 100ms ease-out, opacity 0ms 200ms;
    opacity: 0; }
    .toggle.transition span.before:nth-child(1) {
      transform: translate(0, 0.4rem); }
    .toggle.transition span.before:nth-child(2) {
      transform: translate(0, -0.4rem); }
  .toggle.transition span.after {
    visibility: visible;
    transition: transform 150ms 200ms ease-out, visibility 0ms 200ms; }
    .toggle.transition span.after:nth-of-type(3) {
      transform: rotateZ(45deg); }
    .toggle.transition span.after:nth-of-type(4) {
      visibility: visible;
      transition: transform 150ms 200ms ease-out, visibility 0ms 200ms;
      transform: rotateZ(-45deg); }
  @media screen and (min-width: 1024px) {
    .toggle {
      display: none; } }

/*

    //  //// --|    Form

*/
.form {
  max-width: 50rem;
  margin: 0 auto;
  position: relative; }
  @media screen and (min-width: 768px) {
    .form {
      display: -ms-grid;
      display: grid;
      grid-gap: 2rem;
      -ms-grid-rows: auto 2rem auto 2rem auto;
      -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr 2rem 1fr;
          grid-template: "a a b b" auto "c c c c" auto "d d d e" auto / 1fr 1fr 1fr 1fr; }
      .form .input:first-of-type {
        grid-area: a; }
      .form .input:nth-of-type(2) {
        grid-area: b; }
      .form .textarea {
        grid-area: c; }
      .form .checkbox {
        grid-area: d; }
      .form .submit {
        grid-area: e; } }
  @media screen and (min-width: 768px) {
    .form .input:first-of-type {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3; }
    .form .input:nth-of-type(2) {
    -ms-grid-row: 1;
    -ms-grid-column: 5;
    -ms-grid-column-span: 3; }
    .form .textarea {
    -ms-grid-row: 3;
    -ms-grid-column: 1;
    -ms-grid-column-span: 7; }
    .form .checkbox {
    -ms-grid-row: 5;
    -ms-grid-column: 1;
    -ms-grid-column-span: 5; }
    .form .submit {
    -ms-grid-row: 5;
    -ms-grid-column: 7; } }

.submission {
  width: calc( 100vw - 2rem);
  max-width: 40rem;
  padding: 1rem;
  display: flex;
  align-items: center;
  position: fixed;
  left: 1rem;
  bottom: 1rem;
  z-index: 9999;
  background-color: #FAFAFA;
  color: #080808;
  border-radius: .4rem;
  box-shadow: 0 0 4rem rgba(8, 8, 8, 0.2);
  transition: 200ms cubic-bezier(0.2, 0.7, 0.5, 1.2);
  opacity: 0;
  transform: translateY(4rem) scale(0.8); }
  .submission span:first-of-type {
    margin-bottom: 1rem;
    display: block;
    font-size: 2.2rem;
    font-weight: 700; }
  .submission button {
    margin: 0;
    align-self: flex-end; }
  .submission span:last-of-type {
    font-size: 1.4rem;
    font-weight: 700;
    text-transform: uppercase; }
  .submission.show {
    opacity: 1;
    transform: translateY(0) scale(1); }
  @media screen and (min-width: 768px) {
    .submission {
      left: 50%;
      bottom: 50%;
      transform: translate(-50%, calc( -50% + 4rem)) scale(0.8); }
      .submission.show {
        transform: translate(-50%, -50%) scale(1); } }
  @media screen and (min-width: 1024px) {
    .submission {
      position: absolute;
      left: 50%;
      bottom: 50%;
      transform: translate(-50%, 50%) scale(0.8); }
      .submission.show {
        transform: translate(-50%, 50%) scale(1); } }

/*

    //  //// --|    Hero - All Variations

*/
.hero-standard, .hero-carousel {
  width: 100%;
  margin: 0;
  position: relative;
  display: block; }
  .hero-standard .background, .hero-carousel .background {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    overflow: hidden;
    opacity: 1; }
    .hero-standard .background img, .hero-carousel .background img {
      z-index: -1;
      width: 100%;
      height: 100%;
      -o-object-fit: cover;
         object-fit: cover;
      -o-object-position: 50% 50%;
         object-position: 50% 50%; }
  .hero-standard .content, .hero-carousel .content {
    position: absolute;
    top: calc( 50% + 3rem);
    left: 0;
    z-index: 100;
    transform: translateY(-50%); }
    .hero-standard .content h1, .hero-carousel .content h1, .hero-standard .content p, .hero-carousel .content p {
      color: #FAFAFA; }
    .hero-standard .content h1, .hero-carousel .content h1 {
      max-width: 40rem;
      font-weight: 700; }
    .hero-standard .content p, .hero-carousel .content p {
      font-size: 2.4rem;
      font-weight: 300; }
  .hero-standard + main, .hero-carousel + main {
    padding-top: 0; }

.hero-standard {
  height: 50vh; }

.hero-carousel {
  height: 67vh;
  position: relative; }
  .hero-carousel .stage {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 50;
    overflow: hidden; }
    .hero-carousel .stage .prop {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 50;
      transition: transform 800ms ease-in-out, opacity 600ms 200ms ease;
      opacity: 0;
      transform: scale(1.1); }
      .hero-carousel .stage .prop img {
        width: 100%;
        height: 100%;
        -o-object-fit: cover;
           object-fit: cover; }
      .hero-carousel .stage .prop.active {
        z-index: 100;
        opacity: 1;
        transform: scale(1); }
  .hero-carousel .stage-map {
    width: 100%;
    max-width: 80rem;
    padding: 0 1.2rem;
    position: absolute;
    left: 50%;
    bottom: 1rem;
    display: flex;
    justify-content: center;
    z-index: 100;
    transform: translateX(-50%); }
    .hero-carousel .stage-map div {
      width: 100%;
      max-width: 12rem;
      height: 1.6rem;
      margin: 0 .2rem;
      padding: .6rem;
      cursor: pointer;
      border-radius: 1rem;
      transition: 300ms; }
      .hero-carousel .stage-map div span {
        width: 100%;
        height: .4rem;
        display: block;
        background-color: rgba(250, 250, 250, 0.4);
        border-radius: .2rem;
        transition: 400ms; }
      .hero-carousel .stage-map div.active span {
        background-color: #FAFAFA; }
      .hero-carousel .stage-map div:hover span {
        background-color: #E44BB0; }
  .hero-carousel .overlay {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 75;
    background: linear-gradient(0deg, rgba(8, 8, 8, 0.6) 0%, rgba(8, 8, 8, 0.3) 100%); }
  .hero-carousel .content {
    z-index: 100;
    transition: transform 800ms ease-out, opacity 600ms 200ms ease;
    opacity: 0;
    transform: translateY(0);
    transform-origin: 0 50%; }
    .hero-carousel .content.load {
      opacity: 1;
      transform: translateY(-50%); }

/*

    //  //// --|    Popup

*/
/*

    //  //// --|    Gallery

*/
@media screen and (min-width: 768px) {
  .gallery {
    display: -ms-grid;
    display: grid;
    grid-gap: 2rem;
    -ms-grid-rows: auto;
    -ms-grid-columns: 1fr 2rem 1fr;
        grid-template: "a b" auto / 1fr 1fr; }
  .gallery > .input:first-of-type {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 1; }
  .gallery > .input:nth-of-type(2) {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 1; } }

@media screen and (min-width: 1024px) {
  .gallery {
    -ms-grid-rows: auto;
    -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr 2rem 1fr;
        grid-template: "a b c d" auto / 1fr 1fr 1fr 1fr; }
  .gallery > .input:first-of-type {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 1; }
  .gallery > .input:nth-of-type(2) {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 1; }
  .gallery > .textarea {
    -ms-grid-row: 1;
    -ms-grid-column: 5;
    -ms-grid-column-span: 1; }
  .gallery > .checkbox {
    -ms-grid-row: 1;
    -ms-grid-column: 7;
    -ms-grid-column-span: 1; } }

.gallery-item {
  width: 100%;
  margin-bottom: 2rem;
  padding-top: 75%;
  position: relative;
  cursor: pointer;
  transition: 200ms ease; }
  .gallery-item:last-of-type {
    margin-bottom: 0; }
  .gallery-item img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    -o-object-fit: cover;
       object-fit: cover;
    -o-object-position: 50% 50%;
       object-position: 50% 50%; }
  .gallery-item:hover {
    box-shadow: 0 0 2rem rgba(8, 8, 8, 0.2); }
  @media screen and (min-width: 768px) {
    .gallery-item {
      margin-bottom: 0; } }

.gallery-viewer {
  width: 100vw;
  height: 100vh;
  padding: 2rem 0;
  display: none;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
  background-color: rgba(8, 8, 8, 0.9);
  transition: 200ms;
  opacity: 0; }
  .gallery-viewer img {
    max-width: 100%;
    max-height: 100%;
    z-index: 10;
    opacity: 0;
    transform: scale(0.8);
    transition: 400ms cubic-bezier(0.2, 0.7, 0.5, 1.2); }
  .gallery-viewer button {
    width: 4.8rem;
    height: 4.8rem;
    padding: 1.4rem;
    position: absolute;
    top: calc( 50% - 2.4rem);
    z-index: 20;
    background-color: transparent;
    border: none;
    border-radius: 0;
    outline: none;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none; }
    .gallery-viewer button svg {
      width: 2rem;
      height: 2rem;
      background-color: #E44BB0; }
    .gallery-viewer button.previous {
      left: 0; }
    .gallery-viewer button.next {
      right: 0; }
    .gallery-viewer button.close {
      top: 0;
      right: 0; }
    @media screen and (min-width: 768px) {
      .gallery-viewer button.previous {
        left: 2rem; }
      .gallery-viewer button.next {
        right: 2rem; }
      .gallery-viewer button.close {
        top: 2rem;
        right: 2rem; } }
  .gallery-viewer.pre {
    display: flex; }
  .gallery-viewer.display {
    opacity: 1; }
    .gallery-viewer.display img {
      opacity: 1;
      transform: scale(1); }
  @media screen and (min-width: 768px) {
    .gallery-viewer {
      padding: 4rem; } }

/*

    //  //// --|    Listed Items (Thumbnails, Products etc...)

*/
.listed {
  list-style-type: none;
  padding: 0; }
  @media screen and (min-width: 768px) {
    .listed {
      display: -ms-grid;
      display: grid;
      grid-gap: 1rem;
      -ms-grid-rows: auto;
      -ms-grid-columns: 1fr 1rem 1fr;
          grid-template: "a  b" auto / 1fr 1fr; }
    .listed > .input:first-of-type {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 1; }
    .listed > .input:nth-of-type(2) {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 1; } }

/*

    //  //// --|    Cookie Consent Popup

*/
.shiftr-cookie-notice {
  width: calc( 100vw - 2rem);
  max-width: 50rem;
  padding: 2rem;
  position: fixed;
  left: 1rem;
  bottom: 1rem;
  z-index: 9999;
  background-color: rgba(237, 237, 237, 0.96);
  border: .2rem solid transparent;
  border-radius: .4rem;
  box-shadow: 0 2rem 4rem rgba(34, 34, 34, 0.4);
  transition: opacity 800ms 0ms ease-out, transform 800ms 0ms ease-in-out, border 400ms 0ms ease, background-color 400ms, box-shadow 400ms;
  opacity: 0;
  transform: translateY(100%); }
  .shiftr-cookie-notice p {
    margin-bottom: 1.44rem;
    font-size: 1.6rem; }
  .shiftr-cookie-notice.posted {
    opacity: 1;
    transform: translateY(0); }
  .shiftr-cookie-notice.accepted {
    border-color: #04BF2F; }
  .shiftr-cookie-notice:hover {
    background-color: #ededed;
    box-shadow: 0 2rem 6rem rgba(34, 34, 34, 0.4); }
  @media screen and (min-width: 768px) {
    .shiftr-cookie-notice {
      max-width: 30rem;
      transform: translateX(-100%); }
      .shiftr-cookie-notice.posted {
        transform: translateX(0); } }

/*

    //  //// --|    Page Name

*/
/*

    //  //// --|    The blog

*/
.blog-layout > div {
  position: relative; }

@media screen and (min-width: 1024px) {
  .blog-layout > div {
    display: -ms-grid;
    display: grid;
    grid-gap: 2rem;
    -ms-grid-rows: auto;
    -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr 2rem 1fr;
        grid-template: "main main main side" auto / 1fr  1fr 1fr 1fr; }
    .blog-layout > div .blog-list {
      grid-area: main; }
    .blog-layout > div .blog-sidebar {
      grid-area: side; } }

@media screen and (min-width: 1024px) {
  .blog-layout > div .blog-list {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 5; }
  .blog-layout > div .blog-sidebar {
    -ms-grid-row: 1;
    -ms-grid-column: 7; } }

.blog-layout article p, .blog-layout article h2, .blog-layout article h3, .blog-layout article h4, .blog-layout article h5, .blog-layout article h6 {
  margin-left: auto;
  margin-right: 0; }

.blog-layout article img {
  margin-bottom: 2.88rem; }

.blog-list .single {
  margin-bottom: 2rem;
  padding: 2rem;
  background-color: #ededed;
  border-radius: .4rem; }
  .blog-list .single .image {
    max-height: 20rem;
    margin-bottom: 1rem;
    overflow: hidden;
    position: relative;
    border-radius: .4rem; }
    .blog-list .single .image img {
      width: 100%;
      height: 100%;
      -o-object-fit: cover;
         object-fit: cover;
      -o-object-position: 50% 50%;
         object-position: 50% 50%; }
  .blog-list .single h3 {
    width: 100%;
    margin-bottom: 1rem;
    -o-object-fit: cover;
       object-fit: cover; }
  .blog-list .single .details {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between; }
    .blog-list .single .details span.date {
      display: inline-block; }
  .blog-list .single:last-of-type {
    margin-bottom: 0; }
  @media screen and (min-width: 768px) {
    .blog-list .single {
      display: -ms-grid;
      display: grid;
      grid-gap: 2rem;
      -ms-grid-rows: auto;
      -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr;
          grid-template: "image details details" auto / 1fr 1fr 1fr; }
      .blog-list .single .image {
        grid-area: image;
        margin-bottom: 0; }
      .blog-list .single .details {
        grid-area: details;
        display: block; } }
  @media screen and (min-width: 768px) {
    .blog-list .single .image {
    -ms-grid-row: 1;
    -ms-grid-column: 1; }
    .blog-list .single .details {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 3; } }

.blog-sidebar {
  display: none; }
  @media screen and (min-width: 1024px) {
    .blog-sidebar {
      padding: 2rem;
      display: block;
      align-self: flex-start;
      background-color: #ededed;
      border-radius: .4rem;
      transition: box-shadow 200ms ease; }
      .blog-sidebar .widget {
        margin-bottom: 2.88rem; }
        .blog-sidebar .widget:last-of-type {
          margin-bottom: 0; }
      .blog-sidebar h4 {
        margin-bottom: 1rem;
        color: #444BB0; }
      .blog-sidebar ul {
        list-style-type: none;
        margin-bottom: 0;
        padding-left: 0; }
      .blog-sidebar li a::after {
        background-color: #080808;
        transform: scaleX(0); }
      .blog-sidebar li a:hover {
        color: #E44BB0; }
        .blog-sidebar li a:hover::after {
          transform: scaleX(1); }
      .blog-sidebar .search input {
        background-color: #FAFAFA; }
      .blog-sidebar.sticky {
        position: fixed;
        box-shadow: 0 0 2rem rgba(34, 34, 34, 0.2); }
      .blog-sidebar.pause {
        align-self: flex-end; } }

.searched {
  color: #FAFAFA; }

body.single.post article {
  max-width: 68.4rem;
  margin-left: auto;
  margin-right: auto; }

/*

    //  //// --|    Accessibility

*/
@media screen and (prefers-reduced-motion: reduce), (update: slow) {
  * {
    animation-duration: .001ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: .001ms !important; } }

/*

    //  //// --|    Fixer

*/
/*

    //  //// --|    Dev Tools

*/

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLnNjc3MiLCJub3JtYWxpemUvX25vcm1hbGl6ZS1taXhpbi5zY3NzIiwibm9ybWFsaXplL192ZXJ0aWNhbC1yaHl0aG0uc2NzcyIsIm5vcm1hbGl6ZS9fdmFyaWFibGVzLnNjc3MiLCJzdHlsZS5jc3MiLCJfaW5pdC9fc2V0dGluZ3Muc2NzcyIsIl9pbml0L19wbGFjZWhvbGRlcnMuc2NzcyIsIl9pbml0L19mdW5jdGlvbnMuc2NzcyIsIl9pbml0L19taXhpbnMuc2NzcyIsIl9pbml0L19ncmlkLnNjc3MiLCJmZWF0dXJlcy9fZmVhdHVyZXMuc2NzcyIsImJsdWVwcmludC9fY29yZS5zY3NzIiwiYmx1ZXByaW50L19oZWFkZXIuc2NzcyIsImJsdWVwcmludC9fZm9vdGVyLnNjc3MiLCJmb3VuZGF0aW9uL190eXBvZ3JhcGh5LnNjc3MiLCJmb3VuZGF0aW9uL19saXN0cy5zY3NzIiwiZm91bmRhdGlvbi9fYnV0dG9ucy5zY3NzIiwiZm91bmRhdGlvbi9faW5wdXRzLnNjc3MiLCJmb3VuZGF0aW9uL19jb2RlLnNjc3MiLCJmb3VuZGF0aW9uL190YWJsZS5zY3NzIiwiY29tcG9uZW50cy9fbmF2LnNjc3MiLCJjb21wb25lbnRzL19oYW1idXJnZXIuc2NzcyIsImNvbXBvbmVudHMvX2Zvcm0uc2NzcyIsIjxubyBzb3VyY2U+IiwiY29tcG9uZW50cy9faGVyby5zY3NzIiwiY29tcG9uZW50cy9fcG9wdXAuc2NzcyIsImNvbXBvbmVudHMvX2dhbGxlcnkuc2NzcyIsImNvbXBvbmVudHMvX2l0ZW0uc2NzcyIsImNvbXBvbmVudHMvX2Nvb2tpZS5zY3NzIiwicGFnZXMvX2luZGV4LnNjc3MiLCJwYWdlcy9fYmxvZy5zY3NzIiwiZmVhdHVyZXMvX2FjY2Vzc2liaWxpdHkuc2NzcyIsIm1pc2MvX2ZpeGVyLnNjc3MiLCJtaXNjL19kZXYuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztFQUlFO0FDdUNBLGlFQUFpRTtBQUcvRDtvRkFDZ0Y7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O1FBdUNLLGV6QnpGYyxFeUI4RmQ7UUE1Q0w7VUEwQ00scUJBQXNCLEVBQ3RCO01BM0NOO1FBa0RJLDBCekI1R2UsRXlCNkdmO01BbkRKO1FBeURHLGdCQUFlO1FBRWYsMkNBQWlELEVBQ2pEO01BNURIO1FBK0RHLHFCQUFvQixFQUNwQixFQUFBOztBQUlIO0VBQ0MsZXpCL0hrQixFeUJnSWxCOztBQUVEO0VBR0UsbUJ2QjlLcUI7RXVCK0tyQixrQkFBaUI7RUFDakIsbUJBQWtCLEVBQ2xCOztBQzVMRjs7OztFQUlFO0FBS0Y7RXBCRUE7SW9CQ0Usc0NBQXFDO0lBQ3JDLHdDQUF1QztJQUN2Qyx1Q0FBc0MsRUFDdEMsRUFBQTs7QUNmRjs7OztFQUlFO0FDSkY7Ozs7RUFJRSIsImZpbGUiOiJzdHlsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG5cdC8vICAvLy8vIC0tfCAgICBTdHlsZS5zY3NzXG5cbiovXG5cblxuXG5cbi8vICBOb3JtYWxpemVcbkBpbXBvcnQgJ25vcm1hbGl6ZS9ub3JtYWxpemUnO1xuXG5cbi8vICBJbml0IH4gQ29uZmlndXJlIG1vc3Qgb2YgdGhlIGdsb2JhbCBvcHRpb25zIGFuZCBmdW5jdGlvbnNcbkBpbXBvcnQgJ19pbml0L3NldHRpbmdzJztcbkBpbXBvcnQgJ19pbml0L3BsYWNlaG9sZGVycyc7XG5AaW1wb3J0ICdfaW5pdC9mdW5jdGlvbnMnO1xuQGltcG9ydCAnX2luaXQvbWl4aW5zJztcbkBpbXBvcnQgJ19pbml0L2dyaWQnO1xuXG5cbi8vICBGZWF0dXJlXG5AaW1wb3J0ICdmZWF0dXJlcy9mZWF0dXJlcyc7XG5cblxuLy8gIEtleSBQYWdlIENvbXBvbmVudHNcbkBpbXBvcnQgJ2JsdWVwcmludC9jb3JlJztcbkBpbXBvcnQgJ2JsdWVwcmludC9oZWFkZXInO1xuQGltcG9ydCAnYmx1ZXByaW50L2Zvb3Rlcic7XG5cblxuLy8gIEZvdW5kYXRpb25zXG5AaW1wb3J0ICdmb3VuZGF0aW9uL3R5cG9ncmFwaHknO1xuQGltcG9ydCAnZm91bmRhdGlvbi9saXN0cyc7XG5AaW1wb3J0ICdmb3VuZGF0aW9uL2J1dHRvbnMnO1xuQGltcG9ydCAnZm91bmRhdGlvbi9pbnB1dHMnO1xuQGltcG9ydCAnZm91bmRhdGlvbi9jb2RlJztcbkBpbXBvcnQgJ2ZvdW5kYXRpb24vdGFibGUnO1xuXG5cbi8vICBDb21wb25lbnRzXG5AaW1wb3J0ICdjb21wb25lbnRzL25hdic7XG5AaW1wb3J0ICdjb21wb25lbnRzL2hhbWJ1cmdlcic7XG5AaW1wb3J0ICdjb21wb25lbnRzL2Zvcm0nO1xuQGltcG9ydCAnY29tcG9uZW50cy9oZXJvJztcbkBpbXBvcnQgJ2NvbXBvbmVudHMvcG9wdXAnO1xuQGltcG9ydCAnY29tcG9uZW50cy9nYWxsZXJ5JztcbkBpbXBvcnQgJ2NvbXBvbmVudHMvaXRlbSc7XG5AaW1wb3J0ICdjb21wb25lbnRzL2Nvb2tpZSc7XG5cblxuLy8gIFBhZ2UgU3BlY2lmaWNcbkBpbXBvcnQgJ3BhZ2VzL2luZGV4JztcbkBpbXBvcnQgJ3BhZ2VzL2Jsb2cnO1xuXG5cbi8vIFx0QWNjZXNzaWJpbGl0eVxuQGltcG9ydCAnZmVhdHVyZXMvYWNjZXNzaWJpbGl0eSc7XG5cblxuLy8gIERldiB0b29sc1xuQGltcG9ydCAnbWlzYy9maXhlcic7XG5AaW1wb3J0ICdtaXNjL2Rldic7XG5cbiIsIi8vIEhlbHBlciBmdW5jdGlvbiBmb3IgdGhlIG5vcm1hbGl6ZSgpIG1peGluLlxuQGZ1bmN0aW9uIF9ub3JtYWxpemUtaW5jbHVkZSgkc2VjdGlvbiwgJGV4Y2x1ZGU6IG51bGwpIHtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgZ2xvYmFsIHZhcmlhYmxlcyBuZWVkZWQgYnkgdGhpcyBmdW5jdGlvbi5cbiAgQGlmIG5vdCBnbG9iYWxfdmFyaWFibGVfZXhpc3RzKF9ub3JtYWxpemUtaW5jbHVkZSkge1xuICAgICRfbm9ybWFsaXplLWluY2x1ZGU6ICgpICFnbG9iYWw7XG4gICAgJF9ub3JtYWxpemUtZXhjbHVkZTogKCkgIWdsb2JhbDtcbiAgfVxuICAvLyBTaW5jZSB3ZSBhcmUgZ2l2ZW4gMiBwYXJhbWV0ZXJzLCBzZXQgdGhlIGdsb2JhbCB2YXJpYWJsZXMuXG4gIEBpZiAkZXhjbHVkZSAhPSBudWxsIHtcbiAgICAkaW5jbHVkZTogJHNlY3Rpb247XG4gICAgLy8gU2FzcyBkb2Vzbid0IGhhdmUgc3RhdGljIHZhcmlhYmxlcywgc28gdGhlIHdvcmstYXJvdW5kIGlzIHRvIHN0dWZmIHRoZXNlXG4gICAgLy8gdmFsdWVzIGludG8gZ2xvYmFsIHZhcmlhYmxlcyBzbyB3ZSBjYW4gYWNjZXNzIHRoZW0gaW4gZnV0dXJlIGNhbGxzLlxuICAgICRfbm9ybWFsaXplLWluY2x1ZGU6IGlmKHR5cGUtb2YoJGluY2x1ZGUpID09ICdsaXN0JywgJGluY2x1ZGUsICgkaW5jbHVkZSkpICFnbG9iYWw7XG4gICAgJF9ub3JtYWxpemUtZXhjbHVkZTogaWYodHlwZS1vZigkZXhjbHVkZSkgPT0gJ2xpc3QnLCAkZXhjbHVkZSwgKCRleGNsdWRlKSkgIWdsb2JhbDtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBDaGVjayBpZiAkc2VjdGlvbiBpcyBpbiB0aGUgJGluY2x1ZGUgbGlzdC5cbiAgQGlmIGluZGV4KCRfbm9ybWFsaXplLWluY2x1ZGUsICRzZWN0aW9uKSB7XG4gICAgQHJldHVybiB0cnVlO1xuICB9XG4gIC8vIElmICRpbmNsdWRlIGlzIHNldCB0byAoYWxsKSwgbWFrZSBzdXJlICRzZWN0aW9uIGlzIG5vdCBpbiAkZXhjbHVkZS5cbiAgQGVsc2UgaWYgbm90IGluZGV4KCRfbm9ybWFsaXplLWV4Y2x1ZGUsICRzZWN0aW9uKSBhbmQgaW5kZXgoJF9ub3JtYWxpemUtaW5jbHVkZSwgYWxsKSB7XG4gICAgQHJldHVybiB0cnVlO1xuICB9XG4gIEByZXR1cm4gZmFsc2U7XG59XG5cbkBtaXhpbiBub3JtYWxpemUoJGluY2x1ZGU6IChhbGwpLCAkZXhjbHVkZTogKCkpIHtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGVscGVyIGZ1bmN0aW9uIGJ5IHBhc3NpbmcgaXQgdGhpcyBtaXhpbidzIHBhcmFtZXRlcnMuXG4gICRpbml0OiBfbm9ybWFsaXplLWluY2x1ZGUoJGluY2x1ZGUsICRleGNsdWRlKTtcblxuICAvLyBJZiB3ZSd2ZSBjdXN0b21pemVkIGFueSBmb250IHZhcmlhYmxlcywgd2UnbGwgbmVlZCBleHRyYSBwcm9wZXJ0aWVzLlxuICBAaWYgJGJhc2UtbGluZS1oZWlnaHQgIT0gMjRweFxuICAgIG9yICRiYXNlLXVuaXQgIT0gJ2VtJ1xuICAgIG9yICRoMi1mb250LXNpemUgIT0gMS41ICAqICRiYXNlLWZvbnQtc2l6ZVxuICAgIG9yICRoMy1mb250LXNpemUgIT0gMS4xNyAqICRiYXNlLWZvbnQtc2l6ZVxuICAgIG9yICRoNC1mb250LXNpemUgIT0gMSAgICAqICRiYXNlLWZvbnQtc2l6ZVxuICAgIG9yICRoNS1mb250LXNpemUgIT0gMC44MyAqICRiYXNlLWZvbnQtc2l6ZVxuICAgIG9yICRoNi1mb250LXNpemUgIT0gMC42NyAqICRiYXNlLWZvbnQtc2l6ZSB7XG4gICAgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG06IHRydWUgIWdsb2JhbDtcbiAgfVxuXG4gIC8qISBub3JtYWxpemUtc2NzcyB8IE1JVC9HUEx2MiBMaWNlbnNlIHwgYml0Lmx5L25vcm1hbGl6ZS1zY3NzICovXG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShkb2N1bWVudCkge1xuICAgIC8qIERvY3VtZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAgICAgKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluXG4gICAgICogICAgSUUgb24gV2luZG93cyBQaG9uZSBhbmQgaW4gaU9TLlxuICAgICAqL1xuXG4gICAgaHRtbCB7XG4gICAgICBAaWYgJGJhc2UtZm9udC1mYW1pbHkge1xuICAgICAgICAvKiBDaGFuZ2UgdGhlIGRlZmF1bHQgZm9udCBmYW1pbHkgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuICovXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkYmFzZS1mb250LWZhbWlseTtcbiAgICAgIH1cbiAgICAgIEBpZiAkYmFzZS1mb250LXNpemUgIT0gMTZweCBvciAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAgIC8vIENvcnJlY3Qgb2xkIGJyb3dzZXIgYnVnIHRoYXQgcHJldmVudGVkIGFjY2Vzc2libGUgcmVzaXppbmcgb2YgdGV4dFxuICAgICAgICAvLyB3aGVuIHJvb3QgZm9udC1zaXplIGlzIHNldCB3aXRoIHB4IG9yIGVtLlxuICAgICAgICBmb250LXNpemU6ICgkYmFzZS1mb250LXNpemUgLyAxNnB4KSAqIDEwMCU7XG4gICAgICB9XG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICBsaW5lLWhlaWdodDogKCRiYXNlLWxpbmUtaGVpZ2h0IC8gJGJhc2UtZm9udC1zaXplKSAqIDFlbTsgLyogMSAqL1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuICAgICAgfVxuICAgICAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoc2VjdGlvbnMpIHtcbiAgICAvKiBTZWN0aW9uc1xuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAgICAgKi9cblxuICAgIGJvZHkge1xuICAgICAgbWFyZ2luOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuXG4gICAgYXJ0aWNsZSxcbiAgICBhc2lkZSxcbiAgICBmb290ZXIsXG4gICAgaGVhZGVyLFxuICAgIG5hdixcbiAgICBzZWN0aW9uIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcbiAgICAgKiBgYXJ0aWNsZWAgY29udGV4dHMgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgU2FmYXJpLlxuICAgICAqL1xuXG4gICAgaDEge1xuICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDEtZm9udC1zaXplKTtcbiAgICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1saW5lLWhlaWdodCgkaDEtZm9udC1zaXplKTtcbiAgICAgIH1cblxuICAgICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgICAgLyogU2V0IDEgdW5pdCBvZiB2ZXJ0aWNhbCByaHl0aG0gb24gdGhlIHRvcCBhbmQgYm90dG9tIG1hcmdpbnMuICovXG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwLCAkaDEtZm9udC1zaXplKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgbWFyZ2luOiAwLjY3ZW0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgaDIge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtZm9udC1zaXplKCRoMi1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbGluZS1oZWlnaHQoJGgyLWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwLCAkaDItZm9udC1zaXplKTtcbiAgICAgIH1cblxuICAgICAgaDMge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtZm9udC1zaXplKCRoMy1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbGluZS1oZWlnaHQoJGgzLWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwLCAkaDMtZm9udC1zaXplKTtcbiAgICAgIH1cblxuICAgICAgaDQge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtZm9udC1zaXplKCRoNC1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbGluZS1oZWlnaHQoJGg0LWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwLCAkaDQtZm9udC1zaXplKTtcbiAgICAgIH1cblxuICAgICAgaDUge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtZm9udC1zaXplKCRoNS1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbGluZS1oZWlnaHQoJGg1LWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwLCAkaDUtZm9udC1zaXplKTtcbiAgICAgIH1cblxuICAgICAgaDYge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtZm9udC1zaXplKCRoNi1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbGluZS1oZWlnaHQoJGg2LWZvbnQtc2l6ZSk7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwLCAkaDYtZm9udC1zaXplKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGdyb3VwaW5nKSB7XG4gICAgLyogR3JvdXBpbmcgY29udGVudFxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgLyoqXG4gICAgICAgKiBTZXQgMSB1bml0IG9mIHZlcnRpY2FsIHJoeXRobSBvbiB0aGUgdG9wIGFuZCBib3R0b20gbWFyZ2luLlxuICAgICAgICovXG5cbiAgICAgIGJsb2NrcXVvdGUge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgJGluZGVudC1hbW91bnQpO1xuICAgICAgfVxuXG4gICAgICBkbCxcbiAgICAgIG9sLFxuICAgICAgdWwge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogVHVybiBvZmYgbWFyZ2lucyBvbiBuZXN0ZWQgbGlzdHMuXG4gICAgICAgKi9cblxuICAgICAgb2wsXG4gICAgICB1bCB7XG4gICAgICAgIG9sLFxuICAgICAgICB1bCB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRkIHtcbiAgICAgICAgbWFyZ2luOiAwIDAgMCAkaW5kZW50LWFtb3VudDtcbiAgICAgIH1cblxuICAgICAgb2wsXG4gICAgICB1bCB7XG4gICAgICAgIHBhZGRpbmc6IDAgMCAwICRpbmRlbnQtYW1vdW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuXG4gICAgZmlnY2FwdGlvbixcbiAgICBmaWd1cmUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IG1hcmdpbiBpbiBJRSA4LlxuICAgICAqL1xuXG4gICAgZmlndXJlIHtcbiAgICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAkaW5kZW50LWFtb3VudCk7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgIG1hcmdpbjogMWVtICRpbmRlbnQtYW1vdW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gICAgICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXG4gICAgICovXG5cbiAgICBociB7XG4gICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMSAqL1xuICAgICAgaGVpZ2h0OiAwOyAvKiAxICovXG4gICAgICBvdmVyZmxvdzogdmlzaWJsZTsgLyogMiAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxuICAgICAqL1xuXG4gICAgbWFpbiB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgLyoqXG4gICAgICAgKiBTZXQgMSB1bml0IG9mIHZlcnRpY2FsIHJoeXRobSBvbiB0aGUgdG9wIGFuZCBib3R0b20gbWFyZ2luLlxuICAgICAgICovXG5cbiAgICAgIHAsXG4gICAgICBwcmUge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5cbiAgICBwcmUge1xuICAgICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXG4gICAgICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUobGlua3MpIHtcbiAgICAvKiBMaW5rc1xuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiAxLiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gICAgICogMi4gUmVtb3ZlIGdhcHMgaW4gbGlua3MgdW5kZXJsaW5lIGluIGlPUyA4KyBhbmQgU2FmYXJpIDgrLlxuICAgICAqL1xuXG4gICAgYSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgLyogMSAqL1xuICAgICAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcDogb2JqZWN0czsgLyogMiAqL1xuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUodGV4dCkge1xuICAgIC8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctIGFuZCBGaXJlZm94IDM5LS5cbiAgICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICAgICAqL1xuXG4gICAgYWJiclt0aXRsZV0ge1xuICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IC8qIDIgKi9cbiAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDsgLyogMiAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZXZlbnQgdGhlIGR1cGxpY2F0ZSBhcHBsaWNhdGlvbiBvZiBgYm9sZGVyYCBieSB0aGUgbmV4dCBydWxlIGluIFNhZmFyaSA2LlxuICAgICAqL1xuXG4gICAgYixcbiAgICBzdHJvbmcge1xuICAgICAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIGIsXG4gICAgc3Ryb25nIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5cbiAgICBjb2RlLFxuICAgIGtiZCxcbiAgICBzYW1wIHtcbiAgICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICAgICAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzdHlsZSBpbiBBbmRyb2lkIDQuMy0uXG4gICAgICovXG5cbiAgICBkZm4ge1xuICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBiYWNrZ3JvdW5kIGFuZCBjb2xvciBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIG1hcmsge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMDtcbiAgICAgIGNvbG9yOiAjMDAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuXG4gICAgc21hbGwge1xuICAgICAgZm9udC1zaXplOiA4MCU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXG4gICAgICogYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuXG4gICAgc3ViLFxuICAgIHN1cCB7XG4gICAgICBmb250LXNpemU6IDc1JTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAgIH1cblxuICAgIHN1YiB7XG4gICAgICBib3R0b206IC0wLjI1ZW07XG4gICAgfVxuXG4gICAgc3VwIHtcbiAgICAgIHRvcDogLTAuNWVtO1xuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoZW1iZWRkZWQpIHtcbiAgICAvKiBFbWJlZGRlZCBjb250ZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuXG4gICAgYXVkaW8sXG4gICAgdmlkZW8ge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGlPUyA0LTcuXG4gICAgICovXG5cbiAgICBhdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIGhlaWdodDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLS5cbiAgICAgKi9cblxuICAgIGltZyB7XG4gICAgICBib3JkZXItc3R5bGU6IG5vbmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gICAgICovXG5cbiAgICBzdmc6bm90KDpyb290KSB7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoZm9ybXMpIHtcbiAgICAvKiBGb3Jtc1xuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiAxLiBDaGFuZ2UgdGhlIGZvbnQgc3R5bGVzIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICAgICAqIDIuIFJlbW92ZSB0aGUgbWFyZ2luIGluIEZpcmVmb3ggYW5kIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIGJ1dHRvbixcbiAgICBpbnB1dCxcbiAgICBvcHRncm91cCxcbiAgICBzZWxlY3QsXG4gICAgdGV4dGFyZWEge1xuICAgICAgZm9udC1mYW1pbHk6IGlmKCRiYXNlLWZvbnQtZmFtaWx5LCAkYmFzZS1mb250LWZhbWlseSwgc2Fucy1zZXJpZik7IC8qIDEgKi9cbiAgICAgIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xuICAgICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICgkYmFzZS1saW5lLWhlaWdodCAvICRiYXNlLWZvbnQtc2l6ZSkgKiAxZW07IC8qIDEgKi9cbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cbiAgICAgIH1cbiAgICAgIG1hcmdpbjogMDsgLyogMiAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxuICAgICAqL1xuXG4gICAgYnV0dG9uIHtcbiAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxuICAgICAqIDEuIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRmlyZWZveC5cbiAgICAgKi9cblxuICAgIGJ1dHRvbixcbiAgICBzZWxlY3QgeyAvKiAxICovXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBQcmV2ZW50IGEgV2ViS2l0IGJ1ZyB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2AgYW5kIGB2aWRlb2BcbiAgICAgKiAgICBjb250cm9scyBpbiBBbmRyb2lkIDQuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIGJ1dHRvbixcbiAgICBodG1sIFt0eXBlPVwiYnV0dG9uXCJdLCAvKiAxICovXG4gICAgW3R5cGU9XCJyZXNldFwiXSxcbiAgICBbdHlwZT1cInN1Ym1pdFwiXSB7XG4gICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMiAqL1xuICAgIH1cblxuICAgIGJ1dHRvbixcbiAgICBbdHlwZT1cImJ1dHRvblwiXSxcbiAgICBbdHlwZT1cInJlc2V0XCJdLFxuICAgIFt0eXBlPVwic3VibWl0XCJdIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxuICAgICAgICovXG5cbiAgICAgICY6Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgICAgICBib3JkZXItc3R5bGU6IG5vbmU7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuICAgICAgICovXG5cbiAgICAgICY6LW1vei1mb2N1c3Jpbmcge1xuICAgICAgICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cbiAgICAgKi9cblxuICAgIGlucHV0IHtcbiAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLS5cbiAgICAgKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAtLlxuICAgICAqL1xuXG4gICAgW3R5cGU9XCJjaGVja2JveFwiXSxcbiAgICBbdHlwZT1cInJhZGlvXCJdIHtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cbiAgICAgIHBhZGRpbmc6IDA7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXG4gICAgICovXG5cbiAgICBbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcbiAgICBbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gICAgICBoZWlnaHQ6IGF1dG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXG4gICAgICovXG5cbiAgICBbdHlwZT1cInNlYXJjaFwiXSB7XG4gICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xuICAgICAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgYW5kIGNhbmNlbCBidXR0b25zIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxuICAgICAgICovXG5cbiAgICAgICY6Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG4gICAgICAmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gICAgICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxuICAgICAqL1xuXG4gICAgOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xuICAgICAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAgICAgKi9cblxuICAgIGZpZWxkc2V0IHtcbiAgICAgIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cbiAgICAgKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gICAgICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5cbiAgICBsZWdlbmQge1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICAgICAgZGlzcGxheTogdGFibGU7IC8qIDEgKi9cbiAgICAgIG1heC13aWR0aDogMTAwJTsgLyogMSAqL1xuICAgICAgcGFkZGluZzogMDsgLyogMyAqL1xuICAgICAgY29sb3I6IGluaGVyaXQ7IC8qIDIgKi9cbiAgICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8qIDEgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICAgICAqL1xuXG4gICAgcHJvZ3Jlc3Mge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAvKiAxICovXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFLlxuICAgICAqL1xuXG4gICAgdGV4dGFyZWEge1xuICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShpbnRlcmFjdGl2ZSkge1xuICAgIC8qIEludGVyYWN0aXZlXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUsIGFuZCBGaXJlZm94LlxuICAgICAqL1xuXG4gICAgZGV0YWlscyB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIHN1bW1hcnkge1xuICAgICAgZGlzcGxheTogbGlzdC1pdGVtO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5cbiAgICBtZW51IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICAvKlxuICAgICAgICAgKiAxLiBTZXQgMSB1bml0IG9mIHZlcnRpY2FsIHJoeXRobSBvbiB0aGUgdG9wIGFuZCBib3R0b20gbWFyZ2luLlxuICAgICAgICAgKiAyLiBTZXQgY29uc2lzdGVudCBzcGFjZSBmb3IgdGhlIGxpc3Qgc3R5bGUgaW1hZ2UuXG4gICAgICAgICAqL1xuXG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwKTsgLyogMSAqL1xuICAgICAgICBwYWRkaW5nOiAwIDAgMCAkaW5kZW50LWFtb3VudDsgLyogMiAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUdXJuIG9mZiBtYXJnaW5zIG9uIG5lc3RlZCBsaXN0cy5cbiAgICAgICAgICovXG5cbiAgICAgICAgbWVudSAmLFxuICAgICAgICBvbCAmLFxuICAgICAgICB1bCAmIHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKHNjcmlwdGluZykge1xuICAgIC8qIFNjcmlwdGluZ1xuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIGNhbnZhcyB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXG4gICAgICovXG5cbiAgICB0ZW1wbGF0ZSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoaGlkZGVuKSB7XG4gICAgLyogSGlkZGVuXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLS5cbiAgICAgKi9cblxuICAgIFtoaWRkZW5dIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gVmVydGljYWwgUmh5dGhtXG4vL1xuLy8gVGhpcyBpcyB0aGUgbWluaW1hbCBhbW91bnQgb2YgY29kZSBuZWVkZWQgdG8gY3JlYXRlIHZlcnRpY2FsIHJoeXRobSBpbiBvdXJcbi8vIENTUy4gSWYgeW91IGFyZSBsb29raW5nIGZvciBhIHJvYnVzdCBzb2x1dGlvbiwgbG9vayBhdCB0aGUgZXhjZWxsZW50IFR5cGV5XG4vLyBsaWJyYXJ5LiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcHRhcmFudG8vdHlwZXlcblxuQGZ1bmN0aW9uIG5vcm1hbGl6ZS1yaHl0aG0oJHZhbHVlLCAkcmVsYXRpdmUtdG86ICRiYXNlLWZvbnQtc2l6ZSwgJHVuaXQ6ICRiYXNlLXVuaXQpIHtcbiAgQGlmIHVuaXQoJHZhbHVlKSAhPSBweCB7XG4gICAgQGVycm9yIFwiVGhlIG5vcm1hbGl6ZSB2ZXJ0aWNhbC1yaHl0aG0gbW9kdWxlIG9ubHkgc3VwcG9ydHMgcHggaW5wdXRzLiBUaGUgdHlwZXkgbGlicmFyeSBpcyBiZXR0ZXIuXCI7XG4gIH1cbiAgQGlmICR1bml0ID09IHJlbSB7XG4gICAgQHJldHVybiAoJHZhbHVlIC8gJGJhc2UtZm9udC1zaXplKSAqIDFyZW07XG4gIH1cbiAgQGVsc2UgaWYgJHVuaXQgPT0gZW0ge1xuICAgIEByZXR1cm4gKCR2YWx1ZSAvICRyZWxhdGl2ZS10bykgKiAxZW07XG4gIH1cbiAgQGVsc2UgeyAvLyAkdW5pdCA9PSBweFxuICAgIEByZXR1cm4gJHZhbHVlO1xuICB9XG59XG5cbkBtaXhpbiBub3JtYWxpemUtZm9udC1zaXplKCR2YWx1ZSwgJHJlbGF0aXZlLXRvOiAkYmFzZS1mb250LXNpemUpIHtcbiAgQGlmIHVuaXQoJHZhbHVlKSAhPSAncHgnIHtcbiAgICBAZXJyb3IgXCJub3JtYWxpemUtZm9udC1zaXplKCkgb25seSBzdXBwb3J0cyBweCBpbnB1dHMuIFRoZSB0eXBleSBsaWJyYXJ5IGlzIGJldHRlci5cIjtcbiAgfVxuICBmb250LXNpemU6IG5vcm1hbGl6ZS1yaHl0aG0oJHZhbHVlLCAkcmVsYXRpdmUtdG8pO1xufVxuXG5AbWl4aW4gbm9ybWFsaXplLXJoeXRobSgkcHJvcGVydHksICR2YWx1ZXMsICRyZWxhdGl2ZS10bzogJGJhc2UtZm9udC1zaXplKSB7XG4gICR2YWx1ZS1saXN0OiAkdmFsdWVzO1xuICAkc2VwOiBzcGFjZTtcbiAgQGlmIHR5cGUtb2YoJHZhbHVlcykgPT0gJ2xpc3QnIHtcbiAgICAkc2VwOiBsaXN0LXNlcGFyYXRvcigkdmFsdWVzKTtcbiAgfVxuICBAZWxzZSB7XG4gICAgJHZhbHVlLWxpc3Q6IGFwcGVuZCgoKSwgJHZhbHVlcyk7XG4gIH1cblxuICAkbm9ybWFsaXplZC12YWx1ZXM6ICgpO1xuICBAZWFjaCAkdmFsdWUgaW4gJHZhbHVlLWxpc3Qge1xuICAgIEBpZiB1bml0bGVzcygkdmFsdWUpIGFuZCAkdmFsdWUgIT0gMCB7XG4gICAgICAkdmFsdWU6ICR2YWx1ZSAqIG5vcm1hbGl6ZS1yaHl0aG0oJGJhc2UtbGluZS1oZWlnaHQsICRyZWxhdGl2ZS10byk7XG4gICAgfVxuICAgICRub3JtYWxpemVkLXZhbHVlczogYXBwZW5kKCRub3JtYWxpemVkLXZhbHVlcywgJHZhbHVlLCAkc2VwKTtcbiAgfVxuICAjeyRwcm9wZXJ0eX06ICRub3JtYWxpemVkLXZhbHVlcztcbn1cblxuQG1peGluIG5vcm1hbGl6ZS1tYXJnaW4oJHZhbHVlcywgJHJlbGF0aXZlLXRvOiAkYmFzZS1mb250LXNpemUpIHtcbiAgQGluY2x1ZGUgbm9ybWFsaXplLXJoeXRobShtYXJnaW4sICR2YWx1ZXMsICRyZWxhdGl2ZS10byk7XG59XG5cbkBtaXhpbiBub3JtYWxpemUtbGluZS1oZWlnaHQoJGZvbnQtc2l6ZSwgJG1pbi1saW5lLXBhZGRpbmc6IDJweCkge1xuICAkbGluZXM6IGNlaWwoJGZvbnQtc2l6ZSAvICRiYXNlLWxpbmUtaGVpZ2h0KTtcbiAgLy8gSWYgbGluZXMgYXJlIGNyYW1wZWQgaW5jbHVkZSBzb21lIGV4dHJhIGxlYWRpbmcuXG4gIEBpZiAoJGxpbmVzICogJGJhc2UtbGluZS1oZWlnaHQgLSAkZm9udC1zaXplKSA8ICgkbWluLWxpbmUtcGFkZGluZyAqIDIpIHtcbiAgICAkbGluZXM6ICRsaW5lcyArIDE7XG4gIH1cbiAgQGluY2x1ZGUgbm9ybWFsaXplLXJoeXRobShsaW5lLWhlaWdodCwgJGxpbmVzLCAkZm9udC1zaXplKTtcbn1cbiIsIi8vXG4vLyBWYXJpYWJsZXNcbi8vXG4vLyBZb3UgY2FuIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHZhbHVlcyBieSBzZXR0aW5nIHRoZSB2YXJpYWJsZXMgaW4geW91ciBTYXNzXG4vLyBiZWZvcmUgaW1wb3J0aW5nIHRoZSBub3JtYWxpemUtc2NzcyBsaWJyYXJ5LlxuXG4vLyBUaGUgZm9udCBzaXplIHNldCBvbiB0aGUgcm9vdCBodG1sIGVsZW1lbnQuXG4kYmFzZS1mb250LXNpemU6IDE2cHggIWRlZmF1bHQ7XG5cbi8vIFRoZSBiYXNlIGxpbmUgaGVpZ2h0IGRldGVybWluZXMgdGhlIGJhc2ljIHVuaXQgb2YgdmVydGljYWwgcmh5dGhtLlxuJGJhc2UtbGluZS1oZWlnaHQ6IDI0cHggIWRlZmF1bHQ7XG5cbi8vIFRoZSBsZW5ndGggdW5pdCBpbiB3aGljaCB0byBvdXRwdXQgdmVydGljYWwgcmh5dGhtIHZhbHVlcy5cbi8vIFN1cHBvcnRlZCB2YWx1ZXM6IHB4LCBlbSwgcmVtLlxuJGJhc2UtdW5pdDogJ2VtJyAhZGVmYXVsdDtcblxuLy8gVGhlIGRlZmF1bHQgZm9udCBmYW1pbHkuXG4kYmFzZS1mb250LWZhbWlseTogbnVsbCAhZGVmYXVsdDtcblxuLy8gVGhlIGZvbnQgc2l6ZXMgZm9yIGgxLWg2LlxuJGgxLWZvbnQtc2l6ZTogMiAgICAqICRiYXNlLWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiRoMi1mb250LXNpemU6IDEuNSAgKiAkYmFzZS1mb250LXNpemUgIWRlZmF1bHQ7XG4kaDMtZm9udC1zaXplOiAxLjE3ICogJGJhc2UtZm9udC1zaXplICFkZWZhdWx0O1xuJGg0LWZvbnQtc2l6ZTogMSAgICAqICRiYXNlLWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiRoNS1mb250LXNpemU6IDAuODMgKiAkYmFzZS1mb250LXNpemUgIWRlZmF1bHQ7XG4kaDYtZm9udC1zaXplOiAwLjY3ICogJGJhc2UtZm9udC1zaXplICFkZWZhdWx0O1xuXG4vLyBUaGUgYW1vdW50IGxpc3RzIGFuZCBibG9ja3F1b3RlcyBhcmUgaW5kZW50ZWQuXG4kaW5kZW50LWFtb3VudDogNDBweCAhZGVmYXVsdDtcblxuLy8gVGhlIGZvbGxvd2luZyB2YXJpYWJsZSBjb250cm9scyB3aGV0aGVyIG5vcm1hbGl6ZS1zY3NzIHdpbGwgb3V0cHV0XG4vLyBmb250LXNpemVzLCBsaW5lLWhlaWdodHMgYW5kIGJsb2NrLWxldmVsIHRvcC9ib3R0b20gbWFyZ2lucyB0aGF0IGZvcm0gYSBiYXNpY1xuLy8gdmVydGljYWwgcmh5dGhtIG9uIHRoZSBwYWdlLCB3aGljaCBkaWZmZXJzIGZyb20gdGhlIG9yaWdpbmFsIE5vcm1hbGl6ZS5jc3MuXG4vLyBIb3dldmVyLCBjaGFuZ2luZyBhbnkgb2YgdGhlIHZhcmlhYmxlcyBhYm92ZSB3aWxsIGNhdXNlXG4vLyAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB0byBiZSBhdXRvbWF0aWNhbGx5IHNldCB0byB0cnVlLlxuJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG06IGZhbHNlICFkZWZhdWx0O1xuIiwiLypcblxuXHQvLyAgLy8vLyAtLXwgICAgU3R5bGUuc2Nzc1xuXG4qL1xuLyohIG5vcm1hbGl6ZS1zY3NzIHwgTUlUL0dQTHYyIExpY2Vuc2UgfCBiaXQubHkvbm9ybWFsaXplLXNjc3MgKi9cbi8qIERvY3VtZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAgICAgKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluXG4gICAgICogICAgSUUgb24gV2luZG93cyBQaG9uZSBhbmQgaW4gaU9TLlxuICAgICAqL1xuaHRtbCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xuICAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqLyB9XG5cbi8qIFNlY3Rpb25zXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICAgICAqL1xuYm9keSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cbmFydGljbGUsXG5hc2lkZSxcbmZvb3RlcixcbmhlYWRlcixcbm5hdixcbnNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAgICAgKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gICAgICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7IH1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cbmZpZ2NhcHRpb24sXG5maWd1cmUge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgbWFyZ2luIGluIElFIDguXG4gICAgICovXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4OyB9XG5cbi8qKlxuICAgICAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gICAgICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXG4gICAgICovXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAxICovXG4gIGhlaWdodDogMDtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxuICAgICAqL1xubWFpbiB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xucHJlIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovIH1cblxuLyogTGlua3NcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogMS4gUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxuICAgICAqIDIuIFJlbW92ZSBnYXBzIGluIGxpbmtzIHVuZGVybGluZSBpbiBpT1MgOCsgYW5kIFNhZmFyaSA4Ky5cbiAgICAgKi9cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLyogMSAqL1xuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOiBvYmplY3RzO1xuICAvKiAyICovIH1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIENocm9tZSA1Ny0gYW5kIEZpcmVmb3ggMzktLlxuICAgICAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gICAgICovXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IG5vbmU7XG4gIC8qIDEgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIC8qIDIgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xuICAvKiAyICovIH1cblxuLyoqXG4gICAgICogUHJldmVudCB0aGUgZHVwbGljYXRlIGFwcGxpY2F0aW9uIG9mIGBib2xkZXJgIGJ5IHRoZSBuZXh0IHJ1bGUgaW4gU2FmYXJpIDYuXG4gICAgICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7IH1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyOyB9XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuY29kZSxcbmtiZCxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzdHlsZSBpbiBBbmRyb2lkIDQuMy0uXG4gICAgICovXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGJhY2tncm91bmQgYW5kIGNvbG9yIGluIElFIDktLlxuICAgICAqL1xubWFyayB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjA7XG4gIGNvbG9yOiAjMDAwOyB9XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTsgfVxuXG4vKipcbiAgICAgKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBlbGVtZW50cyBmcm9tIGFmZmVjdGluZyB0aGUgbGluZSBoZWlnaHQgaW5cbiAgICAgKiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuYXVkaW8sXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBpT1MgNC03LlxuICAgICAqL1xuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwOyB9XG5cbi8qKlxuICAgICAqIFJlbW92ZSB0aGUgYm9yZGVyIG9uIGltYWdlcyBpbnNpZGUgbGlua3MgaW4gSUUgMTAtLlxuICAgICAqL1xuaW1nIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lOyB9XG5cbi8qKlxuICAgICAqIEhpZGUgdGhlIG92ZXJmbG93IGluIElFLlxuICAgICAqL1xuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi8qIEZvcm1zXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICAgICAqL1xuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxMDAlO1xuICAvKiAxICovXG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xuICAvKiAxICovXG4gIG1hcmdpbjogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgICAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxuICAgICAqL1xuYnV0dG9uIHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cblxuLyoqXG4gICAgICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gICAgICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICAgICAqL1xuYnV0dG9uLFxuc2VsZWN0IHtcbiAgLyogMSAqL1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsgfVxuXG4vKipcbiAgICAgKiAxLiBQcmV2ZW50IGEgV2ViS2l0IGJ1ZyB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2AgYW5kIGB2aWRlb2BcbiAgICAgKiAgICBjb250cm9scyBpbiBBbmRyb2lkIDQuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmJ1dHRvbixcbmh0bWwgW3R5cGU9XCJidXR0b25cIl0sXG5bdHlwZT1cInJlc2V0XCJdLFxuW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMiAqLyB9XG5cbmJ1dHRvbixcblt0eXBlPVwiYnV0dG9uXCJdLFxuW3R5cGU9XCJyZXNldFwiXSxcblt0eXBlPVwic3VibWl0XCJdIHtcbiAgLyoqXG4gICAgICAgKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxuICAgICAgICovXG4gIC8qKlxuICAgICAgICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuICAgICAgICovIH1cbiAgYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuICBbdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcbiAgW3R5cGU9XCJyZXNldFwiXTo6LW1vei1mb2N1cy1pbm5lcixcbiAgW3R5cGU9XCJzdWJtaXRcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgICBwYWRkaW5nOiAwOyB9XG4gIGJ1dHRvbjotbW96LWZvY3VzcmluZyxcbiAgW3R5cGU9XCJidXR0b25cIl06LW1vei1mb2N1c3JpbmcsXG4gIFt0eXBlPVwicmVzZXRcIl06LW1vei1mb2N1c3JpbmcsXG4gIFt0eXBlPVwic3VibWl0XCJdOi1tb3otZm9jdXNyaW5nIHtcbiAgICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7IH1cblxuLyoqXG4gICAgICogU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cbiAgICAgKi9cbmlucHV0IHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cblxuLyoqXG4gICAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAtLlxuICAgICAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC0uXG4gICAgICovXG5bdHlwZT1cImNoZWNrYm94XCJdLFxuW3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgICAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cbiAgICAgKi9cblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87IH1cblxuLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXG4gICAgICovXG5bdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xuICAvKiAyICovXG4gIC8qKlxuICAgICAgICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGFuZCBjYW5jZWwgYnV0dG9ucyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBtYWNPUy5cbiAgICAgICAqLyB9XG4gIFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLCBbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gICAgICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxuICAgICAqL1xuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAgICAgKiBDb3JyZWN0IHRoZSBwYWRkaW5nIGluIEZpcmVmb3guXG4gICAgICovXG5maWVsZHNldCB7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTsgfVxuXG4vKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cbiAgICAgKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gICAgICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5sZWdlbmQge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAvKiAxICovXG4gIGRpc3BsYXk6IHRhYmxlO1xuICAvKiAxICovXG4gIG1heC13aWR0aDogMTAwJTtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAzICovXG4gIGNvbG9yOiBpbmhlcml0O1xuICAvKiAyICovXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gIC8qIDEgKi8gfVxuXG4vKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICAgICAqL1xucHJvZ3Jlc3Mge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAyICovIH1cblxuLyoqXG4gICAgICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRS5cbiAgICAgKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLyogSW50ZXJhY3RpdmVcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSwgYW5kIEZpcmVmb3guXG4gICAgICovXG5kZXRhaWxzIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogbGlzdC1pdGVtOyB9XG5cbi8qXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5tZW51IHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyogU2NyaXB0aW5nXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuY2FudmFzIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxuICAgICAqL1xudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi8qIEhpZGRlblxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC0uXG4gICAgICovXG5baGlkZGVuXSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBTZXR0aW5nc1xuXG4qL1xuLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBQbGFjZWhvbGRlcnNcblxuKi9cbi5oZXJvLXN0YW5kYXJkIC5jb250ZW50IGgxLCAuaGVyby1jYXJvdXNlbCAuY29udGVudCBoMSwgLmhlcm8tc3RhbmRhcmQgLmNvbnRlbnQgcCwgLmhlcm8tY2Fyb3VzZWwgLmNvbnRlbnQgcCB7XG4gIHRleHQtc2hhZG93OiAwIDAgMS44cmVtIHJnYmEoMTEwLCAxMTAsIDExMCwgMC44KTsgfVxuXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIEZ1bmN0aW9uc1xuXG4qL1xuLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBNaXhpbnNcblxuKi9cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgR3JpZCAmIExheW91dHNcblxuKi9cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgRmVhdHVyZXNcblxuKi9cbi50b3AsIC5ib3R0b20ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDsgfVxuXG4udG9wIHtcbiAgei1pbmRleDogMjtcbiAgdHJhbnNpdGlvbjogMzAwbXM7IH1cbiAgLnRvcDpob3ZlciB7XG4gICAgb3BhY2l0eTogMDsgfVxuXG4uYm90dG9tIHtcbiAgei1pbmRleDogMTsgfVxuXG4vKlxuXG5cdC8vICAvLy8vIC0tfCAgICBDb3JlXG5cbiovXG4qIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG5pbWcsIHZpZGVvIHtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IGF1dG87XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbio6OnNlbGVjdGlvbiB7XG4gIGNvbG9yOiAjRkFGQUZBO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDQ0QkIwO1xuICB0ZXh0LXNoYWRvdzogbm9uZTsgfVxuXG5ib2R5IHtcbiAgd2lkdGg6IDEwMCU7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG4gIGJhY2tncm91bmQtY29sb3I6ICNGQUZBRkE7IH1cblxuc2VjdGlvbi5jb250YWluLCAuaGVhZGVyLXByaW1hcnksIGZvb3RlciwgLmhlcm8tc3RhbmRhcmQgLmNvbnRlbnQsIC5oZXJvLWNhcm91c2VsIC5jb250ZW50IHtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmctbGVmdDogMXJlbTtcbiAgcGFkZGluZy1yaWdodDogMXJlbTsgfVxuICBzZWN0aW9uLmNvbnRhaW4gPiBkaXYsIC5oZWFkZXItcHJpbWFyeSA+IGRpdiwgZm9vdGVyID4gZGl2LCAuaGVyby1zdGFuZGFyZCAuY29udGVudCA+IGRpdiwgLmhlcm8tY2Fyb3VzZWwgLmNvbnRlbnQgPiBkaXYge1xuICAgIG1heC13aWR0aDogMTI0cmVtO1xuICAgIG1hcmdpbjogMCBhdXRvOyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgc2VjdGlvbi5jb250YWluLCAuaGVhZGVyLXByaW1hcnksIGZvb3RlciwgLmhlcm8tc3RhbmRhcmQgLmNvbnRlbnQsIC5oZXJvLWNhcm91c2VsIC5jb250ZW50IHtcbiAgICAgIHBhZGRpbmctbGVmdDogMnJlbTtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDJyZW07IH0gfVxuXG5tYWluIHtcbiAgbWluLWhlaWdodDogY2FsYyggMTAwdmggLSA1cmVtKTtcbiAgcGFkZGluZy10b3A6IDEycmVtO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGQUZBRkE7IH1cblxuc2VjdGlvbi5jb250YWluIHtcbiAgcGFkZGluZy10b3A6IDRyZW07XG4gIHBhZGRpbmctYm90dG9tOiA0cmVtOyB9XG5cbnNlY3Rpb24uZnJlZSB7XG4gIHBhZGRpbmc6IDRyZW0gMXJlbTsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xuICAgIHNlY3Rpb24uZnJlZSB7XG4gICAgICBwYWRkaW5nOiA0cmVtIDJyZW07IH0gfVxuXG5zZWN0aW9uLmdyZXkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZGVkOyB9XG5cbnNlY3Rpb24uZ3JhZGllbnQge1xuICBwYWRkaW5nLXRvcDogOHJlbTtcbiAgcGFkZGluZy1ib3R0b206IDhyZW07XG4gIGJhY2tncm91bmQ6ICM5NDRiYjA7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICNFNDRCQjAgMCUsICM0NDRCQjAgMTAwJSk7XG4gIGNvbG9yOiAjRkFGQUZBOyB9XG4gIHNlY3Rpb24uZ3JhZGllbnQgaDIge1xuICAgIGNvbG9yOiAjRkFGQUZBOyB9XG5cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgSGVhZGVyXG5cbiovXG4uaGVhZGVyLXByaW1hcnkge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA2cmVtO1xuICBwYWRkaW5nOiAxcmVtO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHotaW5kZXg6IDk5OTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzcsIDIzNywgMjM3LCAwLjk2KTtcbiAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoMnB4KTtcbiAgYm94LXNoYWRvdzogMCAwIDhyZW0gcmdiYSgxMTAsIDExMCwgMTEwLCAwLjQpO1xuICB0cmFuc2l0aW9uOiA0MDBtcyBjdWJpYy1iZXppZXIoMC4yLCAwLjcsIDAuNSwgMS4xKTsgfVxuICAuaGVhZGVyLXByaW1hcnkgLmxvZ28ge1xuICAgIG1pbi1oZWlnaHQ6IDEwMCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwOyB9XG4gICAgLmhlYWRlci1wcmltYXJ5IC5sb2dvIHN2ZyB7XG4gICAgICBtaW4taGVpZ2h0OiAxMDAlOyB9XG4gIC5oZWFkZXItcHJpbWFyeSA+IGRpdiB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyOyB9XG4gICAgLmhlYWRlci1wcmltYXJ5ID4gZGl2ID4gZGl2Om5vdCgudG9nZ2xlKSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxuICAgICAgLmhlYWRlci1wcmltYXJ5ID4gZGl2ID4gZGl2Om5vdCgudG9nZ2xlKSBzcGFuIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDRyZW07XG4gICAgICAgIGNvbG9yOiAjOTQ0YmIwO1xuICAgICAgICBmb250LXNpemU6IDJyZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxOyB9XG4gIC5oZWFkZXItcHJpbWFyeS5zbGlkZXIge1xuICAgIGhlaWdodDogMjYuMnJlbTsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xuICAgIC5oZWFkZXItcHJpbWFyeSB7XG4gICAgICBwYWRkaW5nOiAxcmVtIDJyZW07IH0gfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcbiAgICAuaGVhZGVyLXByaW1hcnkge1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7IH1cbiAgICAgIC5oZWFkZXItcHJpbWFyeSAubG9nbyB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgfSB9XG5cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgRm9vdGVyXG5cbiovXG5mb290ZXIge1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZzogNHJlbSAxcmVtO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlZGVkZWQ7IH1cbiAgZm9vdGVyIHAge1xuICAgIG1hcmdpbjogMDsgfVxuICBmb290ZXIgLmZvb3Rlci1pbmZvIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgfVxuICBmb290ZXIgc21hbGwuY3JlYXRvciB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMDgwODA4O1xuICAgIGZvbnQtc2l6ZTogMS40cmVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjY7IH1cblxuLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBUeXBvZ3JhcGh5XG5cbiovXG5wLCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IDA7IH1cblxuaHRtbCB7XG4gIGZvbnQtc2l6ZTogNjIuNSU7IH1cblxuYm9keSwgaW5wdXQsIHRleHRhcmVhLCBidXR0b24ge1xuICBmb250LWZhbWlseTogXCJOdW5pdG9cIiwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxLjhyZW07XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgY29sb3I6ICMyMjIyMjI7IH1cblxucCB7XG4gIG1heC13aWR0aDogNjguNHJlbTtcbiAgbWFyZ2luLWJvdHRvbTogMi44OHJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuNjtcbiAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICBwOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDA7IH1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIGZvbnQtZmFtaWx5OiBcIk51bml0b1wiLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNzAwO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgY29sb3I6ICMwODA4MDg7IH1cblxuYXJ0aWNsZSBoMiB7XG4gIG1hcmdpbi1ib3R0b206IDEuNDRyZW07IH1cblxuYXJ0aWNsZSBoMyB7XG4gIG1hcmdpbi1ib3R0b206IDEuNDRyZW07IH1cblxuaDEge1xuICBmb250LXNpemU6IDRyZW07XG4gIG1heC13aWR0aDogNjguNHJlbTsgfVxuXG5oMiB7XG4gIGZvbnQtc2l6ZTogMy4ycmVtO1xuICBtYXgtd2lkdGg6IDY4LjRyZW07IH1cblxuaDMge1xuICBmb250LXNpemU6IDIuNnJlbTtcbiAgbWF4LXdpZHRoOiA2OC40cmVtOyB9XG5cbmg0IHtcbiAgZm9udC1zaXplOiAyLjJyZW07XG4gIG1heC13aWR0aDogNjguNHJlbTsgfVxuXG5oNSB7XG4gIGZvbnQtc2l6ZTogMS44cmVtO1xuICBtYXgtd2lkdGg6IDY4LjRyZW07IH1cblxuaDYge1xuICBmb250LXNpemU6IDEuNHJlbTtcbiAgbWF4LXdpZHRoOiA2OC40cmVtOyB9XG5cbmEge1xuICBjb2xvcjogI0U0NEJCMDtcbiAgbGluZS1oZWlnaHQ6IDEuNjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB0cmFuc2l0aW9uOiAzMDBtczsgfVxuICBhOmhvdmVyIHtcbiAgICBjb2xvcjogIzQ0NEJCMDsgfVxuXG5hICsgcCB7XG4gIG1hcmdpbi10b3A6IDIuODhyZW07IH1cblxucCA+IGEsIGxpOm5vdCgubWVudS1pdGVtKSA+IGEsIHNtYWxsID4gYSwgLmxpbmsge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgY29sb3I6IGluaGVyaXQ7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7IH1cbiAgcCA+IGE6OmFmdGVyLCBsaTpub3QoLm1lbnUtaXRlbSkgPiBhOjphZnRlciwgc21hbGwgPiBhOjphZnRlciwgLmxpbms6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IC4xcmVtO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFNDRCQjA7XG4gICAgdHJhbnNpdGlvbjogMzAwbXM7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMSk7IH1cbiAgcCA+IGE6aG92ZXIsIGxpOm5vdCgubWVudS1pdGVtKSA+IGE6aG92ZXIsIHNtYWxsID4gYTpob3ZlciwgLmxpbms6aG92ZXIge1xuICAgIGNvbG9yOiAjRTQ0QkIwOyB9XG4gICAgcCA+IGE6aG92ZXI6OmFmdGVyLCBsaTpub3QoLm1lbnUtaXRlbSkgPiBhOmhvdmVyOjphZnRlciwgc21hbGwgPiBhOmhvdmVyOjphZnRlciwgLmxpbms6aG92ZXI6OmFmdGVyIHtcbiAgICAgIHRyYW5zZm9ybTogc2NhbGVYKDApOyB9XG5cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgTGlzdHMgLSBPcmRlcmVkICYgVW5vcmRlcmVkXG5cbiovXG51bCwgb2wge1xuICBtYXJnaW4tdG9wOiAwO1xuICBtYXJnaW4tYm90dG9tOiAyLjRyZW07XG4gIHBhZGRpbmctbGVmdDogMC40cmVtO1xuICBsaW5lLWhlaWdodDogMS41OyB9XG4gIHVsIGxpLCBvbCBsaSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMS40NHJlbTsgfVxuICAgIHVsIGxpOmxhc3Qtb2YtdHlwZSwgb2wgbGk6bGFzdC1vZi10eXBlIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7IH1cblxudWwge1xuICBsaXN0LXN0eWxlOiBjaXJjbGUgb3V0c2lkZTtcbiAgcGFkZGluZy1sZWZ0OiAycmVtOyB9XG5cbm9sIHtcbiAgbGlzdC1zdHlsZTogZGVjaW1hbCBpbnNpZGU7IH1cblxudWwgdWwsIHVsIG9sLCBvbCBvbCwgb2wgdWwge1xuICBtYXJnaW4tYm90dG9tOiAwO1xuICBwYWRkaW5nLWxlZnQ6IDNyZW07IH1cblxuLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBCdXR0b25zXG5cbiovXG4uYnV0dG9uLFxuYnV0dG9uLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSxcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJidXR0b25cIl0ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDAuNnJlbSAycmVtO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJvcmRlcjogMC4xcmVtIHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItcmFkaXVzOiAwLjRyZW07XG4gIGZvbnQtc2l6ZTogMS40cmVtO1xuICBsaW5lLWhlaWdodDogMS41O1xuICBmb250LXdlaWdodDogNzAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsZXR0ZXItc3BhY2luZzogLjFyZW07XG4gIHRyYW5zaXRpb246IDMwMG1zO1xuICBjdXJzb3I6IHBvaW50ZXI7IH1cblxuLmJ1dHRvbixcbmJ1dHRvbixcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwiYnV0dG9uXCJdIHtcbiAgY29sb3I6ICNGQUZBRkE7XG4gIGJhY2tncm91bmQtY29sb3I6ICM0NDRCQjA7IH1cbiAgLmJ1dHRvbjpob3ZlcixcbiAgYnV0dG9uOmhvdmVyLFxuICBpbnB1dFt0eXBlPVwic3VibWl0XCJdOmhvdmVyLFxuICBpbnB1dFt0eXBlPVwicmVzZXRcIl06aG92ZXIsXG4gIGlucHV0W3R5cGU9XCJidXR0b25cIl06aG92ZXIge1xuICAgIGNvbG9yOiAjRkFGQUZBO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFNDRCQjA7IH1cblxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gIG1hcmdpbjogMDsgfVxuICBpbnB1dFt0eXBlPVwic3VibWl0XCJdLnN1Ym1pdHRpbmcge1xuICAgIGFuaW1hdGlvbjogcHVsc2luZyAycyBpbmZpbml0ZSBmb3J3YXJkczsgfVxuXG5Aa2V5ZnJhbWVzIHB1bHNpbmcge1xuICAwJSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzQ0NEJCMDsgfVxuICA1MCUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFNDRCQjA7IH1cbiAgMTAwJSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzQ0NEJCMDsgfSB9XG5cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgSW5wdXRzICYgTGFiZWxzXG5cbiovXG5sYWJlbCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBmb250LXNpemU6IDEuNHJlbTtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgY29sb3I6ICMzYjNiM2I7XG4gIHRyYW5zaXRpb246IDIwMG1zOyB9XG4gIGxhYmVsLnN1Y2Nlc3Mge1xuICAgIGNvbG9yOiAjMDRCRjJGOyB9XG4gIGxhYmVsLmVycm9yIHtcbiAgICBjb2xvcjogI0UzMDYxNzsgfVxuICBsYWJlbC5mb2N1cyB7XG4gICAgY29sb3I6ICM0NDRCQjA7IH1cblxuaW5wdXRbdHlwZT1cIm5hbWVcIl0sXG5pbnB1dFt0eXBlPVwiZW1haWxcIl0sXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSxcbmlucHV0W3R5cGU9XCJ0ZXh0XCJdLFxuaW5wdXRbdHlwZT1cInRlbFwiXSxcbmlucHV0W3R5cGU9XCJ1cmxcIl0sXG5pbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0sXG50ZXh0YXJlYSB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDUwcmVtO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBwYWRkaW5nOiAuNXJlbSAxcmVtO1xuICBkaXNwbGF5OiBibG9jaztcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlZGVkZWQ7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogMC40cmVtO1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIHRyYW5zaXRpb246IDIwMG1zO1xuICBvdXRsaW5lOiBub25lO1xuICBvdXRsaW5lLXdpZHRoOiAwOyB9XG4gIGlucHV0W3R5cGU9XCJuYW1lXCJdOi13ZWJraXQtYXV0b2ZpbGwsIGlucHV0W3R5cGU9XCJuYW1lXCJdOi13ZWJraXQtYXV0b2ZpbGw6aG92ZXIsIGlucHV0W3R5cGU9XCJuYW1lXCJdOi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsIGlucHV0W3R5cGU9XCJuYW1lXCJdOi13ZWJraXQtYXV0b2ZpbGw6YWN0aXZlLFxuICBpbnB1dFt0eXBlPVwiZW1haWxcIl06LXdlYmtpdC1hdXRvZmlsbCxcbiAgaW5wdXRbdHlwZT1cImVtYWlsXCJdOi13ZWJraXQtYXV0b2ZpbGw6aG92ZXIsXG4gIGlucHV0W3R5cGU9XCJlbWFpbFwiXTotd2Via2l0LWF1dG9maWxsOmZvY3VzLFxuICBpbnB1dFt0eXBlPVwiZW1haWxcIl06LXdlYmtpdC1hdXRvZmlsbDphY3RpdmUsXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl06LXdlYmtpdC1hdXRvZmlsbCxcbiAgaW5wdXRbdHlwZT1cIm51bWJlclwiXTotd2Via2l0LWF1dG9maWxsOmhvdmVyLFxuICBpbnB1dFt0eXBlPVwibnVtYmVyXCJdOi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl06LXdlYmtpdC1hdXRvZmlsbDphY3RpdmUsXG4gIGlucHV0W3R5cGU9XCJzZWFyY2hcIl06LXdlYmtpdC1hdXRvZmlsbCxcbiAgaW5wdXRbdHlwZT1cInNlYXJjaFwiXTotd2Via2l0LWF1dG9maWxsOmhvdmVyLFxuICBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsXG4gIGlucHV0W3R5cGU9XCJzZWFyY2hcIl06LXdlYmtpdC1hdXRvZmlsbDphY3RpdmUsXG4gIGlucHV0W3R5cGU9XCJ0ZXh0XCJdOi13ZWJraXQtYXV0b2ZpbGwsXG4gIGlucHV0W3R5cGU9XCJ0ZXh0XCJdOi13ZWJraXQtYXV0b2ZpbGw6aG92ZXIsXG4gIGlucHV0W3R5cGU9XCJ0ZXh0XCJdOi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsXG4gIGlucHV0W3R5cGU9XCJ0ZXh0XCJdOi13ZWJraXQtYXV0b2ZpbGw6YWN0aXZlLFxuICBpbnB1dFt0eXBlPVwidGVsXCJdOi13ZWJraXQtYXV0b2ZpbGwsXG4gIGlucHV0W3R5cGU9XCJ0ZWxcIl06LXdlYmtpdC1hdXRvZmlsbDpob3ZlcixcbiAgaW5wdXRbdHlwZT1cInRlbFwiXTotd2Via2l0LWF1dG9maWxsOmZvY3VzLFxuICBpbnB1dFt0eXBlPVwidGVsXCJdOi13ZWJraXQtYXV0b2ZpbGw6YWN0aXZlLFxuICBpbnB1dFt0eXBlPVwidXJsXCJdOi13ZWJraXQtYXV0b2ZpbGwsXG4gIGlucHV0W3R5cGU9XCJ1cmxcIl06LXdlYmtpdC1hdXRvZmlsbDpob3ZlcixcbiAgaW5wdXRbdHlwZT1cInVybFwiXTotd2Via2l0LWF1dG9maWxsOmZvY3VzLFxuICBpbnB1dFt0eXBlPVwidXJsXCJdOi13ZWJraXQtYXV0b2ZpbGw6YWN0aXZlLFxuICBpbnB1dFt0eXBlPVwicGFzc3dvcmRcIl06LXdlYmtpdC1hdXRvZmlsbCxcbiAgaW5wdXRbdHlwZT1cInBhc3N3b3JkXCJdOi13ZWJraXQtYXV0b2ZpbGw6aG92ZXIsXG4gIGlucHV0W3R5cGU9XCJwYXNzd29yZFwiXTotd2Via2l0LWF1dG9maWxsOmZvY3VzLFxuICBpbnB1dFt0eXBlPVwicGFzc3dvcmRcIl06LXdlYmtpdC1hdXRvZmlsbDphY3RpdmUsXG4gIHRleHRhcmVhOi13ZWJraXQtYXV0b2ZpbGwsXG4gIHRleHRhcmVhOi13ZWJraXQtYXV0b2ZpbGw6aG92ZXIsXG4gIHRleHRhcmVhOi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsXG4gIHRleHRhcmVhOi13ZWJraXQtYXV0b2ZpbGw6YWN0aXZlIHtcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCAwIDMwcHggI2VkZWRlZCBpbnNldCAhaW1wb3J0YW50OyB9XG4gIGlucHV0W3R5cGU9XCJuYW1lXCJdLmZvY3VzLFxuICBpbnB1dFt0eXBlPVwiZW1haWxcIl0uZm9jdXMsXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl0uZm9jdXMsXG4gIGlucHV0W3R5cGU9XCJzZWFyY2hcIl0uZm9jdXMsXG4gIGlucHV0W3R5cGU9XCJ0ZXh0XCJdLmZvY3VzLFxuICBpbnB1dFt0eXBlPVwidGVsXCJdLmZvY3VzLFxuICBpbnB1dFt0eXBlPVwidXJsXCJdLmZvY3VzLFxuICBpbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0uZm9jdXMsXG4gIHRleHRhcmVhLmZvY3VzIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMnJlbSByZ2JhKDM0LCAzNCwgMzQsIDAuMik7IH1cblxuLmlucHV0LCAudGV4dGFyZWEge1xuICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cbiAgLmlucHV0IGxhYmVsLCAudGV4dGFyZWEgbGFiZWwge1xuICAgIHBhZGRpbmctbGVmdDogMXJlbTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxldHRlci1zcGFjaW5nOiAuMTVyZW07IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAuaW5wdXQsIC50ZXh0YXJlYSB7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwOyB9IH1cblxuLnZhbGlkYXRpb24ge1xuICBwYWRkaW5nOiAuNHJlbSAxcmVtO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IC0uMnJlbTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwMCUpIHNjYWxlKDApO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XG4gIG9wYWNpdHk6IDA7XG4gIGNvbG9yOiAjMDgwODA4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkFGQUZBO1xuICBib3JkZXItcmFkaXVzOiAuNHJlbTtcbiAgYm94LXNoYWRvdzogMC41cmVtIDAuNXJlbSAycmVtIHJnYmEoMzQsIDM0LCAzNCwgMC40KTtcbiAgZm9udC1zaXplOiAxLjRyZW07XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICB6LWluZGV4OiAxMDA7XG4gIHRyYW5zaXRpb246IDIwMG1zOyB9XG4gIC52YWxpZGF0aW9uOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiAxcmVtO1xuICAgIGhlaWdodDogMXJlbTtcbiAgICB0b3A6IC0uMXJlbTtcbiAgICByaWdodDogMDtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsIC01MCUpO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFMzA2MTc7XG4gICAgYm9yZGVyLXJhZGl1czogMXJlbTsgfVxuICAudmFsaWRhdGlvbi5wb3Age1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKSBzY2FsZSgxKTtcbiAgICBvcGFjaXR5OiAxOyB9XG5cbnRleHRhcmVhIHtcbiAgaGVpZ2h0OiA5LjY0cmVtO1xuICBsaW5lLWhlaWdodDogMS41O1xuICByZXNpemU6IG5vbmU7IH1cblxuc2VsZWN0IHtcbiAgaGVpZ2h0OiAzLjZyZW07XG4gIG1hcmdpbi1ib3R0b206IDNyZW07XG4gIHBhZGRpbmc6IDAuNnJlbSAxcmVtO1xuICBkaXNwbGF5OiBibG9jaztcbiAgbGluZS1oZWlnaHQ6IDEuNjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VkZWRlZDtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItcmFkaXVzOiAwLjRyZW07XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgYXBwZWFyYW5jZTogbm9uZTsgfVxuXG4uY2hlY2tib3gge1xuICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cbiAgLmNoZWNrYm94IGxhYmVsIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcGFkZGluZy1ib3R0b206IDA7XG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cbiAgLmNoZWNrYm94IC52YWxpZGF0aW9uIHtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiBhdXRvO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDAgMDsgfVxuICAgIC5jaGVja2JveCAudmFsaWRhdGlvbjo6YmVmb3JlIHtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICByaWdodDogYXV0bztcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgLmNoZWNrYm94IHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7IH0gfVxuXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIENvZGVcblxuKi9cbi5jb2RlIHtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbjogNy4ycmVtIDAgNy4ycmVtIDA7XG4gIHRleHQtYWxpZ246IGxlZnQ7IH1cbiAgLmNvZGUgc3BhbiB7XG4gICAgbWFyZ2luLWJvdHRvbTogMC42cmVtO1xuICAgIHBhZGRpbmctbGVmdDogMiU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgY29sb3I6ICM2ZTZlNmU7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyB9XG5cbnByZSB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDEuNzVyZW07XG4gIGJhY2tncm91bmQtY29sb3I6ICNlMWUxZTE7XG4gIGJvcmRlci1yYWRpdXM6IC40cmVtO1xuICBvdmVyZmxvdy14OiBzY3JvbGw7XG4gIGZvbnQtc2l6ZTogODAlO1xuICBsaW5lLWhlaWdodDogMS40O1xuICB0cmFuc2l0aW9uOiAyMDBtczsgfVxuICBwcmUgY29kZSB7XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgcHJlOmhvdmVyIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMXJlbSByZ2JhKDgsIDgsIDgsIDAuMik7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Q0ZDRkNDsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xuICAgIHByZSB7XG4gICAgICBwYWRkaW5nOiAzLjVyZW07IH0gfVxuXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIFRhYmxlXG5cbiovXG50YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW4tYm90dG9tOiAyLjRyZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjY7IH1cbiAgdGFibGUgdGgge1xuICAgIHBhZGRpbmctYm90dG9tOiAwcmVtO1xuICAgIGNvbG9yOiAjMDgwODA4O1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gICAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICB0YWJsZSB0ZCB7XG4gICAgcGFkZGluZy10b3A6IDEuOHJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41cmVtO1xuICAgIGJvcmRlci1ib3R0b206IDAuMXJlbSBzb2xpZCAjMDgwODA4O1xuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuNjsgfVxuXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIE5hdmlnYXRpb24gLSBIZWFkZXJcblxuKi9cbm5hdiB1bCB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwOyB9XG4gIG5hdiB1bCBhLCBuYXYgdWwgc3BhbiB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjY7XG4gICAgdHJhbnNpdGlvbjogMzAwbXM7IH1cbiAgICBuYXYgdWwgYTpob3ZlciwgbmF2IHVsIHNwYW46aG92ZXIge1xuICAgICAgY29sb3I6ICNFNDRCQjA7IH1cbiAgbmF2IHVsIHNwYW4ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuXG4ubWFpbi1uYXYge1xuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBwYWRkaW5nLXRvcDogNXJlbTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHotaW5kZXg6IDEwOyB9XG4gIC5tYWluLW5hdiB1bCB7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgcGFkZGluZzogM3JlbSAwO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICAgIC5tYWluLW5hdiB1bCBsaSB7XG4gICAgICBtYXJnaW4tYm90dG9tOiAuOHJlbTtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgZm9udC1zaXplOiAycmVtO1xuICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgbGluZS1oZWlnaHQ6IDE7IH1cbiAgICAgIC5tYWluLW5hdiB1bCBsaSBhLCAubWFpbi1uYXYgdWwgbGkgc3BhbiB7XG4gICAgICAgIHBhZGRpbmc6IC44cmVtIDA7XG4gICAgICAgIGNvbG9yOiAjMDgwODA4O1xuICAgICAgICBmb250LXdlaWdodDogMzAwOyB9XG4gICAgICAgIC5tYWluLW5hdiB1bCBsaSBhLmFjdGl2ZSwgLm1haW4tbmF2IHVsIGxpIHNwYW4uYWN0aXZlIHtcbiAgICAgICAgICBjb2xvcjogI0U0NEJCMDsgfVxuICAgICAgICAubWFpbi1uYXYgdWwgbGkgYTo6YWZ0ZXIsIC5tYWluLW5hdiB1bCBsaSBzcGFuOjphZnRlciB7XG4gICAgICAgICAgZGlzcGxheTogbm9uZTsgfVxuICAgICAgICAubWFpbi1uYXYgdWwgbGkgYTpob3ZlciwgLm1haW4tbmF2IHVsIGxpIHNwYW46aG92ZXIge1xuICAgICAgICAgIGNvbG9yOiAjRTQ0QkIwOyB9XG4gICAgICAubWFpbi1uYXYgdWwgbGkucGFyZW50IHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gICAgICAgIC5tYWluLW5hdiB1bCBsaS5wYXJlbnQgLnN1Yi1tZW51IHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxcmVtO1xuICAgICAgICAgIHBhZGRpbmc6IDFyZW07XG4gICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VkZWRlZDsgfVxuICAgICAgLm1haW4tbmF2IHVsIGxpLnNob3cgLnN1Yi1tZW51IHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7IH1cbiAgICAgIC5tYWluLW5hdiB1bCBsaTpsYXN0LW9mLXR5cGUge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gICAgLm1haW4tbmF2IHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gICAgICAubWFpbi1uYXYgdWwge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxuICAgICAgICAubWFpbi1uYXYgdWwgbGkge1xuICAgICAgICAgIGhlaWdodDogNHJlbTtcbiAgICAgICAgICBtYXJnaW46IDAgMnJlbSAwIDA7XG4gICAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XG4gICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICAgICAgICAgIC5tYWluLW5hdiB1bCBsaS5wYXJlbnQge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gICAgICAgICAgICAubWFpbi1uYXYgdWwgbGkucGFyZW50IC5zdWItbWVudSB7XG4gICAgICAgICAgICAgIG1pbi13aWR0aDogY2FsYyggMTAwJSArIDRyZW0pO1xuICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICAgICAgICBwYWRkaW5nOiAxcmVtIDJyZW07XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgdG9wOiBjYWxjKCAxMDAlICsgMXJlbSk7XG4gICAgICAgICAgICAgIGxlZnQ6IC0ycmVtO1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzNywgMjM3LCAyMzcsIDAuOTYpO1xuICAgICAgICAgICAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigycHgpO1xuICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDRyZW0gNHJlbSByZ2JhKDExMCwgMTEwLCAxMTAsIDAuMik7IH1cbiAgICAgICAgICAgICAgLm1haW4tbmF2IHVsIGxpLnBhcmVudCAuc3ViLW1lbnU6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGNhbGMoIDEwMCUgLSAycmVtKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IC4xcmVtO1xuICAgICAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICAgICAgICBsZWZ0OiAxcmVtO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlMWUxZTE7IH1cbiAgICAgICAgICAgICAgLm1haW4tbmF2IHVsIGxpLnBhcmVudCAuc3ViLW1lbnUgbGkge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMCAwIC44cmVtOyB9XG4gICAgICAgICAgICAgICAgLm1haW4tbmF2IHVsIGxpLnBhcmVudCAuc3ViLW1lbnUgbGk6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7IH1cbiAgICAgICAgICAubWFpbi1uYXYgdWwgbGkuc2hvdyAuc3ViLW1lbnUge1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7IH1cbiAgICAgICAgICAubWFpbi1uYXYgdWwgbGk6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7IH0gfVxuXG4ubm8tc2Nyb2xsIHtcbiAgb3ZlcmZsb3cteTogaGlkZGVuOyB9XG5cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgSGFtYnVyZ2VyIE1lbnUgVG9nZ2xlXG5cbiovXG4udG9nZ2xlIHtcbiAgd2lkdGg6IDIuNnJlbTtcbiAgaGVpZ2h0OiA0cmVtO1xuICBwYWRkaW5nOiAxLjU1cmVtIDA7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHotaW5kZXg6IDIwO1xuICB0cmFuc2l0aW9uOiA0MDBtczsgfVxuICAudG9nZ2xlIHNwYW4ge1xuICAgIHdpZHRoOiAyLjZyZW07XG4gICAgaGVpZ2h0OiAuMXJlbTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDgwODA4OyB9XG4gIC50b2dnbGUgc3Bhbi5iZWZvcmUge1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAyNTBtcyAzNTBtcyBlYXNlLWluLCBvcGFjaXR5IDBtcyAzNTBtcztcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlOyB9XG4gICAgLnRvZ2dsZSBzcGFuLmJlZm9yZTpudGgtY2hpbGQoMSkge1xuICAgICAgdG9wOiAxLjZyZW07IH1cbiAgICAudG9nZ2xlIHNwYW4uYmVmb3JlOm50aC1jaGlsZCgyKSB7XG4gICAgICBib3R0b206IDEuNnJlbTsgfVxuICAudG9nZ2xlIHNwYW4uYWZ0ZXIge1xuICAgIHRvcDogMnJlbTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDE1MG1zIDIwMG1zIGVhc2Utb3V0LCB2aXNpYmlsaXR5IDBtcyAzNTBtcztcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlOyB9XG4gIC50b2dnbGUudHJhbnNpdGlvbiBzcGFuLmJlZm9yZSB7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDEwMG1zIGVhc2Utb3V0LCBvcGFjaXR5IDBtcyAyMDBtcztcbiAgICBvcGFjaXR5OiAwOyB9XG4gICAgLnRvZ2dsZS50cmFuc2l0aW9uIHNwYW4uYmVmb3JlOm50aC1jaGlsZCgxKSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAwLjRyZW0pOyB9XG4gICAgLnRvZ2dsZS50cmFuc2l0aW9uIHNwYW4uYmVmb3JlOm50aC1jaGlsZCgyKSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMC40cmVtKTsgfVxuICAudG9nZ2xlLnRyYW5zaXRpb24gc3Bhbi5hZnRlciB7XG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTUwbXMgMjAwbXMgZWFzZS1vdXQsIHZpc2liaWxpdHkgMG1zIDIwMG1zOyB9XG4gICAgLnRvZ2dsZS50cmFuc2l0aW9uIHNwYW4uYWZ0ZXI6bnRoLW9mLXR5cGUoMykge1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKDQ1ZGVnKTsgfVxuICAgIC50b2dnbGUudHJhbnNpdGlvbiBzcGFuLmFmdGVyOm50aC1vZi10eXBlKDQpIHtcbiAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTUwbXMgMjAwbXMgZWFzZS1vdXQsIHZpc2liaWxpdHkgMG1zIDIwMG1zO1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKC00NWRlZyk7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gICAgLnRvZ2dsZSB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9IH1cblxuLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBGb3JtXG5cbiovXG4uZm9ybSB7XG4gIG1heC13aWR0aDogNTByZW07XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAuZm9ybSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgZ3JpZC1nYXA6IDJyZW07XG4gICAgICBncmlkLXRlbXBsYXRlOiBcImEgYSBiIGJcIiBhdXRvIFwiYyBjIGMgY1wiIGF1dG8gXCJkIGQgZCBlXCIgYXV0byAvIDFmciAxZnIgMWZyIDFmcjsgfVxuICAgICAgLmZvcm0gLmlucHV0OmZpcnN0LW9mLXR5cGUge1xuICAgICAgICBncmlkLWFyZWE6IGE7IH1cbiAgICAgIC5mb3JtIC5pbnB1dDpudGgtb2YtdHlwZSgyKSB7XG4gICAgICAgIGdyaWQtYXJlYTogYjsgfVxuICAgICAgLmZvcm0gLnRleHRhcmVhIHtcbiAgICAgICAgZ3JpZC1hcmVhOiBjOyB9XG4gICAgICAuZm9ybSAuY2hlY2tib3gge1xuICAgICAgICBncmlkLWFyZWE6IGQ7IH1cbiAgICAgIC5mb3JtIC5zdWJtaXQge1xuICAgICAgICBncmlkLWFyZWE6IGU7IH0gfVxuXG4uc3VibWlzc2lvbiB7XG4gIHdpZHRoOiBjYWxjKCAxMDB2dyAtIDJyZW0pO1xuICBtYXgtd2lkdGg6IDQwcmVtO1xuICBwYWRkaW5nOiAxcmVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGxlZnQ6IDFyZW07XG4gIGJvdHRvbTogMXJlbTtcbiAgei1pbmRleDogOTk5OTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZBRkFGQTtcbiAgY29sb3I6ICMwODA4MDg7XG4gIGJvcmRlci1yYWRpdXM6IC40cmVtO1xuICBib3gtc2hhZG93OiAwIDAgNHJlbSByZ2JhKDgsIDgsIDgsIDAuMik7XG4gIHRyYW5zaXRpb246IDIwMG1zIGN1YmljLWJlemllcigwLjIsIDAuNywgMC41LCAxLjIpO1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoNHJlbSkgc2NhbGUoMC44KTsgfVxuICAuc3VibWlzc2lvbiBzcGFuOmZpcnN0LW9mLXR5cGUge1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZm9udC1zaXplOiAyLjJyZW07XG4gICAgZm9udC13ZWlnaHQ6IDcwMDsgfVxuICAuc3VibWlzc2lvbiBidXR0b24ge1xuICAgIG1hcmdpbjogMDtcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDsgfVxuICAuc3VibWlzc2lvbiBzcGFuOmxhc3Qtb2YtdHlwZSB7XG4gICAgZm9udC1zaXplOiAxLjRyZW07XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyB9XG4gIC5zdWJtaXNzaW9uLnNob3cge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApIHNjYWxlKDEpOyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgLnN1Ym1pc3Npb24ge1xuICAgICAgbGVmdDogNTAlO1xuICAgICAgYm90dG9tOiA1MCU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCBjYWxjKCAtNTAlICsgNHJlbSkpIHNjYWxlKDAuOCk7IH1cbiAgICAgIC5zdWJtaXNzaW9uLnNob3cge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgxKTsgfSB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAgIC5zdWJtaXNzaW9uIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIGJvdHRvbTogNTAlO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgNTAlKSBzY2FsZSgwLjgpOyB9XG4gICAgICAuc3VibWlzc2lvbi5zaG93IHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgNTAlKSBzY2FsZSgxKTsgfSB9XG5cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgSGVybyAtIEFsbCBWYXJpYXRpb25zXG5cbiovXG4uaGVyby1zdGFuZGFyZCwgLmhlcm8tY2Fyb3VzZWwge1xuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luOiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG4gIC5oZXJvLXN0YW5kYXJkIC5iYWNrZ3JvdW5kLCAuaGVyby1jYXJvdXNlbCAuYmFja2dyb3VuZCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB6LWluZGV4OiAwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgb3BhY2l0eTogMTsgfVxuICAgIC5oZXJvLXN0YW5kYXJkIC5iYWNrZ3JvdW5kIGltZywgLmhlcm8tY2Fyb3VzZWwgLmJhY2tncm91bmQgaW1nIHtcbiAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgIG9iamVjdC1wb3NpdGlvbjogNTAlIDUwJTsgfVxuICAuaGVyby1zdGFuZGFyZCAuY29udGVudCwgLmhlcm8tY2Fyb3VzZWwgLmNvbnRlbnQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IGNhbGMoIDUwJSArIDNyZW0pO1xuICAgIGxlZnQ6IDA7XG4gICAgei1pbmRleDogMTAwO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgfVxuICAgIC5oZXJvLXN0YW5kYXJkIC5jb250ZW50IGgxLCAuaGVyby1jYXJvdXNlbCAuY29udGVudCBoMSwgLmhlcm8tc3RhbmRhcmQgLmNvbnRlbnQgcCwgLmhlcm8tY2Fyb3VzZWwgLmNvbnRlbnQgcCB7XG4gICAgICBjb2xvcjogI0ZBRkFGQTsgfVxuICAgIC5oZXJvLXN0YW5kYXJkIC5jb250ZW50IGgxLCAuaGVyby1jYXJvdXNlbCAuY29udGVudCBoMSB7XG4gICAgICBtYXgtd2lkdGg6IDQwcmVtO1xuICAgICAgZm9udC13ZWlnaHQ6IDcwMDsgfVxuICAgIC5oZXJvLXN0YW5kYXJkIC5jb250ZW50IHAsIC5oZXJvLWNhcm91c2VsIC5jb250ZW50IHAge1xuICAgICAgZm9udC1zaXplOiAyLjRyZW07XG4gICAgICBmb250LXdlaWdodDogMzAwOyB9XG4gIC5oZXJvLXN0YW5kYXJkICsgbWFpbiwgLmhlcm8tY2Fyb3VzZWwgKyBtYWluIHtcbiAgICBwYWRkaW5nLXRvcDogMDsgfVxuXG4uaGVyby1zdGFuZGFyZCB7XG4gIGhlaWdodDogNTB2aDsgfVxuXG4uaGVyby1jYXJvdXNlbCB7XG4gIGhlaWdodDogNjd2aDtcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gIC5oZXJvLWNhcm91c2VsIC5zdGFnZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB6LWluZGV4OiA1MDtcbiAgICBvdmVyZmxvdzogaGlkZGVuOyB9XG4gICAgLmhlcm8tY2Fyb3VzZWwgLnN0YWdlIC5wcm9wIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHotaW5kZXg6IDUwO1xuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDgwMG1zIGVhc2UtaW4tb3V0LCBvcGFjaXR5IDYwMG1zIDIwMG1zIGVhc2U7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpOyB9XG4gICAgICAuaGVyby1jYXJvdXNlbCAuc3RhZ2UgLnByb3AgaW1nIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7IH1cbiAgICAgIC5oZXJvLWNhcm91c2VsIC5zdGFnZSAucHJvcC5hY3RpdmUge1xuICAgICAgICB6LWluZGV4OiAxMDA7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7IH1cbiAgLmhlcm8tY2Fyb3VzZWwgLnN0YWdlLW1hcCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWF4LXdpZHRoOiA4MHJlbTtcbiAgICBwYWRkaW5nOiAwIDEuMnJlbTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogNTAlO1xuICAgIGJvdHRvbTogMXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHotaW5kZXg6IDEwMDtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7IH1cbiAgICAuaGVyby1jYXJvdXNlbCAuc3RhZ2UtbWFwIGRpdiB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1heC13aWR0aDogMTJyZW07XG4gICAgICBoZWlnaHQ6IDEuNnJlbTtcbiAgICAgIG1hcmdpbjogMCAuMnJlbTtcbiAgICAgIHBhZGRpbmc6IC42cmVtO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgYm9yZGVyLXJhZGl1czogMXJlbTtcbiAgICAgIHRyYW5zaXRpb246IDMwMG1zOyB9XG4gICAgICAuaGVyby1jYXJvdXNlbCAuc3RhZ2UtbWFwIGRpdiBzcGFuIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogLjRyZW07XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1MCwgMjUwLCAyNTAsIDAuNCk7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IC4ycmVtO1xuICAgICAgICB0cmFuc2l0aW9uOiA0MDBtczsgfVxuICAgICAgLmhlcm8tY2Fyb3VzZWwgLnN0YWdlLW1hcCBkaXYuYWN0aXZlIHNwYW4ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkFGQUZBOyB9XG4gICAgICAuaGVyby1jYXJvdXNlbCAuc3RhZ2UtbWFwIGRpdjpob3ZlciBzcGFuIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0U0NEJCMDsgfVxuICAuaGVyby1jYXJvdXNlbCAub3ZlcmxheSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB6LWluZGV4OiA3NTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMGRlZywgcmdiYSg4LCA4LCA4LCAwLjYpIDAlLCByZ2JhKDgsIDgsIDgsIDAuMykgMTAwJSk7IH1cbiAgLmhlcm8tY2Fyb3VzZWwgLmNvbnRlbnQge1xuICAgIHotaW5kZXg6IDEwMDtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gODAwbXMgZWFzZS1vdXQsIG9wYWNpdHkgNjAwbXMgMjAwbXMgZWFzZTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDUwJTsgfVxuICAgIC5oZXJvLWNhcm91c2VsIC5jb250ZW50LmxvYWQge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgfVxuXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIFBvcHVwXG5cbiovXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIEdhbGxlcnlcblxuKi9cbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gIC5nYWxsZXJ5IHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtZ2FwOiAycmVtO1xuICAgIGdyaWQtdGVtcGxhdGU6IFwiYSBiXCIgYXV0byAvIDFmciAxZnI7IH0gfVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcbiAgLmdhbGxlcnkge1xuICAgIGdyaWQtdGVtcGxhdGU6IFwiYSBiIGMgZFwiIGF1dG8gLyAxZnIgMWZyIDFmciAxZnI7IH0gfVxuXG4uZ2FsbGVyeS1pdGVtIHtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIHBhZGRpbmctdG9wOiA3NSU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0cmFuc2l0aW9uOiAyMDBtcyBlYXNlOyB9XG4gIC5nYWxsZXJ5LWl0ZW06bGFzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwOyB9XG4gIC5nYWxsZXJ5LWl0ZW0gaW1nIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgIG9iamVjdC1wb3NpdGlvbjogNTAlIDUwJTsgfVxuICAuZ2FsbGVyeS1pdGVtOmhvdmVyIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMnJlbSByZ2JhKDgsIDgsIDgsIDAuMik7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAuZ2FsbGVyeS1pdGVtIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7IH0gfVxuXG4uZ2FsbGVyeS12aWV3ZXIge1xuICB3aWR0aDogMTAwdnc7XG4gIGhlaWdodDogMTAwdmg7XG4gIHBhZGRpbmc6IDJyZW0gMDtcbiAgZGlzcGxheTogbm9uZTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiAxMDAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgsIDgsIDgsIDAuOSk7XG4gIHRyYW5zaXRpb246IDIwMG1zO1xuICBvcGFjaXR5OiAwOyB9XG4gIC5nYWxsZXJ5LXZpZXdlciBpbWcge1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xuICAgIHotaW5kZXg6IDEwO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpO1xuICAgIHRyYW5zaXRpb246IDQwMG1zIGN1YmljLWJlemllcigwLjIsIDAuNywgMC41LCAxLjIpOyB9XG4gIC5nYWxsZXJ5LXZpZXdlciBidXR0b24ge1xuICAgIHdpZHRoOiA0LjhyZW07XG4gICAgaGVpZ2h0OiA0LjhyZW07XG4gICAgcGFkZGluZzogMS40cmVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IGNhbGMoIDUwJSAtIDIuNHJlbSk7XG4gICAgei1pbmRleDogMjA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBhcHBlYXJhbmNlOiBub25lOyB9XG4gICAgLmdhbGxlcnktdmlld2VyIGJ1dHRvbiBzdmcge1xuICAgICAgd2lkdGg6IDJyZW07XG4gICAgICBoZWlnaHQ6IDJyZW07XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTQ0QkIwOyB9XG4gICAgLmdhbGxlcnktdmlld2VyIGJ1dHRvbi5wcmV2aW91cyB7XG4gICAgICBsZWZ0OiAwOyB9XG4gICAgLmdhbGxlcnktdmlld2VyIGJ1dHRvbi5uZXh0IHtcbiAgICAgIHJpZ2h0OiAwOyB9XG4gICAgLmdhbGxlcnktdmlld2VyIGJ1dHRvbi5jbG9zZSB7XG4gICAgICB0b3A6IDA7XG4gICAgICByaWdodDogMDsgfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgICAuZ2FsbGVyeS12aWV3ZXIgYnV0dG9uLnByZXZpb3VzIHtcbiAgICAgICAgbGVmdDogMnJlbTsgfVxuICAgICAgLmdhbGxlcnktdmlld2VyIGJ1dHRvbi5uZXh0IHtcbiAgICAgICAgcmlnaHQ6IDJyZW07IH1cbiAgICAgIC5nYWxsZXJ5LXZpZXdlciBidXR0b24uY2xvc2Uge1xuICAgICAgICB0b3A6IDJyZW07XG4gICAgICAgIHJpZ2h0OiAycmVtOyB9IH1cbiAgLmdhbGxlcnktdmlld2VyLnByZSB7XG4gICAgZGlzcGxheTogZmxleDsgfVxuICAuZ2FsbGVyeS12aWV3ZXIuZGlzcGxheSB7XG4gICAgb3BhY2l0eTogMTsgfVxuICAgIC5nYWxsZXJ5LXZpZXdlci5kaXNwbGF5IGltZyB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xuICAgIC5nYWxsZXJ5LXZpZXdlciB7XG4gICAgICBwYWRkaW5nOiA0cmVtOyB9IH1cblxuLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBMaXN0ZWQgSXRlbXMgKFRodW1ibmFpbHMsIFByb2R1Y3RzIGV0Yy4uLilcblxuKi9cbi5saXN0ZWQge1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAubGlzdGVkIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBncmlkLWdhcDogMXJlbTtcbiAgICAgIGdyaWQtdGVtcGxhdGU6IFwiYSAgYlwiIGF1dG8gLyAxZnIgMWZyOyB9IH1cblxuLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBDb29raWUgQ29uc2VudCBQb3B1cFxuXG4qL1xuLnNoaWZ0ci1jb29raWUtbm90aWNlIHtcbiAgd2lkdGg6IGNhbGMoIDEwMHZ3IC0gMnJlbSk7XG4gIG1heC13aWR0aDogNTByZW07XG4gIHBhZGRpbmc6IDJyZW07XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgbGVmdDogMXJlbTtcbiAgYm90dG9tOiAxcmVtO1xuICB6LWluZGV4OiA5OTk5O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzNywgMjM3LCAyMzcsIDAuOTYpO1xuICBib3JkZXI6IC4ycmVtIHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItcmFkaXVzOiAuNHJlbTtcbiAgYm94LXNoYWRvdzogMCAycmVtIDRyZW0gcmdiYSgzNCwgMzQsIDM0LCAwLjQpO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDgwMG1zIDBtcyBlYXNlLW91dCwgdHJhbnNmb3JtIDgwMG1zIDBtcyBlYXNlLWluLW91dCwgYm9yZGVyIDQwMG1zIDBtcyBlYXNlLCBiYWNrZ3JvdW5kLWNvbG9yIDQwMG1zLCBib3gtc2hhZG93IDQwMG1zO1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTAwJSk7IH1cbiAgLnNoaWZ0ci1jb29raWUtbm90aWNlIHAge1xuICAgIG1hcmdpbi1ib3R0b206IDEuNDRyZW07XG4gICAgZm9udC1zaXplOiAxLjZyZW07IH1cbiAgLnNoaWZ0ci1jb29raWUtbm90aWNlLnBvc3RlZCB7XG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7IH1cbiAgLnNoaWZ0ci1jb29raWUtbm90aWNlLmFjY2VwdGVkIHtcbiAgICBib3JkZXItY29sb3I6ICMwNEJGMkY7IH1cbiAgLnNoaWZ0ci1jb29raWUtbm90aWNlOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZGVkO1xuICAgIGJveC1zaGFkb3c6IDAgMnJlbSA2cmVtIHJnYmEoMzQsIDM0LCAzNCwgMC40KTsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xuICAgIC5zaGlmdHItY29va2llLW5vdGljZSB7XG4gICAgICBtYXgtd2lkdGg6IDMwcmVtO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTsgfVxuICAgICAgLnNoaWZ0ci1jb29raWUtbm90aWNlLnBvc3RlZCB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTsgfSB9XG5cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgUGFnZSBOYW1lXG5cbiovXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIFRoZSBibG9nXG5cbiovXG4uYmxvZy1sYXlvdXQgPiBkaXYge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gIC5ibG9nLWxheW91dCA+IGRpdiB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLWdhcDogMnJlbTtcbiAgICBncmlkLXRlbXBsYXRlOiBcIm1haW4gbWFpbiBtYWluIHNpZGVcIiBhdXRvIC8gMWZyICAxZnIgMWZyIDFmcjsgfVxuICAgIC5ibG9nLWxheW91dCA+IGRpdiAuYmxvZy1saXN0IHtcbiAgICAgIGdyaWQtYXJlYTogbWFpbjsgfVxuICAgIC5ibG9nLWxheW91dCA+IGRpdiAuYmxvZy1zaWRlYmFyIHtcbiAgICAgIGdyaWQtYXJlYTogc2lkZTsgfSB9XG5cbi5ibG9nLWxheW91dCBhcnRpY2xlIHAsIC5ibG9nLWxheW91dCBhcnRpY2xlIGgyLCAuYmxvZy1sYXlvdXQgYXJ0aWNsZSBoMywgLmJsb2ctbGF5b3V0IGFydGljbGUgaDQsIC5ibG9nLWxheW91dCBhcnRpY2xlIGg1LCAuYmxvZy1sYXlvdXQgYXJ0aWNsZSBoNiB7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IDA7IH1cblxuLmJsb2ctbGF5b3V0IGFydGljbGUgaW1nIHtcbiAgbWFyZ2luLWJvdHRvbTogMi44OHJlbTsgfVxuXG4uYmxvZy1saXN0IC5zaW5nbGUge1xuICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICBwYWRkaW5nOiAycmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZGVkO1xuICBib3JkZXItcmFkaXVzOiAuNHJlbTsgfVxuICAuYmxvZy1saXN0IC5zaW5nbGUgLmltYWdlIHtcbiAgICBtYXgtaGVpZ2h0OiAyMHJlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJvcmRlci1yYWRpdXM6IC40cmVtOyB9XG4gICAgLmJsb2ctbGlzdCAuc2luZ2xlIC5pbWFnZSBpbWcge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgIG9iamVjdC1wb3NpdGlvbjogNTAlIDUwJTsgfVxuICAuYmxvZy1saXN0IC5zaW5nbGUgaDMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgb2JqZWN0LWZpdDogY292ZXI7IH1cbiAgLmJsb2ctbGlzdCAuc2luZ2xlIC5kZXRhaWxzIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47IH1cbiAgICAuYmxvZy1saXN0IC5zaW5nbGUgLmRldGFpbHMgc3Bhbi5kYXRlIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuICAuYmxvZy1saXN0IC5zaW5nbGU6bGFzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwOyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgLmJsb2ctbGlzdCAuc2luZ2xlIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBncmlkLWdhcDogMnJlbTtcbiAgICAgIGdyaWQtdGVtcGxhdGU6IFwiaW1hZ2UgZGV0YWlscyBkZXRhaWxzXCIgYXV0byAvIDFmciAxZnIgMWZyOyB9XG4gICAgICAuYmxvZy1saXN0IC5zaW5nbGUgLmltYWdlIHtcbiAgICAgICAgZ3JpZC1hcmVhOiBpbWFnZTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfVxuICAgICAgLmJsb2ctbGlzdCAuc2luZ2xlIC5kZXRhaWxzIHtcbiAgICAgICAgZ3JpZC1hcmVhOiBkZXRhaWxzO1xuICAgICAgICBkaXNwbGF5OiBibG9jazsgfSB9XG5cbi5ibG9nLXNpZGViYXIge1xuICBkaXNwbGF5OiBub25lOyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAgIC5ibG9nLXNpZGViYXIge1xuICAgICAgcGFkZGluZzogMnJlbTtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZGVkZWQ7XG4gICAgICBib3JkZXItcmFkaXVzOiAuNHJlbTtcbiAgICAgIHRyYW5zaXRpb246IGJveC1zaGFkb3cgMjAwbXMgZWFzZTsgfVxuICAgICAgLmJsb2ctc2lkZWJhciAud2lkZ2V0IHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMi44OHJlbTsgfVxuICAgICAgICAuYmxvZy1zaWRlYmFyIC53aWRnZXQ6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwOyB9XG4gICAgICAuYmxvZy1zaWRlYmFyIGg0IHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgY29sb3I6ICM0NDRCQjA7IH1cbiAgICAgIC5ibG9nLXNpZGViYXIgdWwge1xuICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMDsgfVxuICAgICAgLmJsb2ctc2lkZWJhciBsaSBhOjphZnRlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwODA4MDg7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGVYKDApOyB9XG4gICAgICAuYmxvZy1zaWRlYmFyIGxpIGE6aG92ZXIge1xuICAgICAgICBjb2xvcjogI0U0NEJCMDsgfVxuICAgICAgICAuYmxvZy1zaWRlYmFyIGxpIGE6aG92ZXI6OmFmdGVyIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlWCgxKTsgfVxuICAgICAgLmJsb2ctc2lkZWJhciAuc2VhcmNoIGlucHV0IHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZBRkFGQTsgfVxuICAgICAgLmJsb2ctc2lkZWJhci5zdGlja3kge1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAycmVtIHJnYmEoMzQsIDM0LCAzNCwgMC4yKTsgfVxuICAgICAgLmJsb2ctc2lkZWJhci5wYXVzZSB7XG4gICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kOyB9IH1cblxuLnNlYXJjaGVkIHtcbiAgY29sb3I6ICNGQUZBRkE7IH1cblxuYm9keS5zaW5nbGUucG9zdCBhcnRpY2xlIHtcbiAgbWF4LXdpZHRoOiA2OC40cmVtO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvOyB9XG5cbi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgQWNjZXNzaWJpbGl0eVxuXG4qL1xuQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSksICh1cGRhdGU6IHNsb3cpIHtcbiAgKiB7XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAuMDAxbXMgIWltcG9ydGFudDtcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxICFpbXBvcnRhbnQ7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogLjAwMW1zICFpbXBvcnRhbnQ7IH0gfVxuXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIEZpeGVyXG5cbiovXG4vKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIERldiBUb29sc1xuXG4qL1xuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBTZXR0aW5nc1xuXG4qL1xuXG5cblxuXG4vLyAgLy8vLyAgLS18ICAgIEJyZWFrcG9pbnRzXG5cblxuJGJyZWFrcG9pbnRzOiAoIFxuXHRzOiBcdFx0NDUwcHgsXG5cdG06IFx0XHQ3NjhweCxcblx0bDogXHRcdDEwMjRweCxcblx0eGw6IFx0MTYwMHB4LFxuXHRtYXg6IFx0MTkyMHB4XG4pO1xuXG5cblxuXG4vLyAgLy8vLyAgLS18ICAgIENPTlRBSU5FUlxuXG5cbiRjb250YWluZXItd2lkdGg6IDEyNDtcblxuXG5cblxuXG4vLyAgLy8vLyAgLS18ICAgIFRZUE9HUkFQSFlcblxuXG4kYmFzZS1mb250LXNpemU6IFx0MS44OyAvLyBVbml0IGFzIHJlbVxuJGJhc2UtbGluZS1oZWlnaHQ6XHQxLjY7XG5cbiRiYXNlLWZvbnQtZmFtaWx5OiBcdFx0J051bml0bycsIHNhbnMtc2VyaWY7XG4kaGVhZGluZy1mb250LWZhbWlseTogXHQnTnVuaXRvJywgc2Fucy1zZXJpZjtcblxuJGJhc2VsaW5lOiBcdFx0XHQoICggJGJhc2UtZm9udC1zaXplICogMTAgKSAqICRiYXNlLWxpbmUtaGVpZ2h0ICk7XG5cbiRtYXgtbGluZS13aWR0aDogJGJhc2UtZm9udC1zaXplICogMzg7XG5cblxuXG5cbi8vICAvLy8vICAtLXwgICAgQ09MT1JTXG5cblxuLy8gIExpZ2h0c1xuJHdoaXRlOiAgICAgI0ZBRkFGQTtcbiRsLWdyZXk6XHRkYXJrZW4oICR3aGl0ZSwgNSUgKTtcblxuLy8gIERhcmtzXG4kYmxhY2s6ICAgICAjMDgwODA4O1xuJGQtZ3JleTpcdGxpZ2h0ZW4oICRibGFjaywgMTAlICk7XG5cbi8vIFByaW1hcnlcbiRwcmltYXJ5OiAgICNFNDRCQjA7XG5cbi8vIFNlY29uZGFyeVxuJHNlY29uZGFyeTogIzQ0NEJCMDtcblxuLy8gQWRkaXRpb25hbFxuJGJsZW5kOlx0XHRtaXgoICRwcmltYXJ5LCAkc2Vjb25kYXJ5ICk7XG5cbi8vIFV0aWxpdGllc1xuJGJsdWU6ICAgXHQjMTYzRjZDO1xuJGdyZWVuOlx0XHQjMDRCRjJGO1xuJHJlZDpcdFx0I0UzMDYxNztcblxuXG5cblxuLy8gIC8vLy8gIC0tfCAgICBaLUlOREVYIENBVEVMT0dVRVxuXG5cbi8vICBUT1AgTEVWRUxcbiR6LWhlYWRlcjogICAgICA4MDtcbiR6LW1haW46XHQgICAgNjA7XG4kei1mb290ZXI6ICAgICAgNDA7XG5cblxuLy8gIEhFQURFUiBMRVZFTFxuJHotbmF2OiAgICAgICAgIDEwO1xuJHotaGFtYnVyZ2VyOiAgIDIwO1xuXG5cbi8vICBNQUlOIExFVkVMXG4kei1zYW1wbGU6ICAgICAgMTA7XG5cblxuLy8gIEZPT1RFUiBMRVZFTFxuJHotc2FtcGxlOiAgICAgIDEwO1xuXG5cblxuXG4vLyAgLy8vLyAgLS18ICAgIE1JU0NcblxuXG4vLyAgQmFzZSBIb3ZlciBUaW1pbmdcbiRkdXJhdGlvbjogMzAwbXM7XG5cbiIsIi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgUGxhY2Vob2xkZXJzXG5cbiovXG5cblxuXG5cbi8vICBUSEUgQ0xFQVJGSVhcbiVjbGVhcmZpeDo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgIGNsZWFyOiBib3RoO1xufVxuXG5cbi8vXHRTSEFET1dTXG4ldC1zaGFkb3cge1xuXHR0ZXh0LXNoYWRvdzogMCAwIDEuOHJlbSByZ2JhKCBsaWdodGVuKCAkYmxhY2ssIDQwJSApLCAuOCApO1xufVxuXG4lYi1zaGFkb3cge1xuXHRib3gtc2hhZG93OiAwIDAgMS44cmVtIHJnYmEoIGxpZ2h0ZW4oICRibGFjaywgNDAlICksIC40ICk7XG59XG5cbiIsIi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgRnVuY3Rpb25zXG5cbiovXG5cblxuXG5cbi8vIFJldHVybiB1bml0IGFzIHJlbSB2YWx1ZVxuQGZ1bmN0aW9uIHJlbSggJHVuaXQgKSB7XG5cdEByZXR1cm4gI3skdW5pdH1yZW07XG59XG5cblxuLy8gIEdldCBtYXggbGluZSB3aWR0aFxuQGZ1bmN0aW9uIGxpbmVfd2lkdGgoICRzaXplOiAkYmFzZS1mb250LXNpemUgKSB7XG5cdEByZXR1cm4gcmVtKCAkc2l6ZSAqIDM4ICk7XG59XG5cblxuLy8gR2V0IGJhc2VsaW5lIGFzIHJlbVxuQGZ1bmN0aW9uIGdldF9iYXNlbGluZSggJHNpemU6IDEwICkge1xuXHRAcmV0dXJuIHJlbSggJGJhc2VsaW5lIC8gJHNpemUgKTtcbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBNaXhpbnNcblxuKi9cblxuXG5cblxuLy8gIE1FRElBIFFVRVJJRVNcbkBtaXhpbiB4KCAkc2l6ZSApIHtcblxuICAgIEBtZWRpYSBzY3JlZW4gYW5kICggbWluLXdpZHRoOiAje21hcC1nZXQoICRicmVha3BvaW50cywgJHNpemUgKX0gKSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbn1cblxuQG1peGluIHkoICApIHtcblxuICAgIEBtZWRpYSBzY3JlZW4gYW5kICggb3JpZW50YXRpb246IGxhbmRzY2FwZSApIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgfVxufVxuXG5cbi8vIFJFU1BPTlNJVkUgUkFUSU9cbkBtaXhpbiByYXRpbyggJHgsICR5ICkge1xuICAgIHBhZGRpbmctdG9wOiB1bnF1b3RlKCAoICR5IC8gJHggKSAqIDEwMCArICclJyApO1xufVxuXG5cbi8vICBUUlVOQ0FURVxuQG1peGluIHRydW5jYXRlKCAkb3ZlcmZsb3c6IGVsbGlwc2lzICkge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiAkb3ZlcmZsb3c7XG59XG5cblxuLy8gIFBTRVVET1xuQG1peGluIHBzZXVkbyggJHBvc2l0aW9uOiBhYnNvbHV0ZSwgJGNvbnRlbnQ6ICcnICkge1xuICAgIGNvbnRlbnQ6ICRjb250ZW50O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiAkcG9zaXRpb247XG59XG5cbkBtaXhpbiBiZWZvcmUoICRwb3NpdGlvbjogYWJzb2x1dGUsICRjb250ZW50OiAnJyApIHtcblxuICAgICY6OmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICRjb250ZW50O1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246ICRwb3NpdGlvbjtcblxuICAgICAgICBAY29udGVudDtcbiAgICB9XG59XG5cbkBtaXhpbiBhZnRlciggJHBvc2l0aW9uOiBhYnNvbHV0ZSwgJGNvbnRlbnQ6ICcnICkge1xuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiAkY29udGVudDtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiAkcG9zaXRpb247XG5cbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgfVxufVxuXG5cbkBtaXhpbiBvYmplY3QtZml0KCAkeDogNTAlLCAkeTogNTAlICkge1xuXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuXG4gICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgb2JqZWN0LXBvc2l0aW9uOiAkeCAkeTtcbn1cblxuXG5cbi8vIExhc3QgQ2hpbGQgYm90dG9tIHN0eWxpbmcgcmVtb3ZhbFxuQG1peGluIGxhc3RfY2hpbGQoICRwYWRkaW5nOiBmYWxzZSApIHtcbiAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgIFxuICAgICAgICBAaWYgJHBhZGRpbmcgPT0gZmFsc2Uge1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcblxuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBHcmlkICYgTGF5b3V0c1xuXG4qL1xuXG5cblxuXG4vLyAgLy8vLyAgLS18ICAgIEdSSUQgTUlYSU5cblxuJGNvbHVtbnM6IDEyO1xuXG5AbWl4aW4gY29sKCAkdmFsdWUsICRpbmNsdWRlOiB0cnVlICkge1xuXG4gICAgJHZhbHVlOiAkY29sdW1ucyAvICR2YWx1ZTtcblxuICAgIHdpZHRoOiBwZXJjZW50YWdlKCAxIC8gJHZhbHVlICkgLSAxOyAvLyBBZGQgZ3V0dGVyIGhlcmUgaWYgbWFyZ2luIGlzIHVzZWRcblxuICAgIC8vXHRBdm9pZCByZXBldGl0aW9uIGlmIGVsZW1lbnQgaGFzIG11bHRpcGxlIGNvbHVtbiBzaXplc1xuICAgIEBpZiAoICRpbmNsdWRlICkge1xuXHQgICAgbWFyZ2luLXJpZ2h0OiAxJTtcbiAgICB9XG59XG5cblxuXG5AbWl4aW4gZ3JpZCggJGdhcDogMXJlbSApIHtcblxuXHRkaXNwbGF5OiBncmlkO1xuXHRncmlkLWdhcDogJGdhcDtcbn1cblxuXG5AbWl4aW4gY29scyggJGNvbHMgKSB7XG5cdGdyaWQtdGVtcGxhdGUtY29sdW1uczogJGNvbHM7XG59XG5cblxuQG1peGluIHJvd3MoICRyb3dzICkge1xuXHRncmlkLXRlbXBsYXRlLXJvd3M6ICRyb3dzO1xufVxuXG4iLCIvKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIEZlYXR1cmVzXG5cbiovXG5cblxuXG5cbi8vIFRoaXMgZmlsZSBpcyB0aGUgaG9tZSBmb3IgY3VzdG9tIGZlYXR1cmVzIG9mIGEgcHJvamVjdFxuLy8gdGhhdCBhcmUgdXNlZCB3aXRoaW4gbXVsdGlwbGUgZm91bmRhdGlvbnMgb3IgY29tcG9uZW50cy5cblxuXG5cblxuLy8gIC0tfCAgICBJbWFnZSBTd2l0Y2ggSG92ZXJcblxuLy8gV2hlbiB1c2luZyB0aGlzIGVmZmVjdCwgbmVzdCB0aGUgdHdvIDxpbWc+IGluc2lkZSBhIGRpdixcbi8vIHdoaWNoIG11c3QgYmUgcG9zaXRpb25lZCByZWxhdGl2ZSBvciBhYnNvbHV0ZS5cblxuLy8gVGhlIGRlZmF1bHQgaW1hZ2Ugc2hvdWxkIGhhdmUgLnRvcCBhcHBsaWVkLCB3aXRoIHRoZSBvdGhlciAuYm90dG9tXG4vLyBhcHBsaWVkLlxuXG4laW1nLXBvcyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuXHR0b3A6IDA7IGxlZnQ6IDA7XG59XG5cbi50b3AgeyBcblx0QGV4dGVuZCAlaW1nLXBvczsgXG5cblx0ei1pbmRleDogMjtcblx0dHJhbnNpdGlvbjogJGR1cmF0aW9uO1xuXG5cdCY6aG92ZXIge1xuXHRcdG9wYWNpdHk6IDA7XG5cdH1cbn1cblxuLmJvdHRvbSB7IFxuXHRAZXh0ZW5kICVpbWctcG9zO1xuXG5cdHotaW5kZXg6IDE7XG59XG5cbiIsIi8qXG5cblx0Ly8gIC8vLy8gLS18ICAgIENvcmVcblxuKi9cblxuXG5cblxuLy8gIC0tfCAgICBSRVNFVFRFUlNcblxuKiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3ggfVxuXG5pbWcsIHZpZGVvIHsgXG5cdG1heC13aWR0aDogMTAwJTsgXG5cdGhlaWdodDogYXV0bzsgXG5cdGRpc3BsYXk6IGJsb2NrOyBcbn1cblxuXG4vLyAgLS18ICAgIFNFTEVDVElPTlxuXG4qOjpzZWxlY3Rpb24ge1xuXHRjb2xvcjogJHdoaXRlO1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkc2Vjb25kYXJ5O1xuXHR0ZXh0LXNoYWRvdzogbm9uZTtcbn1cblxuXG4vLyAgLS18ICAgIEJPRFkgQkFTRSBTVFlMSU5HXG5cbmJvZHkge1xuXHR3aWR0aDogMTAwJTtcblx0bWF4LXdpZHRoOiAxMDAlO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdG92ZXJmbG93LXg6IGhpZGRlbjtcblxuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XG59XG5cblxuLy8gIC0tfCAgICBNQUlOIENPTlRFTlQgQ09OVEFJTkVSXG5cbi8vIFRoaXMgdmFsdWUgc2V0cyB0aGUgc2l0ZSBnbG9iYWwgY29udGFpbmVyIHdpZHRoLFxuLy8gYWZmZWN0aW5nIHRoZSBoZWFkZXIsIG1haW4gYW5kIGZvb3RlciBjb250ZW50XG5cblxuXG4lY29udGFpbmVyIHtcblx0d2lkdGg6IDEwMCU7XG5cdHBhZGRpbmctbGVmdDogMXJlbTtcblx0cGFkZGluZy1yaWdodDogMXJlbTtcblxuXHQmID4gZGl2IHtcblx0XHRtYXgtd2lkdGg6IHJlbSggJGNvbnRhaW5lci13aWR0aCApO1xuXHRcdG1hcmdpbjogMCBhdXRvO1xuXHR9XG5cdFxuXHRAaW5jbHVkZSB4KCBtICkge1xuXHRcdHBhZGRpbmctbGVmdDogMnJlbTtcblx0XHRwYWRkaW5nLXJpZ2h0OiAycmVtO1xuXHR9XG59XG5cblxubWFpbiB7XG5cdG1pbi1oZWlnaHQ6IGNhbGMoIDEwMHZoIC0gNXJlbSApO1xuXHRwYWRkaW5nLXRvcDogMTJyZW07XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XG59XG5cblxuc2VjdGlvbiB7XG5cdFxuXHQvLyBTZWN0aW9ucyBjb250YWluZWQgdG8gbGF5b3V0IHdpZHRoXG5cdCYuY29udGFpbiB7XG5cdFx0QGV4dGVuZCAlY29udGFpbmVyO1xuXG5cdFx0cGFkZGluZy10b3A6IDRyZW07XG5cdFx0cGFkZGluZy1ib3R0b206IDRyZW07XG5cdH1cblxuXHQvLyBTZWN0aW9ucyB3aXRoIG5vIHdpZHRoIHJlc3RyaWN0aW9uXG5cdCYuZnJlZSB7XG5cdFx0cGFkZGluZzogNHJlbSAxcmVtO1xuXG5cdFx0QGluY2x1ZGUgeCggbSApIHtcblx0XHRcdHBhZGRpbmc6IDRyZW0gMnJlbTtcblx0XHR9XG5cdH1cblxuXHQmLmdyZXkge1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICRsLWdyZXk7XG5cdH1cblxuXHQmLmdyYWRpZW50IHtcblx0XHRwYWRkaW5nLXRvcDogOHJlbTtcblx0XHRwYWRkaW5nLWJvdHRvbTogOHJlbTtcblxuXHRcdGJhY2tncm91bmQ6ICRibGVuZDtcblx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoIDEzNWRlZywgJHByaW1hcnkgMCUsICRzZWNvbmRhcnkgMTAwJSApO1xuXG5cdFx0Y29sb3I6ICR3aGl0ZTtcblxuXHRcdGgyIHtcblx0XHRcdGNvbG9yOiAkd2hpdGU7XG5cdFx0fVxuXG5cdH1cbn1cdFxuXG4iLCIvKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIEhlYWRlclxuXG4qL1xuXG5cblxuXG4vLyAgLy8vLyAgLS18ICAgIEJBU0VcblxuXG4uaGVhZGVyLXByaW1hcnkge1xuXHR3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDZyZW07XG4gICAgcGFkZGluZzogMXJlbTtcbiAgICBcblx0cG9zaXRpb246IGZpeGVkO1xuICAgIHotaW5kZXg6IDk5OTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSggZGFya2VuKCAkd2hpdGUsIDUlICksIC45NiApO1xuICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKCAycHggKTtcblxuICAgIGJveC1zaGFkb3c6IDAgMCA4cmVtIHJnYmEoIGxpZ2h0ZW4oICRibGFjaywgNDAlICksIC40ICk7XG5cbiAgICAubG9nbyB7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuXG4gICAgICAgIHN2ZyB7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGV4dGVuZCAlY29udGFpbmVyO1xuXG4gICAgJiA+IGRpdiB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAgICAgJiA+IGRpdjpub3QoLnRvZ2dsZSkge1xuXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgXG4gICAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNHJlbTtcblxuICAgICAgICAgICAgICAgIGNvbG9yOiAkYmxlbmQ7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAycmVtO1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cmFuc2l0aW9uOiA0MDBtcyBjdWJpYy1iZXppZXIoIC4yLCAuNywgLjUsIDEuMSApO1xuXG4gICAgJi5zbGlkZXIge1xuICAgICAgICBoZWlnaHQ6IDI2LjJyZW07XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgeCggbSApIHtcbiAgICAgICAgcGFkZGluZzogMXJlbSAycmVtO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIHgoIGwgKSB7XG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuXG4gICAgICAgIC5sb2dvIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBGb290ZXJcblxuKi9cblxuXG5cblxuLy8gIC8vLy8gIC0tfCAgICBCQVNFXG5cblxuZm9vdGVyIHtcbiAgICBAZXh0ZW5kICVjb250YWluZXI7XG4gICAgXG5cdG1hcmdpbjogMCBhdXRvO1xuICAgIHBhZGRpbmc6IDRyZW0gMXJlbTtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXG5cdGJhY2tncm91bmQtY29sb3I6ICRsLWdyZXk7XG5cbiAgICBcbiAgICBwIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgIH1cblxuICAgIFxuICAgIC5mb290ZXItaW5mbyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG5cblxuICAgIC8vIFR5cGljYWxseSByZXNlcnZlZCBmb3IgXG4gICAgc21hbGwuY3JlYXRvciB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgXG4gICAgICAgIGNvbG9yOiAkYmxhY2s7XG5cbiAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAkYmFzZS1saW5lLWhlaWdodDtcbiAgICB9XG5cbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBUeXBvZ3JhcGh5XG5cbiovXG5cblxuXG5cbi8vXHRDT1JFIFJFU0VUIE9OIENPTU1PTiBFTEVNRU5UU1xucCwgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7IG1hcmdpbjogMDsgcGFkZGluZzogMDsgYm9yZGVyOiAwIH1cblxuXG5cblxuLy8gIC8vLy8gIC0tfCAgICBCQVNFIFNUWUxJTkdcblxuXG5odG1sIHtcbiAgICBmb250LXNpemU6IDYyLjUlOyAvLyBUaGlzIGNhdXNlcyAxcmVtIHRvIGVxdWFsIDEwcHhcbn1cblxuYm9keSwgaW5wdXQsIHRleHRhcmVhLCBidXR0b24ge1xuXHRmb250LWZhbWlseTogJGJhc2UtZm9udC1mYW1pbHk7XG5cdGZvbnQtc2l6ZTogcmVtKCAkYmFzZS1mb250LXNpemUgKTtcblx0Zm9udC13ZWlnaHQ6IDQwMDtcblx0Zm9udC1zdHlsZTogbm9ybWFsO1xuXG5cdGNvbG9yOiAkZC1ncmV5OyBcblxuXHQvLyBcdEl0J3MgdHlwaWNhbGx5IGJldHRlciBmb3IgYm9keSB0ZXh0IHRvIGJlIHN1YnRseSBsaWdodGVyXG5cdC8vXHR0aGFuIGhlYWRpbmdzLCB2YWx1ZSBoZXJlIGlzIDEwJSBsaWdodGVyIHRoYW4gYmFzZSBjb2xvdXJcbn1cblxucCB7XG5cdG1heC13aWR0aDogbGluZV93aWR0aCgpO1xuXHRtYXJnaW4tYm90dG9tOiBnZXRfYmFzZWxpbmUoKTtcblxuXHRsaW5lLWhlaWdodDogJGJhc2UtbGluZS1oZWlnaHQ7XG5cdHRleHQtYWxpZ246IGxlZnQ7XG5cblx0JjpsYXN0LWNoaWxkIHtcblx0XHRtYXJnaW4tYm90dG9tOiAwO1xuXHR9XG59XG5cblxuXG5cbi8vICAvLy8vICAtLXwgICAgSEVBRElOR1NcblxuXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcblxuXHRmb250LWZhbWlseTogJGhlYWRpbmctZm9udC1mYW1pbHk7XG5cdGZvbnQtd2VpZ2h0OiA3MDA7XG5cblx0dGV4dC1hbGlnbjogbGVmdDtcblx0dGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG5cdGxpbmUtaGVpZ2h0OiAxLjU7XG5cblx0Y29sb3I6ICRibGFjaztcbn1cblxuYXJ0aWNsZSB7XG5cblx0aDIge1xuXHRcdG1hcmdpbi1ib3R0b206IGdldF9iYXNlbGluZSggMjAgKTtcblx0fVxuXG5cdGgzIHtcblx0XHRtYXJnaW4tYm90dG9tOiBnZXRfYmFzZWxpbmUoIDIwICk7XG5cdH1cbn1cblxuXG4vLyAgLS18ICAgIFNFVFRJTkdTXG5cbi8vIFx0Rm9udCBzaXplcyB+IHVuaXQgc2hvdWxkIGJlIGV4Y2x1ZGVkXG5cbiRoZWFkZXJzOiBcdCdoMScgNCxcblx0XHRcdCdoMicgMy4yLFxuXHRcdFx0J2gzJyAyLjYsXG5cdFx0XHQnaDQnIDIuMixcblx0XHRcdCdoNScgMS44LFxuXHRcdFx0J2g2JyAxLjQ7XG5cblxuQGVhY2ggJGhlYWRpbmcgaW4gJGhlYWRlcnMge1xuXG5cdCN7IG50aCggJGhlYWRpbmcsIDEgKSB9IHtcblx0XHRmb250LXNpemU6ICN7IG50aCggJGhlYWRpbmcsIDIgKSB9cmVtO1xuXG5cdFx0bWF4LXdpZHRoOiBsaW5lX3dpZHRoKCk7XG5cdH1cbn1cblxuXG5cblxuLy8gIC8vLy8gIC0tfCAgICBBTkNIT1IgLyBMSU5LU1xuXG5hIHtcblx0Y29sb3I6ICRwcmltYXJ5O1xuXHRsaW5lLWhlaWdodDogJGJhc2UtbGluZS1oZWlnaHQ7XG5cdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuXHR0cmFuc2l0aW9uOiAkZHVyYXRpb247XG5cblx0Jjpob3ZlciB7XG5cdFx0Y29sb3I6ICRzZWNvbmRhcnk7XG5cdH1cbn1cblxuLy9cdElmIDxwPiBmb2xsb3dzIDxhPiB0aGVuIGFkZCBtYXJnaW4tdG9wXG4vL1x0dG8gdGhlIDxwPiB0YWdcbmEgKyBwIHtcblx0bWFyZ2luLXRvcDogZ2V0X2Jhc2VsaW5lKCk7XG59XG5cbnAgPiBhLCBsaTpub3QoLm1lbnUtaXRlbSkgPiBhLCBzbWFsbCA+IGEsIC5saW5rIHtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0Y29sb3I6IGluaGVyaXQ7XG5cdGZvbnQtd2VpZ2h0OiA3MDA7XG5cblx0Jjo6YWZ0ZXIge1xuXHRcdEBpbmNsdWRlIHBzZXVkbyggYWJzb2x1dGUgKTtcblxuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogLjFyZW07XG5cblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeTtcblxuXHRcdHRyYW5zaXRpb246ICRkdXJhdGlvbjtcblxuXHRcdHRyYW5zZm9ybTogc2NhbGVYKCAxICk7XG5cdH1cblxuXHQmOmhvdmVyIHtcblx0XHRjb2xvcjogJHByaW1hcnk7XG5cblx0XHQmOjphZnRlciB7XG5cdFx0XHR0cmFuc2Zvcm06IHNjYWxlWCggMCApO1xuXHRcdH1cblx0fVxufVxuXG5cblxuXG4vLyAgLy8vLyAgLS18ICAgIEJMT0NLUVVPVEVcblxuJGJsb2NrcXVvdGVzOiBmYWxzZTtcblxuQGlmICggJGJsb2NrcXVvdGVzICkge1xuXG5cdGJsb2NrcXVvdGUge1xuXHRcdG1heC13aWR0aDogbGluZV93aWR0aCgpO1xuXG5cdFx0bWFyZ2luOiAwIGF1dG8gMi40cmVtIGF1dG87XG5cdFx0cGFkZGluZzogMC43cmVtIDByZW0gMS43cmVtIDRyZW07XG5cdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXG5cdFx0Zm9udC1zaXplOiAyLjhyZW07XG5cdFx0Zm9udC1zdHlsZTogaXRhbGljO1xuXHRcdGxpbmUtaGVpZ2h0OiAxLjU7XG5cblx0XHQkY2FwdGlvbjogdHJ1ZTtcblxuXHRcdEBpZiAoICRjYXB0aW9uICkge1xuXG5cdFx0XHRzcGFuIHtcblx0XHRcdFx0bWFyZ2luLXRvcDogMC45cmVtO1xuXHRcdFx0XHRwYWRkaW5nLXRvcDogMC41cmVtO1xuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogMC45cmVtO1xuXHRcdFx0XHRkaXNwbGF5OiBibG9jaztcblxuXHRcdFx0XHRib3JkZXItdG9wOiAwLjFyZW0gc29saWQgJHByaW1hcnk7XG5cblx0XHRcdFx0Zm9udC1zaXplOiAxLjZyZW07XG5cdFx0XHRcdGZvbnQtc3R5bGU6IG5vcm1hbDtcblx0XHRcdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHRcdFx0bGluZS1oZWlnaHQ6IDEuNTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHRcdC8vIFF1b3RhdGlvbiBtYXJrXG5cdFx0Jjo6YmVmb3JlIHtcblx0XHRcdGNvbnRlbnQ6IFwiXFwyMDFDXCI7IFxuXG5cdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHR0b3A6IDEuOHJlbTtcblx0XHRcdGxlZnQ6IDAuNnJlbTtcblxuXHRcdFx0Y29sb3I6ICRwcmltYXJ5O1xuXHRcdFx0Zm9udC1zaXplOiA1LjZyZW07XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHR9XG5cdH1cbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBMaXN0cyAtIE9yZGVyZWQgJiBVbm9yZGVyZWRcblxuKi9cblxuXG5cblxuLy9cdElmIHlvdSdyZSBsb29raW5nIHRvIGluY3JlYXNlIHRoZSBzcGFjZSBiZXR3ZWVuXG4vL1x0dGhlIGJ1bGxldCBhbmQgdGV4dCwgcGxhY2UgdGV4dCBpbnNpZGUgc3BhblxuLy9cdHBvc2l0aW9uZWQgcmVsYXRpdmUgdG8gdGhlIGxpIHRoZW4gdXNlXG4vL1x0cGFkZGluZy1sZWZ0IG9uIHRoZSBzcGFuLlxuXG5cbnVsLCBvbCB7XG5cdG1hcmdpbi10b3A6IDA7XG5cdG1hcmdpbi1ib3R0b206IDIuNHJlbTtcblx0cGFkZGluZy1sZWZ0OiAwLjRyZW07XG5cblx0bGluZS1oZWlnaHQ6IDEuNTtcblxuXHRsaSB7XG5cdFx0Ly8gU3BhY2Ugb3V0IGJ5IGhhbGYgYSBsaW5lIGhlaWdodFxuXHRcdG1hcmdpbi1ib3R0b206IGdldF9iYXNlbGluZSggMjAgKTtcblxuXHRcdCY6bGFzdC1vZi10eXBlIHtcblx0XHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdFx0fVxuXHR9XG59XG5cbnVsIHtcblx0bGlzdC1zdHlsZTogY2lyY2xlIG91dHNpZGU7XG5cblx0cGFkZGluZy1sZWZ0OiAycmVtO1xufVxuXG5vbCB7XG5cdGxpc3Qtc3R5bGU6IGRlY2ltYWwgaW5zaWRlO1xufVxuXG4vLyBTdXBwb3J0IGZvciBuZXN0ZWQgbGlzdHMgKG9ubHkgMSBsZXZlbClcbnVsIHVsLCB1bCBvbCwgb2wgb2wsIG9sIHVsIHtcblx0bWFyZ2luLWJvdHRvbTogMDtcblx0cGFkZGluZy1sZWZ0OiAzcmVtO1xufVxuXG4iLCIvKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIEJ1dHRvbnNcblxuKi9cblxuXG5cblxuJWJ1dHRvbiB7XG5cdG1hcmdpbjogMDtcblx0cGFkZGluZzogMC42cmVtIDJyZW07XG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblxuXHRib3JkZXI6IDAuMXJlbSBzb2xpZCB0cmFuc3BhcmVudDtcblx0Ym9yZGVyLXJhZGl1czogMC40cmVtO1xuXG5cdGZvbnQtc2l6ZTogMS40cmVtO1xuXHRsaW5lLWhlaWdodDogMS41O1xuXG5cdGZvbnQtd2VpZ2h0OiA3MDA7XG5cdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdGxldHRlci1zcGFjaW5nOiAuMXJlbTtcblxuXHR0cmFuc2l0aW9uOiAkZHVyYXRpb247XG5cdGN1cnNvcjogcG9pbnRlcjtcbn1cblxuXG4vLyBVc2UgLmJ1dHRvbiB3aGVuIHlvdSB3YW50IGFuIGFuY2hvciB0byBoYXZlXG4vLyBidXR0b24gc3R5bGluZy5cblxuLmJ1dHRvbixcbmJ1dHRvbixcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwiYnV0dG9uXCJdIHtcblx0XG5cdEBleHRlbmQgJWJ1dHRvbjtcblxuXHRjb2xvcjogJHdoaXRlO1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkc2Vjb25kYXJ5O1xuXG5cdCY6aG92ZXIge1xuXHRcdGNvbG9yOiAkd2hpdGU7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnk7XG5cdH1cbn1cblxuXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcblx0bWFyZ2luOiAwO1xuXG5cdCYuc3VibWl0dGluZyB7XG5cdFx0YW5pbWF0aW9uOiBwdWxzaW5nIDJzIGluZmluaXRlIGZvcndhcmRzO1xuXHR9XG59XG5cbkBrZXlmcmFtZXMgcHVsc2luZyB7XG5cdDAlIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkc2Vjb25kYXJ5O1xuXHR9XG5cblx0NTAlIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeTtcblx0fVxuXG5cdDEwMCUge1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnk7XG5cdH1cbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBJbnB1dHMgJiBMYWJlbHNcblxuKi9cblxuXG5cblxuLy8gIC8vLy8gIC0tfCAgICBUWVBFXG5cbiRsYWJlbHM6IHRydWU7XG5cblxuLy8gIC8vLy8gIC0tfCAgICBMQUJFTFNcblxuQGlmICggJGxhYmVscyApIHtcblxuICAgIGxhYmVsIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gICAgICAgIGNvbG9yOiBsaWdodGVuKCAkYmxhY2ssIDIwJSApO1xuXG4gICAgICAgIHRyYW5zaXRpb246IDIwMG1zO1xuXG4gICAgICAgICYuc3VjY2VzcyB7XG4gICAgICAgICAgICBjb2xvcjogJGdyZWVuO1xuICAgICAgICB9XG5cbiAgICAgICAgJi5lcnJvciB7XG4gICAgICAgICAgICBjb2xvcjogJHJlZDtcbiAgICAgICAgfVxuXG4gICAgICAgICYuZm9jdXMge1xuICAgICAgICAgICAgY29sb3I6ICRzZWNvbmRhcnk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG5cbi8vICAvLy8vICAtLXwgICAgVFlQRSBJTlBVVFNcblxuXG5pbnB1dFt0eXBlPVwibmFtZVwiXSxcbmlucHV0W3R5cGU9XCJlbWFpbFwiXSxcbmlucHV0W3R5cGU9XCJudW1iZXJcIl0sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdLFxuaW5wdXRbdHlwZT1cInRleHRcIl0sXG5pbnB1dFt0eXBlPVwidGVsXCJdLFxuaW5wdXRbdHlwZT1cInVybFwiXSxcbmlucHV0W3R5cGU9XCJwYXNzd29yZFwiXSxcbnRleHRhcmVhIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXgtd2lkdGg6IDUwcmVtO1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgICBwYWRkaW5nOiAuNXJlbSAxcmVtO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgbGluZS1oZWlnaHQ6IDE7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbC1ncmV5O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiAwLjRyZW07XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgIHRyYW5zaXRpb246IDIwMG1zO1xuXG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBvdXRsaW5lLXdpZHRoOiAwO1xuXG5cblxuICAgICRwbGFjZWhvbGRlcjogZmFsc2U7XG5cbiAgICBAaWYgKCAkcGxhY2Vob2xkZXIgKSB7XG4gICAgICAgICY6OnBsYWNlaG9sZGVyIHtcbiAgICAgICAgICAgIGNvbG9yOiBsaWdodGVuKCAkYmxhY2ssIDQwJSApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgXG5cbiAgICAmOi13ZWJraXQtYXV0b2ZpbGwsXG4gICAgJjotd2Via2l0LWF1dG9maWxsOmhvdmVyLCBcbiAgICAmOi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsIFxuICAgICY6LXdlYmtpdC1hdXRvZmlsbDphY3RpdmUgIHtcbiAgICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMCAzMHB4ICRsLWdyZXkgaW5zZXQgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAmLmZvY3VzIHtcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDJyZW0gcmdiYSggJGQtZ3JleSwgLjIgKTtcbiAgICB9XG59XG5cbi5pbnB1dCwgLnRleHRhcmVhIHtcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgIEBpZiAoICRsYWJlbHMgKSB7XG5cbiAgICAgICAgbGFiZWwge1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxcmVtO1xuXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IC4xNXJlbTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgQGluY2x1ZGUgeCggbSApIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICB9XG59XG5cbi52YWxpZGF0aW9uIHtcbiAgICBwYWRkaW5nOiAuNHJlbSAxcmVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IC0uMnJlbTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoIDEwMCUgKSBzY2FsZSggMCApO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcbiAgICBvcGFjaXR5OiAwO1xuXG4gICAgY29sb3I6ICRibGFjaztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XG4gICAgYm9yZGVyLXJhZGl1czogLjRyZW07IFxuICAgIGJveC1zaGFkb3c6IC41cmVtIC41cmVtIDJyZW0gcmdiYSggJGQtZ3JleSwgLjQgKTtcbiAgICBmb250LXNpemU6IDEuNHJlbTtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgICB6LWluZGV4OiAxMDA7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgICBAaW5jbHVkZSBwc2V1ZG8oIGFic29sdXRlICk7XG5cbiAgICAgICAgd2lkdGg6IDFyZW07XG4gICAgICAgIGhlaWdodDogMXJlbTtcbiAgICAgICAgdG9wOiAtLjFyZW07XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSggNTAlLCAtNTAlICk7XG5cbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHJlZDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMXJlbTtcbiAgICB9XG5cbiAgICB0cmFuc2l0aW9uOiAyMDBtcztcblxuICAgICYucG9wIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKCAxMDAlICkgc2NhbGUoIDEgKTtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG59XG5cblxuLy8gIC0tfCAgICBURVhUQVJFQVxuXG50ZXh0YXJlYSB7XG4gICAgJGhlaWdodDogKCAkYmFzZS1mb250LXNpemUgKiAkYmFzZS1saW5lLWhlaWdodCApICogMztcblxuICAgIGhlaWdodDogJGhlaWdodCArIDFyZW07IC8vIEFkZHMgMSB0byBjb21wZW5zYXRlIGZvciBwYWRkaW5nXG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcblxuICAgIHJlc2l6ZTogbm9uZTtcbn1cblxuXG4vLyAgLS18ICAgIFNFTEVDVFxuXG5zZWxlY3Qge1xuICAgIGhlaWdodDogMy42cmVtO1xuICAgIG1hcmdpbi1ib3R0b206IDNyZW07IC8vIDAuNiArIDIuNFxuICAgIHBhZGRpbmc6IDAuNnJlbSAxcmVtO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgbGluZS1oZWlnaHQ6ICRiYXNlLWxpbmUtaGVpZ2h0O1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGwtZ3JleTtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogMC40cmVtO1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xufVxuXG5cbi8vICAtLXwgICAgQ0hFQ0tCT1hcblxuLy8gU2hvdWxkIGJlIGFwcGxpZWQgdG8gYSA8ZGl2PiB3aXRoIGlucHV0IGFuZCBsYWJlbCBuZXN0ZWRcbi5jaGVja2JveCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgbGFiZWwge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDFyZW07XG5cbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICB9XG4gICAgXG4gICAgLnZhbGlkYXRpb24ge1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICByaWdodDogYXV0bztcblxuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XG5cbiAgICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICByaWdodDogYXV0bztcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKCAtNTAlLCAtNTAlICk7XG4gICAgICAgIH1cbiAgICB9ICAgIFxuXG4gICAgQGluY2x1ZGUgeCggbSApIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICB9XG59XG5cbiIsIi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgQ29kZVxuXG4qL1xuXG5cblxuXG4kYm9yZGVyOiAwcmVtOyAvLyBWYWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiAwLjU1cmVtXG5cbiRwYWRkaW5nOiAxLjc1cmVtIC0gJGJvcmRlcjsgLy8gMS43NXJlbSBpcyBiYXNlIHZhbHVlXG5cblxuLmNvZGUge1xuXHR3aWR0aDogMTAwJTtcblx0bWFyZ2luOiA3LjJyZW0gMCA3LjJyZW0gMDtcblxuXHR0ZXh0LWFsaWduOiBsZWZ0O1xuXG5cdHNwYW4ge1xuXHRcdG1hcmdpbi1ib3R0b206IDAuNnJlbTtcblx0XHRwYWRkaW5nLWxlZnQ6IDIlO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXG5cdFx0Y29sb3I6IGxpZ2h0ZW4oICRibGFjaywgNDAlICk7XG5cdFx0Zm9udC1zaXplOiAxLjJyZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHR9XG59XG5cblxucHJlIHtcblx0d2lkdGg6IDEwMCU7XG5cdG1hcmdpbjogMDtcblx0cGFkZGluZzogJHBhZGRpbmc7XG5cblx0YmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCAkd2hpdGUsIDEwJSApO1xuXHRib3JkZXItcmFkaXVzOiAuNHJlbTtcblx0b3ZlcmZsb3cteDogc2Nyb2xsO1xuXG5cblx0JGNvZGUtc2l6ZTogOTA7XG5cblx0QGZ1bmN0aW9uIGdldF9jb2RlX2xpbmVfaGVpZ2h0KCkge1xuXHRcdEByZXR1cm4gKCAkYmFzZS1mb250LXNpemUgKiAoICRjb2RlLXNpemUgLyAxMCApICk7XG5cdH1cblxuXHRmb250LXNpemU6IDgwJTsgLy8gMS40NHJlbVxuXG5cdGxpbmUtaGVpZ2h0OiAxLjQ7XG5cblxuXHRjb2RlIHtcblx0XHR3aWR0aDogMTAwJTtcblx0fVxuXG5cdHRyYW5zaXRpb246IDIwMG1zO1xuXG5cdCY6aG92ZXIge1xuXHRcdGJveC1zaGFkb3c6IDAgMCAxcmVtIHJnYmEoICRibGFjaywgLjIgKTtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZW4oICR3aGl0ZSwgMTUlICk7XG5cdH1cblxuXHRAaW5jbHVkZSB4KCBtICkge1xuXHRcdHBhZGRpbmc6ICRwYWRkaW5nICogMjtcblx0fVxufVxuXG4iLCIvKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIFRhYmxlXG5cbiovXG5cblxuXG5cbnRhYmxlIHtcblx0d2lkdGg6IDEwMCU7XG5cdG1hcmdpbi1ib3R0b206IDIuNHJlbTtcblxuXHRsaW5lLWhlaWdodDogJGJhc2UtbGluZS1oZWlnaHQ7XG5cblx0Ly8gVXNlcyBzYW1lIHN0eWxpbmcgYXMgPGg2PlxuXHR0aCB7XG5cdFx0cGFkZGluZy1ib3R0b206IDByZW07XG5cblx0XHRjb2xvcjogJGJsYWNrO1xuXHRcdGZvbnQtc2l6ZTogMnJlbTtcblx0XHRmb250LXdlaWdodDogNzAwO1xuXHRcdGxpbmUtaGVpZ2h0OiAxLjU7XG5cdFx0dGV4dC1hbGlnbjogbGVmdDtcblx0fVxuXG5cdHRkIHtcblx0XHRwYWRkaW5nLXRvcDogMS44cmVtO1xuXHRcdHBhZGRpbmctYm90dG9tOiAwLjVyZW07XG5cblx0XHRib3JkZXItYm90dG9tOiAwLjFyZW0gc29saWQgJGJsYWNrO1xuXG5cdFx0Zm9udC1zaXplOiAxLjZyZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDQwMDtcblx0XHRsaW5lLWhlaWdodDogJGJhc2UtbGluZS1oZWlnaHQ7XG5cdH1cbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBOYXZpZ2F0aW9uIC0gSGVhZGVyXG5cbiovXG5cblxuXG5cbi8vICAvLy8vICAtLXwgICAgQkFTRVxuXG5cbm5hdiB7XG5cbiAgICB1bCB7XG4gICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBwYWRkaW5nOiAwO1xuXG4gICAgICAgIGEsIHNwYW4ge1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogJGJhc2UtbGluZS1oZWlnaHQ7XG5cbiAgICAgICAgICAgIHRyYW5zaXRpb246IDMwMG1zO1xuXG4gICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4ubWFpbi1uYXYge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHBhZGRpbmctdG9wOiA1cmVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB6LWluZGV4OiAxMDtcbiAgICBcbiAgICB1bCB7XG4gICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgICAgcGFkZGluZzogM3JlbSAwO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgICAgIGxpIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC44cmVtO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuXG4gICAgICAgICAgICBhLCBzcGFuIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAuOHJlbSAwO1xuXG4gICAgICAgICAgICAgICAgY29sb3I6ICRibGFjaztcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogMzAwO1xuXG4gICAgICAgICAgICAgICAgJi5hY3RpdmUge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICYucGFyZW50IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgICAgICAgICAuc3ViLW1lbnUge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxcmVtO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxcmVtO1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGwtZ3JleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICYuc2hvdyB7XG5cbiAgICAgICAgICAgICAgICAuc3ViLW1lbnUge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICY6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIFNlbGVjdGVkIG1lZGlhIHF1ZXJ5IHdoZXJlIG5hdiBtZW51IHN3aXRjaGVzXG4gICAgLy8gZnJvbSBtb2JpbGUvdGFibGV0IHZpZXcgdG8gZGVza3RvcCB2aWV3XG5cbiAgICAvLyBSZW1lbWJlciB0byBhZGp1c3QgaGVhZGVyIGFuZCBoYW1idXJnZXIgc3R5bGluZ1xuICAgIC8vIHRvIG1hdGNoIHRoZSBjaG9zZW4gYnJlYWtwb2ludCBmb3IgaGVhZGVyIHR5cGVcbiAgICBAaW5jbHVkZSB4KCBtICkge1xuXG4gICAgfVxuXG5cbiAgICBAaW5jbHVkZSB4KCBsICkge1xuICAgICAgICB3aWR0aDogYXV0bztcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICAgICB1bCB7XG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICAgICAgICAgbGkge1xuICAgICAgICAgICAgICAgIGhlaWdodDogNHJlbTtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAgMnJlbSAwIDA7XG5cbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuXG4gICAgICAgICAgICAgICAgJi5wYXJlbnQge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgICAgICAgICAgICAgLnN1Yi1tZW51IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aDogY2FsYyggMTAwJSArIDRyZW0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxcmVtIDJyZW07XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGNhbGMoIDEwMCUgKyAxcmVtICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAtMnJlbTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSggZGFya2VuKCAkd2hpdGUsIDUlICksIC45NiApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoIDJweCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDRyZW0gNHJlbSByZ2JhKCBsaWdodGVuKCAkYmxhY2ssIDQwJSApLCAuMiApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBAaW5jbHVkZSBiZWZvcmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGNhbGMoIDEwMCUgLSAycmVtICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAuMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMXJlbTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbiggJHdoaXRlLCAxMCUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMCAwIC44cmVtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGluY2x1ZGUgbGFzdC1jaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICYuc2hvdyB7XG5cbiAgICAgICAgICAgICAgICAgICAgLnN1Yi1tZW51IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgbGFzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuXG4vLyAgLS18ICAgIE5BViBVVElMSVRZIENMQVNTRVNcblxuLy8gU3RvcCB1c2VyIGZyb20gc2Nyb2xsaW5nIHdoZW4gbmF2IG1lbnUgaXNcbi8vIG9wZW4gb24gbW9iaWxlIGFuZC9vciB0YWJsZXRcbi5uby1zY3JvbGwgeyBvdmVyZmxvdy15OiBoaWRkZW47IH1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBIYW1idXJnZXIgTWVudSBUb2dnbGVcblxuKi9cblxuXG5cblxuLy8gICBBcyBwYXJ0IG9mIHRoZSBoZWFkZXIgY29tcG9uZW50XG5cblxuLy8gIC0tfCAgICBCQVNFXG5cbi50b2dnbGUge1xuICAgIHdpZHRoOiAyLjZyZW07XG4gICAgaGVpZ2h0OiA0cmVtO1xuICAgIHBhZGRpbmc6IDEuNTVyZW0gMDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgei1pbmRleDogMjA7XG5cbiAgICB0cmFuc2l0aW9uOiA0MDBtcztcblxuICAgIHNwYW4ge1xuICAgICAgICB3aWR0aDogMi42cmVtO1xuICAgICAgICBoZWlnaHQ6IC4xcmVtO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBsZWZ0OiAwO1xuXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRibGFjaztcbiAgICB9XG5cbiAgICBzcGFuLmJlZm9yZSB7XG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAyNTBtcyAzNTBtcyBlYXNlLWluLCBvcGFjaXR5IDBtcyAzNTBtcztcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDUwJTtcblxuICAgICAgICAmOm50aC1jaGlsZCgxKSB7XG4gICAgICAgICAgICB0b3A6IDEuNnJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgICY6bnRoLWNoaWxkKDIpICB7XG4gICAgICAgICAgICBib3R0b206IDEuNnJlbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNwYW4uYWZ0ZXIge1xuICAgICAgICB0b3A6IDJyZW07XG5cbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxNTBtcyAyMDBtcyBlYXNlLW91dCwgdmlzaWJpbGl0eSAwbXMgMzUwbXM7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG4gICAgfVxuXG4gICAgJi50cmFuc2l0aW9uIHtcblxuICAgICAgICBzcGFuLmJlZm9yZSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgZWFzZS1vdXQsIG9wYWNpdHkgMG1zIDIwMG1zO1xuXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xuXG4gICAgICAgICAgICAmOm50aC1jaGlsZCgxKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoIDAsIC40cmVtICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICY6bnRoLWNoaWxkKDIpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSggMCwgLS40cmVtICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzcGFuLmFmdGVyIHtcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTUwbXMgMjAwbXMgZWFzZS1vdXQsIHZpc2liaWxpdHkgMG1zIDIwMG1zO1xuXG4gICAgICAgICAgICAmOm50aC1vZi10eXBlKDMpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooIDQ1ZGVnICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICY6bnRoLW9mLXR5cGUoNCkge1xuICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG5cbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTUwbXMgMjAwbXMgZWFzZS1vdXQsIHZpc2liaWxpdHkgMG1zIDIwMG1zO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlWiggLTQ1ZGVnICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAaW5jbHVkZSB4KCBsICkge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBGb3JtXG5cbiovXG5cblxuXG5cbi8vICAvLy8vICAtLXwgICAgQkFTRVxuXG4uZm9ybSB7XG5cdG1heC13aWR0aDogNTByZW07XG5cdG1hcmdpbjogMCBhdXRvO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0QGluY2x1ZGUgeCggbSApIHtcblxuXHRcdEBpbmNsdWRlIGdyaWQoIDJyZW0gKTtcblx0XHRncmlkLXRlbXBsYXRlOlxuXHRcdCAgICBcImEgYSBiIGJcIiBhdXRvXG5cdFx0ICAgIFwiYyBjIGMgY1wiIGF1dG9cblx0XHQgICAgXCJkIGQgZCBlXCIgYXV0byAvXG5cdFx0ICAgIDFmciAxZnIgMWZyIDFmcjtcblxuXHRcdC5pbnB1dDpmaXJzdC1vZi10eXBlIHtcblx0XHRcdGdyaWQtYXJlYTogYTtcblx0XHR9XG5cblx0XHQuaW5wdXQ6bnRoLW9mLXR5cGUoMikge1xuXHRcdFx0Z3JpZC1hcmVhOiBiO1xuXHRcdH1cblxuXHRcdC50ZXh0YXJlYSB7XG5cdFx0XHRncmlkLWFyZWE6IGM7XG5cdFx0fVxuXG5cdFx0LmNoZWNrYm94IHtcblx0XHRcdGdyaWQtYXJlYTogZDtcblx0XHR9XG5cblx0XHQuc3VibWl0IHtcblx0XHRcdGdyaWQtYXJlYTogZTtcblx0XHR9XG5cdH1cbn1cblxuLnN1Ym1pc3Npb24ge1xuXHR3aWR0aDogY2FsYyggMTAwdncgLSAycmVtICk7XG5cdG1heC13aWR0aDogNDByZW07XG5cdHBhZGRpbmc6IDFyZW07XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdHBvc2l0aW9uOiBmaXhlZDtcblx0bGVmdDogMXJlbTtcblx0Ym90dG9tOiAxcmVtO1xuXHR6LWluZGV4OiA5OTk5O1xuXG5cdGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcblx0Y29sb3I6ICRibGFjaztcblx0Ym9yZGVyLXJhZGl1czogLjRyZW07XG5cdGJveC1zaGFkb3c6IDAgMCA0cmVtIHJnYmEoICRibGFjaywgLjIgKTtcblxuXHRzcGFuOmZpcnN0LW9mLXR5cGUge1xuXHRcdG1hcmdpbi1ib3R0b206IDFyZW07XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cblx0XHRmb250LXNpemU6IDIuMnJlbTtcblx0XHRmb250LXdlaWdodDogNzAwO1xuXHR9XG5cblx0YnV0dG9uIHtcblx0XHRtYXJnaW46IDA7XG5cdFx0YWxpZ24tc2VsZjogZmxleC1lbmQ7XG5cdH1cblxuXHRzcGFuOmxhc3Qtb2YtdHlwZSB7XG5cdFx0Zm9udC1zaXplOiAxLjRyZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHR9XG5cblx0dHJhbnNpdGlvbjogMjAwbXMgY3ViaWMtYmV6aWVyKCAuMiwgLjcsIC41LCAxLjIgKTtcblxuXHRvcGFjaXR5OiAwO1xuXHR0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoIDRyZW0gKSBzY2FsZSggLjggKTtcblxuXHQmLnNob3cge1xuXHRcdG9wYWNpdHk6IDE7XG5cdFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVZKCAwICkgc2NhbGUoIDEgKTtcblx0fVxuXG5cdEBpbmNsdWRlIHgoIG0gKSB7XG5cdFx0bGVmdDogNTAlO1xuXHRcdGJvdHRvbTogNTAlO1xuXG5cdFx0dHJhbnNmb3JtOiB0cmFuc2xhdGUoIC01MCUsIGNhbGMoIC01MCUgKyA0cmVtICkgKSBzY2FsZSggLjggKTtcblxuXHRcdCYuc2hvdyB7XG5cdFx0XHR0cmFuc2Zvcm06IHRyYW5zbGF0ZSggLTUwJSwgLTUwJSApIHNjYWxlKCAxICk7XG5cdFx0fVxuXHR9XG5cblx0QGluY2x1ZGUgeCggbCApIHtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0bGVmdDogNTAlO1xuXHRcdGJvdHRvbTogNTAlO1xuXG5cdFx0dHJhbnNmb3JtOiB0cmFuc2xhdGUoIC01MCUsIDUwJSApIHNjYWxlKCAuOCApO1xuXG5cdFx0Ji5zaG93IHtcblx0XHRcdHRyYW5zZm9ybTogdHJhbnNsYXRlKCAtNTAlLCA1MCUgKSBzY2FsZSggMSApO1xuXHRcdH1cblx0fVxufVxuXG4iLG51bGwsIi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgSGVybyAtIEFsbCBWYXJpYXRpb25zXG5cbiovXG5cblxuXG5cbi8vICAtLXwgICAgQkFTRVxuXG4laGVybyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBibG9jaztcblxuICAgIC5iYWNrZ3JvdW5kIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7IGxlZnQ6IDA7XG4gICAgICAgIHotaW5kZXg6IDA7XG5cbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgXG4gICAgICAgIG9wYWNpdHk6IDE7XG5cbiAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIHotaW5kZXg6IC0xO1xuXG4gICAgICAgICAgICBAaW5jbHVkZSBvYmplY3QtZml0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAuY29udGVudCB7XG4gICAgICAgIEBleHRlbmQgJWNvbnRhaW5lcjtcblxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogY2FsYyggNTAlICsgM3JlbSApO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB6LWluZGV4OiAxMDA7XG5cbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKCAtNTAlICk7XG4gICAgICAgIFxuXG4gICAgICAgIGgxLCBwIHtcbiAgICAgICAgICAgIGNvbG9yOiAkd2hpdGU7XG5cbiAgICAgICAgICAgIEBleHRlbmQgJXQtc2hhZG93O1xuICAgICAgICB9XG5cbiAgICAgICAgaDEge1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA0MHJlbTtcblxuICAgICAgICAgICAgLy9mb250LXNpemU6IDVyZW07XG4gICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDIuNHJlbTtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAmICsgbWFpbiB7XG4gICAgICAgIHBhZGRpbmctdG9wOiAwO1xuICAgIH1cbn1cblxuLmhlcm8tc3RhbmRhcmQge1xuICAgIEBleHRlbmQgJWhlcm87XG5cbiAgICBoZWlnaHQ6IDUwdmg7XG59XG5cbi5oZXJvLWNhcm91c2VsIHtcbiAgICBAZXh0ZW5kICVoZXJvO1xuXG4gICAgaGVpZ2h0OiA2N3ZoO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgIC5zdGFnZSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB6LWluZGV4OiA1MDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICAgICAucHJvcCB7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICB6LWluZGV4OiA1MDtcblxuICAgICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSA4MDBtcyBlYXNlLWluLW91dCwgb3BhY2l0eSA2MDBtcyAyMDBtcyBlYXNlO1xuXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSggMS4xICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICYuYWN0aXZlIHtcbiAgICAgICAgICAgICAgICB6LWluZGV4OiAxMDA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKCAxICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAuc3RhZ2UtbWFwIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG1heC13aWR0aDogODByZW07XG4gICAgICAgIHBhZGRpbmc6IDAgMS4ycmVtO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgYm90dG9tOiAxcmVtO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgei1pbmRleDogMTAwO1xuXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCggLTUwJSApO1xuICAgICAgICBcblxuICAgICAgICBkaXYge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDEycmVtO1xuICAgICAgICAgICAgaGVpZ2h0OiAxLjZyZW07XG4gICAgICAgICAgICBtYXJnaW46IDAgLjJyZW07XG4gICAgICAgICAgICBwYWRkaW5nOiAuNnJlbTtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMXJlbTtcblxuICAgICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAuNHJlbTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcblxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoICR3aGl0ZSwgLjQgKTtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAuMnJlbTtcblxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IDQwMG1zO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAmLmFjdGl2ZSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyYW5zaXRpb246IDMwMG1zO1xuXG4gICAgICAgICAgICAmOmhvdmVyIHtcblxuICAgICAgICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAub3ZlcmxheSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB6LWluZGV4OiA3NTtcblxuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoIDBkZWcsIHJnYmEoICRibGFjaywgLjYgKSAwJSwgcmdiYSggJGJsYWNrLCAuMyApIDEwMCUgKTtcbiAgICB9XG5cbiAgICAuY29udGVudCB7XG4gICAgICAgIHotaW5kZXg6IDEwMDtcbiAgICBcbiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDgwMG1zIGVhc2Utb3V0LCBvcGFjaXR5IDYwMG1zIDIwMG1zIGVhc2U7XG4gICAgICAgIFxuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoIDAgKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCA1MCU7XG5cbiAgICAgICAgJi5sb2FkIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoIC01MCUgKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbn1cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBQb3B1cFxuXG4qL1xuXG5cblxuXG4vLyBTdGFydFxuXG4iLCIvKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIEdhbGxlcnlcblxuKi9cblxuXG5cblxuLy8gIC8vLy8gIC0tfCAgICBCQVNFXG5cbi5nYWxsZXJ5IHtcblxuXG5cdEBpbmNsdWRlIHgoIG0gKSB7XG4gICAgXHRAaW5jbHVkZSBncmlkKCAycmVtICk7XG4gICAgXHRncmlkLXRlbXBsYXRlOiBcImEgYlwiIGF1dG8gLyAxZnIgMWZyO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIHgoIGwgKSB7XG4gICAgXHRncmlkLXRlbXBsYXRlOiBcImEgYiBjIGRcIiBhdXRvIC8gMWZyIDFmciAxZnIgMWZyO1xuICAgIH1cbn1cblxuXG4uZ2FsbGVyeS1pdGVtIHtcblx0d2lkdGg6IDEwMCU7XG5cdG1hcmdpbi1ib3R0b206IDJyZW07XG5cdHBhZGRpbmctdG9wOiA3NSU7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0Y3Vyc29yOiBwb2ludGVyO1xuXG5cdEBpbmNsdWRlIGxhc3QtY2hpbGQ7XG5cblx0aW1nIHtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0dG9wOiAwOyBsZWZ0OiAwO1xuXHRcdEBpbmNsdWRlIG9iamVjdC1maXQoKTtcblx0fVxuXG5cdHRyYW5zaXRpb246IDIwMG1zIGVhc2U7XG5cblx0Jjpob3ZlciB7XG5cdFx0Ym94LXNoYWRvdzogMCAwIDJyZW0gcmdiYSggJGJsYWNrLCAuMiApO1xuXHR9XG5cblx0QGluY2x1ZGUgeCggbSApIHtcblx0XHRtYXJnaW4tYm90dG9tOiAwO1xuXHR9XG5cdFxufVxuXG5cbi5nYWxsZXJ5LXZpZXdlciB7XG5cdHdpZHRoOiAxMDB2dztcblx0aGVpZ2h0OiAxMDB2aDtcblx0cGFkZGluZzogMnJlbSAwO1xuXHRkaXNwbGF5OiBub25lO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0cG9zaXRpb246IGZpeGVkO1xuXHR0b3A6IDA7XG5cdGxlZnQ6IDA7XG5cdHotaW5kZXg6IDEwMDA7XG5cblx0YmFja2dyb3VuZC1jb2xvcjogcmdiYSggJGJsYWNrLCAuOSApO1xuXG5cdGltZyB7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdG1heC1oZWlnaHQ6IDEwMCU7XG5cdFx0ei1pbmRleDogMTA7XG5cblx0XHRvcGFjaXR5OiAwO1xuXHRcdHRyYW5zZm9ybTogc2NhbGUoIC44ICk7XG5cblx0XHR0cmFuc2l0aW9uOiA0MDBtcyBjdWJpYy1iZXppZXIoIC4yLCAuNywgLjUsIDEuMiApO1xuXHR9XG5cblx0YnV0dG9uIHtcblx0XHR3aWR0aDogNC44cmVtO1xuXHRcdGhlaWdodDogNC44cmVtO1xuXHRcdHBhZGRpbmc6IDEuNHJlbTtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0dG9wOiBjYWxjKCA1MCUgLSAyLjRyZW0gKTtcblx0XHR6LWluZGV4OiAyMDtcblxuXHRcdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3JkZXItcmFkaXVzOiAwO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0YXBwZWFyYW5jZTogbm9uZTtcblxuXHRcdHN2ZyB7XG5cdFx0XHR3aWR0aDogMnJlbTtcblx0XHRcdGhlaWdodDogMnJlbTtcblxuXHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnk7XG5cdFx0fVxuXG5cdFx0Ji5wcmV2aW91cyB7XG5cdFx0XHRsZWZ0OiAwO1xuXHRcdH1cblxuXHRcdCYubmV4dCB7XG5cdFx0XHRyaWdodDogMDtcblx0XHR9XG5cblx0XHQmLmNsb3NlIHtcblx0XHRcdHRvcDogMDtcblx0XHRcdHJpZ2h0OiAwO1xuXHRcdH1cblxuXHRcdEBpbmNsdWRlIHgoIG0gKSB7XG5cdFx0XHQmLnByZXZpb3VzIHtcblx0XHRcdFx0bGVmdDogMnJlbTtcblx0XHRcdH1cblxuXHRcdFx0Ji5uZXh0IHtcblx0XHRcdFx0cmlnaHQ6IDJyZW07XG5cdFx0XHR9XG5cblx0XHRcdCYuY2xvc2Uge1xuXHRcdFx0XHR0b3A6IDJyZW07XG5cdFx0XHRcdHJpZ2h0OiAycmVtO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0fVxuXG5cdHRyYW5zaXRpb246IDIwMG1zO1xuXG5cdG9wYWNpdHk6IDA7XG5cblx0Ji5wcmUge1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdH1cblxuXHQmLmRpc3BsYXkge1xuXHRcdG9wYWNpdHk6IDE7XG5cdFxuXHRcdGltZyB7XG5cdFx0XHRvcGFjaXR5OiAxO1xuXHRcdFx0dHJhbnNmb3JtOiBzY2FsZSggMSApO1xuXHRcdH1cblx0fVxuXG5cblx0QGluY2x1ZGUgeCggbSApIHtcblx0XHRwYWRkaW5nOiA0cmVtO1xuXHR9XG5cdFxufVxuXG4iLCIvKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIExpc3RlZCBJdGVtcyAoVGh1bWJuYWlscywgUHJvZHVjdHMgZXRjLi4uKVxuXG4qL1xuXG5cblxuXG4vLyAgLS18ICAgIEJBU0VcblxuLmxpc3RlZCB7XG5cdGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcblxuXHRwYWRkaW5nOiAwO1xuXG5cbiAgICBAaW5jbHVkZSB4KCBtICkge1xuICAgIFx0QGluY2x1ZGUgZ3JpZCggMXJlbSApO1xuICAgIFx0Z3JpZC10ZW1wbGF0ZTpcbiAgICBcdFx0XCJhICBiXCIgYXV0byAvIDFmciAxZnI7XG5cbiAgICB9XG4gICAgXG59XG5cbiIsIi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgQ29va2llIENvbnNlbnQgUG9wdXBcblxuKi9cblxuXG5cblxuLy8gIC8vLy8gIC0tfCAgICBCQVNFXG5cbi5zaGlmdHItY29va2llLW5vdGljZSB7XG5cdHdpZHRoOiBjYWxjKCAxMDB2dyAtIDJyZW0gKTtcblx0bWF4LXdpZHRoOiA1MHJlbTtcblx0cGFkZGluZzogMnJlbTtcblx0cG9zaXRpb246IGZpeGVkO1xuXHRsZWZ0OiAxcmVtO1xuXHRib3R0b206IDFyZW07XG5cdHotaW5kZXg6IDk5OTk7XG5cblx0YmFja2dyb3VuZC1jb2xvcjogcmdiYSggJGwtZ3JleSwgLjk2ICk7XG5cdGJvcmRlcjogLjJyZW0gc29saWQgdHJhbnNwYXJlbnQ7XG5cdGJvcmRlci1yYWRpdXM6IC40cmVtO1xuXHRib3gtc2hhZG93OiAwIDJyZW0gNHJlbSByZ2JhKCAkZC1ncmV5LCAuNCApO1xuXG5cdHAge1xuXHRcdG1hcmdpbi1ib3R0b206IGdldF9iYXNlbGluZSggMjAgKTtcblx0XHRcblx0XHRmb250LXNpemU6IDEuNnJlbTtcblx0fVxuXG5cdHRyYW5zaXRpb246IG9wYWNpdHkgODAwbXMgMG1zIGVhc2Utb3V0LFxuXHRcdFx0XHR0cmFuc2Zvcm0gODAwbXMgMG1zIGVhc2UtaW4tb3V0LFxuXHRcdFx0XHRib3JkZXIgNDAwbXMgMG1zIGVhc2UsXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3IgNDAwbXMsXG5cdFx0XHRcdGJveC1zaGFkb3cgNDAwbXM7XG5cblx0b3BhY2l0eTogMDtcblx0dHJhbnNmb3JtOiB0cmFuc2xhdGVZKCAxMDAlICk7XG5cblx0Ji5wb3N0ZWQge1xuXHRcdG9wYWNpdHk6IDE7XG5cdFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVZKCAwICk7XG5cdH1cblxuXHQmLmFjY2VwdGVkIHtcblx0XHRib3JkZXItY29sb3I6ICRncmVlbjtcblx0fVxuXG5cdCY6aG92ZXIge1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHJnYmEoICRsLWdyZXksIDEgKTtcblx0XHRib3gtc2hhZG93OiAwIDJyZW0gNnJlbSByZ2JhKCAkZC1ncmV5LCAuNCApO1xuXHR9XG5cblx0QGluY2x1ZGUgeCggbSApIHtcblx0XHRtYXgtd2lkdGg6IDMwcmVtO1xuXG5cdFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVYKCAtMTAwJSApO1xuXG5cdFx0Ji5wb3N0ZWQge1xuXHRcdFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVYKCAwICk7XG5cdFx0fVxuXHR9XG59XG5cbiIsIi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgUGFnZSBOYW1lXG5cbiovXG5cblxuXG5cblxuXG4iLCIvKlxuXG4gICAgLy8gIC8vLy8gLS18ICAgIFRoZSBibG9nXG5cbiovXG5cblxuXG4uYmxvZy1sYXlvdXQge1xuXG5cdCYgPiBkaXYge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0fVxuXG5cdEBpbmNsdWRlIHgoIGwgKSB7XG5cdFx0XG5cdFx0JiA+IGRpdiB7XG5cdFx0XHRAaW5jbHVkZSBncmlkKCAycmVtICk7XG5cdFx0XHRncmlkLXRlbXBsYXRlOlxuXHRcdCAgICBcIm1haW4gbWFpbiBtYWluIHNpZGVcIiBhdXRvIC9cblx0XHQgICAgMWZyICAxZnIgMWZyIDFmcjtcblxuXHRcdCAgICAuYmxvZy1saXN0IHtcblx0XHQgICAgXHRncmlkLWFyZWE6IG1haW47XG5cdFx0ICAgIH1cblxuXHRcdCAgICAuYmxvZy1zaWRlYmFyIHtcblx0XHQgICAgXHRncmlkLWFyZWE6IHNpZGU7XG5cdFx0ICAgIH1cblxuXHRcdH1cblx0fVxuXG5cdGFydGljbGUge1xuXG5cdFx0cCwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcblx0XHRcdG1hcmdpbi1sZWZ0OiBhdXRvO1xuXHRcdFx0bWFyZ2luLXJpZ2h0OiAwO1xuXHRcdH1cblxuXHRcdGltZyB7XG5cdFx0XHRtYXJnaW4tYm90dG9tOiBnZXRfYmFzZWxpbmUoKTtcblx0XHR9XG5cdH1cbn1cblxuXG4uYmxvZy1saXN0IHtcblxuXHQuc2luZ2xlIHtcblx0XHRtYXJnaW4tYm90dG9tOiAycmVtO1xuXHRcdHBhZGRpbmc6IDJyZW07XG5cblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkbC1ncmV5O1xuXHRcdGJvcmRlci1yYWRpdXM6IC40cmVtO1xuXG5cdFx0LmltYWdlIHtcblx0XHRcdG1heC1oZWlnaHQ6IDIwcmVtO1xuXHRcdFx0bWFyZ2luLWJvdHRvbTogMXJlbTtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0XHRcdGJvcmRlci1yYWRpdXM6IC40cmVtO1xuXG5cdFx0XHRpbWcge1xuXHRcdFx0XHRAaW5jbHVkZSBvYmplY3QtZml0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aDMge1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRtYXJnaW4tYm90dG9tOiAxcmVtO1xuXG5cdFx0XHRvYmplY3QtZml0OiBjb3Zlcjtcblx0XHR9XG5cdFx0XG5cblx0XHQuZGV0YWlscyB7XG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXG5cdFx0XHRmbGV4LXdyYXA6IHdyYXA7XG5cdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cblx0XHRcdHNwYW4uZGF0ZSB7XG5cdFx0XHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0XHRcdH0gXG5cdFx0fVxuXG5cdFx0QGluY2x1ZGUgbGFzdF9jaGlsZCgpO1xuXG5cdFx0QGluY2x1ZGUgeCggbSApIHtcblx0XHRcdEBpbmNsdWRlIGdyaWQoIDJyZW0gKTtcblx0XHRcdGdyaWQtdGVtcGxhdGU6XG5cdFx0XHRcdFwiaW1hZ2UgZGV0YWlscyBkZXRhaWxzXCIgYXV0byAvIDFmciAxZnIgMWZyO1xuXG5cdFx0XHQuaW1hZ2Uge1xuXHRcdFx0XHRncmlkLWFyZWE6IGltYWdlO1xuXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IDA7XG5cdFx0XHR9XG5cblx0XHRcdC5kZXRhaWxzIHtcblx0XHRcdFx0Z3JpZC1hcmVhOiBkZXRhaWxzO1xuXG5cdFx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG4uYmxvZy1zaWRlYmFyIHtcblx0ZGlzcGxheTogbm9uZTtcblxuXHRAaW5jbHVkZSB4KCBsICkge1xuXHRcdHBhZGRpbmc6IDJyZW07XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0YWxpZ24tc2VsZjogZmxleC1zdGFydDtcblxuXHRcdGJhY2tncm91bmQtY29sb3I6ICRsLWdyZXk7XG5cdFx0Ym9yZGVyLXJhZGl1czogLjRyZW07XG5cblx0XHQud2lkZ2V0IHtcblx0XHRcdG1hcmdpbi1ib3R0b206IGdldF9iYXNlbGluZSgpO1xuXG5cdFx0XHRAaW5jbHVkZSBsYXN0X2NoaWxkKCk7XG5cdFx0fVxuXG5cdFx0aDQge1xuXHRcdFx0bWFyZ2luLWJvdHRvbTogMXJlbTtcblxuXHRcdFx0Y29sb3I6ICRzZWNvbmRhcnk7XG5cdFx0fVxuXG5cdFx0dWwge1xuXHRcdFx0bGlzdC1zdHlsZS10eXBlOiBub25lO1xuXG5cdFx0XHRtYXJnaW4tYm90dG9tOiAwO1xuXHRcdFx0cGFkZGluZy1sZWZ0OiAwO1xuXHRcdH1cblxuXHRcdGxpIHtcblx0XHRcdGEge1xuXHRcdFx0XHQmOjphZnRlciB7XG5cdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJGJsYWNrO1xuXG5cdFx0XHRcdFx0dHJhbnNmb3JtOiBzY2FsZVgoIDAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdCY6aG92ZXIge1xuXHRcdFx0XHRcdGNvbG9yOiAkcHJpbWFyeTtcblxuXHRcdFx0XHRcdCY6OmFmdGVyIHtcblx0XHRcdFx0XHRcdHRyYW5zZm9ybTogc2NhbGVYKCAxICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LnNlYXJjaCB7XG5cdFx0XHRpbnB1dCB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDIwMG1zIGVhc2U7XG5cblx0XHQmLnN0aWNreSB7XG5cdFx0XHRwb3NpdGlvbjogZml4ZWQ7XG5cblx0XHRcdGJveC1zaGFkb3c6IDAgMCAycmVtIHJnYmEoIGxpZ2h0ZW4oICRibGFjaywgMTAlICksIC4yICk7XG5cdFx0fVxuXG5cdFx0Ji5wYXVzZSB7XG5cdFx0XHRhbGlnbi1zZWxmOiBmbGV4LWVuZDtcblx0XHR9XG5cdH1cbn1cblxuLnNlYXJjaGVkIHtcblx0Y29sb3I6ICR3aGl0ZTtcbn1cblxuYm9keS5zaW5nbGUucG9zdCB7XG5cblx0YXJ0aWNsZSB7XG5cdFx0bWF4LXdpZHRoOiBsaW5lX3dpZHRoKCk7XG5cdFx0bWFyZ2luLWxlZnQ6IGF1dG87XG5cdFx0bWFyZ2luLXJpZ2h0OiBhdXRvO1xuXHR9XG59XG5cbiIsIi8qXG5cbiAgICAvLyAgLy8vLyAtLXwgICAgQWNjZXNzaWJpbGl0eVxuXG4qL1xuXG5cblxuLy8gUHJldmVudCBhbmltYXRpb25zIGFuZCB0cmFuc2l0aW9ucyBmb3IgdXNlcnMgd2hvIHByZWZlcnJlZCByZWR1Y2VkIG1vdGlvblxuQG1lZGlhIHNjcmVlbiBhbmQgKCBwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UgKSwgKCB1cGRhdGU6IHNsb3cgKSB7XG5cblx0KiB7XG5cdFx0YW5pbWF0aW9uLWR1cmF0aW9uOiAuMDAxbXMgIWltcG9ydGFudDtcblx0XHRhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxICFpbXBvcnRhbnQ7XG5cdFx0dHJhbnNpdGlvbi1kdXJhdGlvbjogLjAwMW1zICFpbXBvcnRhbnQ7XG5cdH1cbn1cblx0XHRcdFx0XHRcblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBGaXhlclxuXG4qL1xuXG5cblxuXG4vLyBUcmVhdCB0aGlzIGZpbGUgbGlrZSBhIGR1bXBpbmcgZ3JvdW5kLCBmb3IgcXVpY2sgZml4ZXNcbi8vIHRvIGJ1Z3Mgb3IgaWYgc29tZXRoaW5nIGRvZXNuJ3QgaGF2ZSBhIGhvbWUgeWV0LiBcblxuLy8gSnVzdCBtYWtlIHN1cmUgdGhpcyBmaWxlIGlzbid0IGV4cGxvaXRlZCBhbmQgaXMgY29tcGxldGVseVxuLy8gY2xlYXIgd2hlbiB0aGUgcHJvamVjdCBpcyBjb21wbGV0ZS5cblxuIiwiLypcblxuICAgIC8vICAvLy8vIC0tfCAgICBEZXYgVG9vbHNcblxuKi9cblxuXG5cblxuLy9cdENPTlRST0xMRVJTXG4kZGV2OiBcdFx0XHRmYWxzZTtcdC8vIE1hc3RlclxuXG4kc2Nyb2xsOlx0XHRmYWxzZTsgXHQvLyBGb3JjZSBzY3JvbGxcbiRib3VuZGFyaWVzOiBcdGZhbHNlO1x0Ly8gRWxlbWVudCBCb3VuZGFyeSBNYXJrZXJzXG5cblxuXG4vLyBGZWVsIGZyZWUgdG8gYWRkIG1vcmUgdG9vbHMgdG8gc3VpdCB0aGUgbmVlZHNcbi8vIG9mIHlvdXIgcHJvamVjdCwganVzdCBhZGQgYSBjb250cm9sbGVyIHZhcmlhYmxlXG4vLyB0byB0aGUgbGlzdCBhYm92ZS5cblxuXG4vLyAgLS18ICAgIFNjcm9sbFxuQGlmICggJHNjcm9sbCBhbmQgJGRldiApIHtcblxuXHRib2R5IHtcblx0XHRtaW4taGVpZ2h0OiAyMDB2aDsgLy8gU2V0IHRvIDIwMCBmb3IgZGV2IGJ1aWxkIG9ubHlcblx0fVxufVxuXG5cbi8vICAtLXwgICAgQm91bmRhcmllc1xuQGlmICggJGJvdW5kYXJpZXMgYW5kICRkZXYgKSB7XG5cblx0aDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogcmdiYSggJHByaW1hcnksIC4xICk7XG5cdH0gXG5cblx0cCwgbGkge1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHJnYmEoICRzZWNvbmRhcnksIC4xICk7XG5cdH1cbn1cblxuIl19 */
