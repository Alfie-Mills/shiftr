
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */


html {
  line-height: 1.15;
  
  -ms-text-size-adjust: 100%;
  
  -webkit-text-size-adjust: 100%;
   }



body {
  margin: 0; }


article,
aside,
footer,
header,
nav,
section {
  display: block; }


h1 {
  font-size: 2em;
  margin: 0.67em 0; }



figcaption,
figure {
  display: block; }


figure {
  margin: 1em 40px; }


hr {
  box-sizing: content-box;
  
  height: 0;
  
  overflow: visible;
   }


main {
  display: block; }


pre {
  font-family: monospace, monospace;
  
  font-size: 1em;
   }



a {
  background-color: transparent;
  
  -webkit-text-decoration-skip: objects;
   }



abbr[title] {
  border-bottom: none;
  
  text-decoration: underline;
  
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
   }


b,
strong {
  font-weight: inherit; }


b,
strong {
  font-weight: bolder; }


code,
kbd,
samp {
  font-family: monospace, monospace;
  
  font-size: 1em;
   }


dfn {
  font-style: italic; }


mark {
  background-color: #ff0;
  color: #000; }


small {
  font-size: 80%; }


sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }



audio,
video {
  display: inline-block; }


audio:not([controls]) {
  display: none;
  height: 0; }


img {
  border-style: none; }


svg:not(:root) {
  overflow: hidden; }



button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  
  font-size: 100%;
  
  line-height: 1.15;
  
  margin: 0;
   }


button {
  overflow: visible; }


button,
select {
  
  text-transform: none; }


button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
   }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  
   }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }


input {
  overflow: visible; }


[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  
  padding: 0;
   }


[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }


[type="search"] {
  -webkit-appearance: textfield;
  
  outline-offset: -2px;
  
   }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }


::-webkit-file-upload-button {
  -webkit-appearance: button;
  
  font: inherit;
   }


fieldset {
  padding: 0.35em 0.75em 0.625em; }


legend {
  box-sizing: border-box;
  
  display: table;
  
  max-width: 100%;
  
  padding: 0;
  
  color: inherit;
  
  white-space: normal;
   }


progress {
  display: inline-block;
  
  vertical-align: baseline;
   }


textarea {
  overflow: auto; }



details {
  display: block; }


summary {
  display: list-item; }


menu {
  display: block; }



canvas {
  display: inline-block; }


template {
  display: none; }



[hidden] {
  display: none; }



.hero-standard .content h1, .hero-carousel .content h1, .hero-standard .content p, .hero-carousel .content p {
  text-shadow: 0 0 1.8rem rgba(110, 110, 110, 0.8); }





p, h1, h2, h3, h4, h5, h6 {
  margin: 0;
  padding: 0;
  border: 0; }

html {
  font-size: 62.5%; }

body, input, textarea, button, select {
  font-family: "Nunito", sans-serif;
  font-size: 1.8rem;
  font-weight: 400;
  font-style: normal;
  color: #222222; }

p {
  max-width: 68.4rem;
  margin-bottom: 2.88rem;
  line-height: 1.6;
  text-align: left; }
  p:last-child {
    margin-bottom: 0; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Nunito", sans-serif;
  font-weight: 700;
  text-align: left;
  text-transform: capitalize;
  line-height: 1.4;
  color: #080808; }

h1 {
  font-size: 4rem;
  max-width: 68.4rem; }

h2 {
  font-size: 3.2rem;
  max-width: 68.4rem; }

h3 {
  font-size: 2.6rem;
  max-width: 68.4rem; }

h4 {
  font-size: 2.2rem;
  max-width: 68.4rem; }

h5 {
  font-size: 1.8rem;
  max-width: 68.4rem; }

h6 {
  font-size: 1.4rem;
  max-width: 68.4rem; }

a {
  color: #E44BB0;
  line-height: 1.6;
  text-decoration: none;
  transition: 300ms; }
  a:hover {
    color: #444BB0; }

a + p {
  margin-top: 2.88rem; }

p a, li:not(.menu-item) a, small a {
  display: inline-block;
  position: relative;
  color: inherit;
  font-weight: 700; }
  p a::after, li:not(.menu-item) a::after, small a::after {
    content: "";
    display: block;
    position: absolute;
    width: 100%;
    height: .1rem;
    background-color: #E44BB0;
    transition: 300ms;
    transform: scaleX(1); }
  p a:hover, li:not(.menu-item) a:hover, small a:hover {
    color: #E44BB0; }
    p a:hover::after, li:not(.menu-item) a:hover::after, small a:hover::after {
      transform: scaleX(0); }


.button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  margin: 0;
  padding: 1.2rem 2.4rem;
  display: inline-block;
  cursor: pointer;
  border: 0.1rem solid transparent;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  line-height: 1.6;
  font-weight: 700;
  text-transform: capitalize;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  outline: 0;
  transition: 300ms; }

.button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  color: #FAFAFA;
  background-color: #444BB0; }
  .button:hover,
  input[type="submit"]:hover,
  input[type="reset"]:hover,
  input[type="button"]:hover {
    color: #FAFAFA;
    background-color: #E44BB0; }

input[type="submit"] {
  margin: 0; }
  input[type="submit"].submitting {
    animation: pulsing 2s infinite forwards; }

@keyframes pulsing {
  0% {
    background-color: #444BB0; }
  50% {
    background-color: #E44BB0; }
  100% {
    background-color: #444BB0; } }


ul, ol {
  margin-top: 0;
  margin-bottom: 2.4rem;
  padding-left: 0.4rem;
  line-height: 1.5; }
  ul li, ol li {
    margin-bottom: 1.44rem; }
    ul li:last-of-type, ol li:last-of-type {
      margin-bottom: 0; }

ul {
  list-style: circle outside;
  padding-left: 2rem; }

ol {
  list-style: decimal inside; }

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
  padding-left: 3rem; }


label {
  display: block;
  font-size: 1.4rem;
  font-weight: 700;
  line-height: 1.6;
  color: #222222;
  transition: 200ms; }

input:not([type="submit"]):not([type="button"]):not([type="checkbox"]):not([type="radio"]), textarea {
  width: 100%;
  max-width: 50rem;
  padding: .8rem 3.4rem .8rem 1.6rem;
  display: block;
  line-height: 1;
  background-color: #ededed;
  border: none;
  border-radius: 0.4rem;
  -webkit-appearance: none;
  transition: 200ms;
  outline: none;
  outline-width: 0; }

.field-type-input label, .field-type-textarea label {
  padding-left: 1rem;
  text-transform: uppercase;
  letter-spacing: .15rem; }

.shiftr-form .field {
  position: relative; }
  .shiftr-form .field::after {
    content: "";
    display: block;
    position: absolute;
    width: .8rem;
    height: .8rem;
    top: 50%;
    right: 1rem;
    transform: translateY(-50%);
    border-radius: .5rem;
    background-color: transparent;
    transition: 200ms cubic-bezier(0.2, 0.7, 0.5, 1.3); }
  .shiftr-form .field.field-event-success::after {
    background-color: #04BF2F; }
  .shiftr-form .field.field-event-error::after {
    background-color: #E30617; }
  .shiftr-form .field.field-event-focus::after {
    background-color: #42C2FF; }

textarea {
  line-height: 1.6;
  resize: none; }

select {
  width: 100%;
  height: 4rem;
  padding: .8rem 3.4rem .8rem 1.6rem;
  display: block;
  line-height: 1.6;
  background-color: #ededed;
  border: none;
  border-radius: 0.4rem;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  outline: 0; }

.field-type-checkbox input {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  opacity: 0; }
  .field-type-checkbox input:checked + label span.custom-checkbox::after {
    transform: scale(1); }

.field-type-checkbox span.custom-checkbox {
  width: 1.4rem;
  height: 1.4rem;
  display: block;
  position: absolute;
  top: calc( 50% - .1rem);
  left: 0;
  transform: translateY(-50%);
  z-index: 10;
  border-radius: .4rem;
  border: 0.1rem solid #E44BB0; }
  .field-type-checkbox span.custom-checkbox::after {
    content: "";
    display: block;
    position: absolute;
    width: 1rem;
    height: 1rem;
    top: .1rem;
    left: .1rem;
    border-radius: .3rem;
    background-color: #E44BB0;
    transform: scale(0);
    transition: 200ms cubic-bezier(0.2, 0.7, 0.5, 1.3); }

.field-type-checkbox label {
  padding-bottom: 0;
  padding-left: 2.5rem;
  position: relative;
  display: inline-block;
  z-index: 20;
  vertical-align: middle; }

@media screen and (min-width: 768px) {
  .field-type-checkbox {
    margin-bottom: 0; } }

.field-type-radio .sub-field-radio {
  position: relative; }
  .field-type-radio .sub-field-radio input {
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    opacity: 0; }
    .field-type-radio .sub-field-radio input:checked + label span.custom-radio::after {
      transform: scale(1); }
  .field-type-radio .sub-field-radio span.custom-radio {
    width: 1.4rem;
    height: 1.4rem;
    display: block;
    position: absolute;
    top: calc( 50% - .1rem);
    left: 0;
    transform: translateY(-50%);
    z-index: 10;
    border-radius: .4rem;
    border: 0.1rem solid #E44BB0; }
    .field-type-radio .sub-field-radio span.custom-radio::after {
      content: "";
      display: block;
      position: absolute;
      width: 1rem;
      height: 1rem;
      top: .1rem;
      left: .1rem;
      border-radius: .3rem;
      background-color: #E44BB0;
      transform: scale(0);
      transition: 200ms cubic-bezier(0.2, 0.7, 0.5, 1.3); }
  .field-type-radio .sub-field-radio label {
    padding-bottom: 0;
    padding-left: 2.5rem;
    position: relative;
    display: inline-block;
    z-index: 20;
    vertical-align: middle; }

@media screen and (min-width: 768px) {
  .field-type-radio {
    margin-bottom: 0; } }



table {
  width: 100%;
  margin-bottom: 2.4rem;
  line-height: 1.6; }
  table th {
    padding-bottom: 0rem;
    color: #080808;
    font-size: 2rem;
    font-weight: 700;
    line-height: 1.5;
    text-align: left; }
  table td {
    padding-top: 1.8rem;
    padding-bottom: 0.5rem;
    border-bottom: 0.1rem solid #080808;
    font-size: 1.6rem;
    font-weight: 400;
    line-height: 1.6; }


* {
  box-sizing: border-box; }

img, video {
  max-width: 100%;
  height: auto;
  display: block; }

*::selection {
  color: #FAFAFA;
  background-color: #444BB0;
  text-shadow: none; }

body {
  width: 100%;
  max-width: 100%;
  position: relative;
  overflow-x: hidden;
  background-color: #FAFAFA;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }
  body.no-scroll {
    overflow-y: hidden; }

main {
  padding-top: 12rem;
  position: relative;
  background-color: #FAFAFA; }

section.contain, .header-primary, .footer-primary, .hero-standard .content, .hero-carousel .content {
  width: 100%;
  padding-left: 1rem;
  padding-right: 1rem; }
  section.contain > div, .header-primary > div, .footer-primary > div, .hero-standard .content > div, .hero-carousel .content > div {
    max-width: 124rem;
    margin: 0 auto; }
  @media screen and (min-width: 768px) {
    section.contain, .header-primary, .footer-primary, .hero-standard .content, .hero-carousel .content {
      padding-left: 2rem;
      padding-right: 2rem; } }

section.contain {
  padding-top: 4rem;
  padding-bottom: 4rem; }

section.full-width {
  padding: 4rem 1rem; }
  @media screen and (min-width: 768px) {
    section.full-width {
      padding: 4rem 2rem; } }

section.grey {
  margin-top: 4rem;
  margin-bottom: 4rem;
  padding-top: 4rem;
  padding-bottom: 4rem;
  background-color: #ededed; }


.header-primary {
  width: 100%;
  height: 6rem;
  padding: 1rem;
  position: fixed;
  z-index: 999;
  overflow: hidden;
  background-color: rgba(237, 237, 237, 0.96);
  -webkit-backdrop-filter: blur(2px);
  box-shadow: 0 0 8rem rgba(110, 110, 110, 0.4);
  transition: 400ms cubic-bezier(0.2, 0.7, 0.5, 1.1); }
  .header-primary .logo {
    height: 4rem;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 50; }
    .header-primary .logo svg {
      min-height: 100%; }
  .header-primary > div {
    height: 100%;
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: center; }
    .header-primary > div > div:not(.toggle) {
      display: flex;
      align-items: center; }
      .header-primary > div > div:not(.toggle) span {
        margin-left: 4rem;
        color: #944bb0;
        font-size: 2rem;
        font-weight: 400;
        line-height: 1; }
  .header-primary.slider {
    height: 26.2rem; }
  @media screen and (min-width: 768px) {
    .header-primary {
      padding: 1rem 2rem; } }
  @media screen and (min-width: 1024px) {
    .header-primary {
      overflow: visible; }
      .header-primary .logo {
        position: relative; } }


.footer-primary {
  margin: 0 auto;
  padding: 4rem 1rem;
  position: relative;
  background-color: #ededed; }
  .footer-primary p {
    margin: 0; }
  .footer-primary .footer-info {
    display: flex;
    justify-content: space-between; }
  .footer-primary small.creator {
    margin: 0;
    color: #080808;
    font-size: 1.4rem;
    line-height: 1.6; }


nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0; }
  nav ul a {
    cursor: pointer;
    line-height: 1.6;
    transition: 300ms; }
    nav ul a:hover {
      color: #E44BB0; }
  nav ul span {
    display: inline-block; }

.main-nav {
  width: 100%;
  margin: 0;
  padding: 0;
  padding-top: 5rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 20; }
  .main-nav ul {
    width: auto;
    margin: 0 auto;
    padding: 3rem 0;
    display: block;
    position: relative; }
    .main-nav ul li {
      margin-bottom: .8rem;
      display: block;
      font-size: 2rem;
      font-weight: 700;
      text-align: right;
      line-height: 1; }
      .main-nav ul li a {
        padding: .8rem 0;
        color: #080808;
        font-weight: 300; }
        .main-nav ul li a.active {
          color: #E44BB0; }
        .main-nav ul li a::after {
          display: none; }
        .main-nav ul li a:hover {
          color: #E44BB0; }
      .main-nav ul li.parent {
        position: relative; }
        .main-nav ul li.parent .sub-menu {
          margin-top: 1rem;
          padding: 1rem;
          display: none;
          position: relative;
          background-color: #ededed; }
      .main-nav ul li.show .sub-menu {
        display: block; }
      .main-nav ul li:last-of-type {
        margin-bottom: 0; }
    .main-nav ul#menu-primary::before {
      content: "";
      display: block;
      position: absolute;
      width: 100%;
      height: .1rem;
      top: 0;
      left: 0;
      background-color: #c7c7c7;
      border-radius: .05rem; }
  @media screen and (min-width: 768px) {
    .main-nav {
      width: 50%;
      left: auto;
      right: 0; } }
  @media screen and (min-width: 1024px) {
    .main-nav {
      width: auto;
      padding: 0;
      display: block;
      position: relative; }
      .main-nav ul {
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center; }
        .main-nav ul li {
          height: 4rem;
          margin: 0 2rem 0 0;
          font-size: 1.6rem;
          text-align: left; }
          .main-nav ul li.parent {
            position: relative; }
            .main-nav ul li.parent .sub-menu {
              min-width: calc( 100% + 4rem);
              margin-top: 0;
              padding: 1rem 2rem;
              position: absolute;
              top: calc( 100% + 1rem);
              left: -2rem;
              background-color: rgba(237, 237, 237, 0.96);
              -webkit-backdrop-filter: blur(2px);
              box-shadow: 0 4rem 4rem rgba(110, 110, 110, 0.2); }
              .main-nav ul li.parent .sub-menu::before {
                content: "";
                display: block;
                position: absolute;
                width: calc( 100% - 2rem);
                height: .1rem;
                top: 0;
                left: 1rem;
                background-color: #e1e1e1; }
              .main-nav ul li.parent .sub-menu li {
                margin: 0 0 .8rem; }
                .main-nav ul li.parent .sub-menu li:last-of-type {
                  margin-bottom: 0; }
          .main-nav ul li.show .sub-menu {
            display: block; }
          .main-nav ul li:last-of-type {
            margin-bottom: 0;
            margin-right: 0; }
        .main-nav ul#menu-primary::before {
          display: none; } }


.toggle {
  width: 2.6rem;
  height: 4rem;
  padding: 1.55rem 0;
  display: inline-block;
  position: absolute;
  top: 0;
  right: 0;
  cursor: pointer;
  z-index: 50;
  transition: 400ms; }
  .toggle span {
    width: 2.6rem;
    height: .1rem;
    display: block;
    position: absolute;
    left: 0;
    background-color: #080808; }
  .toggle span.before {
    transition: transform 250ms 350ms ease-in, opacity 0ms 350ms;
    transform-origin: 50% 50%; }
    .toggle span.before:nth-child(1) {
      top: 1.6rem; }
    .toggle span.before:nth-child(2) {
      bottom: 1.6rem; }
  .toggle span.after {
    top: 2rem;
    visibility: hidden;
    transition: transform 150ms 200ms ease-out, visibility 0ms 350ms;
    transform-origin: 50% 50%; }
  .toggle.transition span.before {
    transition: transform 100ms ease-out, opacity 0ms 200ms;
    opacity: 0; }
    .toggle.transition span.before:nth-child(1) {
      transform: translate(0, 0.4rem); }
    .toggle.transition span.before:nth-child(2) {
      transform: translate(0, -0.4rem); }
  .toggle.transition span.after {
    visibility: visible;
    transition: transform 150ms 200ms ease-out, visibility 0ms 200ms; }
    .toggle.transition span.after:nth-of-type(3) {
      transform: rotateZ(45deg); }
    .toggle.transition span.after:nth-of-type(4) {
      visibility: visible;
      transition: transform 150ms 200ms ease-out, visibility 0ms 200ms;
      transform: rotateZ(-45deg); }
  @media screen and (min-width: 1024px) {
    .toggle {
      display: none; } }


.hero-standard, .hero-carousel {
  width: 100%;
  margin: 0;
  position: relative;
  display: block; }
  .hero-standard .background, .hero-carousel .background {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    overflow: hidden;
    opacity: 1; }
    .hero-standard .background img, .hero-carousel .background img {
      z-index: -1;
      width: 100%;
      height: 100%;
      -o-object-fit: cover;
         object-fit: cover;
      -o-object-position: 50% 50%;
         object-position: 50% 50%; }
  .hero-standard .content, .hero-carousel .content {
    position: absolute;
    top: calc( 50% + 3rem);
    left: 0;
    z-index: 100;
    transform: translateY(-50%); }
    .hero-standard .content h1, .hero-carousel .content h1, .hero-standard .content p, .hero-carousel .content p {
      color: #FAFAFA; }
    .hero-standard .content h1, .hero-carousel .content h1 {
      max-width: 40rem;
      font-weight: 700; }
    .hero-standard .content p, .hero-carousel .content p {
      font-size: 2.4rem;
      font-weight: 300; }
  .hero-standard + main, .hero-carousel + main {
    padding-top: 0; }

.hero-standard {
  height: 50vh; }

.hero-carousel {
  height: 67vh;
  position: relative; }
  .hero-carousel .stage {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 50;
    overflow: hidden; }
    .hero-carousel .stage .prop {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 50;
      transition: transform 800ms ease-in-out, opacity 600ms 200ms ease;
      opacity: 0;
      transform: scale(1.1); }
      .hero-carousel .stage .prop img {
        width: 100%;
        height: 100%;
        -o-object-fit: cover;
           object-fit: cover; }
      .hero-carousel .stage .prop.active {
        z-index: 100;
        opacity: 1;
        transform: scale(1); }
  .hero-carousel .stage-map {
    width: 100%;
    max-width: 80rem;
    padding: 0 1.2rem;
    position: absolute;
    left: 50%;
    bottom: -1rem;
    display: flex;
    justify-content: center;
    z-index: 100;
    transform: translateX(-50%); }
    .hero-carousel .stage-map button {
      min-width: 4.8rem;
      width: 5rem;
      height: 4.8rem;
      margin-right: 2rem;
      padding: 0;
      cursor: pointer;
      border-radius: 1rem;
      border: none;
      background-color: transparent;
      outline: none;
      -webkit-appearance: none;
         -moz-appearance: none;
              appearance: none;
      transition: 300ms; }
      .hero-carousel .stage-map button span {
        width: 100%;
        height: .4rem;
        display: block;
        background-color: rgba(250, 250, 250, 0.4);
        border-radius: .2rem;
        transition: 400ms; }
      .hero-carousel .stage-map button:last-of-type {
        margin-bottom: 0; }
      .hero-carousel .stage-map button.active span {
        background-color: #FAFAFA; }
      .hero-carousel .stage-map button:hover span {
        background-color: #E44BB0; }
  .hero-carousel .overlay {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 75;
    background: linear-gradient(0deg, rgba(8, 8, 8, 0.6) 0%, rgba(8, 8, 8, 0.3) 100%); }
  .hero-carousel .content {
    z-index: 100;
    transition: transform 800ms ease-out, opacity 600ms 200ms ease;
    opacity: 0;
    transform: translateY(0);
    transform-origin: 0 50%; }
    .hero-carousel .content.load {
      opacity: 1;
      transform: translateY(-50%); }


.shiftr-form {
  max-width: 50rem;
  margin: 0 auto;
  position: relative; }
  .shiftr-form .field {
    margin-bottom: 1rem;
    display: block; }
    .shiftr-form .field:last-of-type {
      margin-bottom: 0; }

.shiftr-form-general .field-group-closure {
  display: flex;
  justify-content: space-between;
  align-items: center; }
  .shiftr-form-general .field-group-closure .field-type-checkbox {
    margin-right: 4rem;
    margin-bottom: 0; }


@media screen and (min-width: 768px) {
  .gallery {
    display: -ms-grid;
    display: grid;
    grid-gap: 2rem;
    -ms-grid-columns: 1fr 1fr;
    grid-template-columns: 1fr 1fr; } }

@media screen and (min-width: 1024px) {
  .gallery {
    -ms-grid-columns: 1fr 1fr 1fr 1fr;
    grid-template-columns: 1fr 1fr 1fr 1fr; } }

.gallery-item {
  width: 100%;
  margin-bottom: 2rem;
  padding-top: 75%;
  position: relative;
  cursor: pointer;
  transition: 200ms ease; }
  .gallery-item:last-of-type {
    margin-bottom: 0; }
  .gallery-item img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    -o-object-fit: cover;
       object-fit: cover;
    -o-object-position: 50% 50%;
       object-position: 50% 50%; }
  .gallery-item:hover {
    box-shadow: 0 0 2rem rgba(8, 8, 8, 0.2); }
  @media screen and (min-width: 768px) {
    .gallery-item {
      margin-bottom: 0; } }

.gallery-viewer {
  width: 100vw;
  height: 100vh;
  padding: 2rem 0;
  display: none;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
  background-color: rgba(8, 8, 8, 0.9);
  transition: 200ms;
  opacity: 0; }
  .gallery-viewer img {
    max-width: 100%;
    max-height: 100%;
    z-index: 10;
    opacity: 0;
    transform: scale(0.8);
    transition: 400ms cubic-bezier(0.2, 0.7, 0.5, 1.2); }
  .gallery-viewer button {
    width: 4.8rem;
    height: 4.8rem;
    padding: 1.4rem;
    position: absolute;
    bottom: 1rem;
    z-index: 20;
    background-color: transparent;
    border: none;
    border-radius: 0;
    outline: none;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    cursor: pointer; }
    .gallery-viewer button svg {
      width: 2rem;
      height: 2rem;
      fill: rgba(250, 250, 250, 0.8);
      transition: 300ms; }
    .gallery-viewer button.previous {
      left: 0;
      transform: rotate(180deg); }
    .gallery-viewer button.next {
      right: 0; }
    .gallery-viewer button.close {
      top: 0;
      right: 0; }
    @media screen and (min-width: 768px) {
      .gallery-viewer button {
        bottom: calc( 50% - 2.4rem); }
        .gallery-viewer button:hover svg {
          fill: #fafafa; }
        .gallery-viewer button.previous {
          left: 2rem; }
        .gallery-viewer button.next {
          right: 2rem; }
        .gallery-viewer button.close {
          top: .6rem;
          right: .6rem; } }
  .gallery-viewer.pre {
    display: flex; }
  .gallery-viewer.display {
    opacity: 1; }
    .gallery-viewer.display img {
      opacity: 1;
      transform: scale(1); }
  @media screen and (min-width: 768px) {
    .gallery-viewer {
      padding: 2rem; } }



.blog-layout > div {
  position: relative; }

@media screen and (min-width: 1024px) {
  .blog-layout > div {
    display: -ms-grid;
    display: grid;
    grid-gap: 2rem;
    -ms-grid-rows: auto;
    -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr 2rem 1fr;
        grid-template: "main main main side" auto / 1fr  1fr 1fr 1fr; }
    .blog-layout > div .blog-list {
      grid-area: main; }
    .blog-layout > div .blog-sidebar {
      grid-area: side; } }

@media screen and (min-width: 1024px) {
  .blog-layout > div .blog-list {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 5; }
  .blog-layout > div .blog-sidebar {
    -ms-grid-row: 1;
    -ms-grid-column: 7; } }

.blog-layout article p, .blog-layout article h2, .blog-layout article h3, .blog-layout article h4, .blog-layout article h5, .blog-layout article h6 {
  margin-left: auto;
  margin-right: 0; }

.blog-layout article h2 {
  margin-bottom: 1.44rem; }

.blog-layout article h3 {
  margin-bottom: 1.44rem; }

.blog-layout article img {
  margin-bottom: 2.88rem; }

.blog-list .single {
  margin-bottom: 2rem;
  padding: 2rem;
  background-color: #ededed;
  border-radius: .4rem; }
  .blog-list .single .image {
    max-height: 20rem;
    margin-bottom: 1rem;
    overflow: hidden;
    position: relative;
    border-radius: .4rem; }
    .blog-list .single .image img {
      width: 100%;
      height: 100%;
      -o-object-fit: cover;
         object-fit: cover;
      -o-object-position: 50% 50%;
         object-position: 50% 50%; }
  .blog-list .single h3 {
    width: 100%;
    margin-bottom: 1rem;
    -o-object-fit: cover;
       object-fit: cover; }
  .blog-list .single .details {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between; }
    .blog-list .single .details span.date {
      display: inline-block; }
  .blog-list .single:last-of-type {
    margin-bottom: 0; }
  @media screen and (min-width: 768px) {
    .blog-list .single {
      display: -ms-grid;
      display: grid;
      grid-gap: 2rem;
      -ms-grid-rows: auto;
      -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr;
          grid-template: "image details details" auto / 1fr 1fr 1fr; }
      .blog-list .single .image {
        grid-area: image;
        margin-bottom: 0; }
      .blog-list .single .details {
        grid-area: details;
        display: block; } }
  @media screen and (min-width: 768px) {
    .blog-list .single .image {
    -ms-grid-row: 1;
    -ms-grid-column: 1; }
    .blog-list .single .details {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 3; } }

.blog-sidebar {
  display: none; }
  @media screen and (min-width: 1024px) {
    .blog-sidebar {
      padding: 2rem;
      display: block;
      align-self: flex-start;
      background-color: #ededed;
      border-radius: .4rem;
      transition: box-shadow 200ms ease; }
      .blog-sidebar .widget {
        margin-bottom: 2.88rem; }
        .blog-sidebar .widget:last-of-type {
          margin-bottom: 0; }
      .blog-sidebar h4 {
        margin-bottom: 1rem;
        color: #444BB0; }
      .blog-sidebar ul {
        list-style-type: none;
        margin-bottom: 0;
        padding-left: 0; }
      .blog-sidebar li a::after {
        background-color: #080808;
        transform: scaleX(0); }
      .blog-sidebar li a:hover {
        color: #E44BB0; }
        .blog-sidebar li a:hover::after {
          transform: scaleX(1); }
      .blog-sidebar .search input {
        background-color: #FAFAFA; }
      .blog-sidebar.sticky {
        position: fixed;
        box-shadow: 0 0 2rem rgba(34, 34, 34, 0.2); }
      .blog-sidebar.pause {
        align-self: flex-end; } }

.searched {
  color: #FAFAFA; }

body.single.post article {
  max-width: 68.4rem;
  margin-left: auto;
  margin-right: auto; }


.alignnone {
  margin: 5px 20px 20px 0; }

.aligncenter,
div.aligncenter {
  display: block;
  margin: 5px auto 5px auto; }

.alignright {
  float: right;
  margin: 5px 0 20px 20px; }

.alignleft {
  float: left;
  margin: 5px 20px 20px 0; }

a img.alignright {
  float: right;
  margin: 5px 0 20px 20px; }

a img.alignnone {
  margin: 5px 20px 20px 0; }

a img.alignleft {
  float: left;
  margin: 5px 20px 20px 0; }

a img.aligncenter {
  display: block;
  margin-left: auto;
  margin-right: auto; }

.wp-caption {
  background: #fff;
  border: 1px solid #f0f0f0;
  max-width: 96%;
  
  padding: 5px 3px 10px;
  text-align: center; }

.wp-caption.alignnone {
  margin: 5px 20px 20px 0; }

.wp-caption.alignleft {
  margin: 5px 20px 20px 0; }

.wp-caption.alignright {
  margin: 5px 0 20px 20px; }

.wp-caption img {
  border: 0 none;
  height: auto;
  margin: 0;
  max-width: 98.5%;
  padding: 0;
  width: auto; }

.wp-caption p.wp-caption-text {
  font-size: 11px;
  line-height: 17px;
  margin: 0;
  padding: 0 4px 5px; }


.screen-reader-text {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  -webkit-clip-path: inset(50%);
          clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute !important;
  width: 1px;
  word-wrap: normal !important;
   }

.screen-reader-text:focus {
  background-color: #eee;
  clip: auto !important;
  -webkit-clip-path: none;
          clip-path: none;
  color: #444;
  display: block;
  font-size: 1em;
  height: auto;
  left: 5px;
  line-height: normal;
  padding: 15px 23px 14px;
  text-decoration: none;
  top: 5px;
  width: auto;
  z-index: 100000;
   }


@media screen and (prefers-reduced-motion: reduce), (update: slow) {
  * {
    animation-duration: .001ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: .001ms !important; } }




/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
