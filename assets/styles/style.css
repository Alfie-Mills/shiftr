/*

	//  //// --|    Style.scss

*/
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
@import url("https://fonts.googleapis.com/css?family=Nunito:300,400,700");
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0; }

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block; }

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1em 40px; }

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
     * Add the correct display in IE.
     */
main {
  display: block; }

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit; }

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder; }

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic; }

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000; }

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%; }

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block; }

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none; }

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden; }

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible; }

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none; }

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */ }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible; }

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
     * Correct the padding in Firefox.
     */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */ }

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto; }

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block; }

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item; }

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block; }

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block; }

/**
     * Add the correct display in IE.
     */
template {
  display: none; }

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none; }

/*

    //  //// --|    Settings

*/
/*

    //  //// --|    Placeholders

*/
.hero-standard .content h1, .hero-carousel .content h1, .hero-standard .content p, .hero-carousel .content p {
  text-shadow: 0 0 1.8rem rgba(110, 110, 110, 0.8); }

/*

    //  //// --|    Functions

*/
/*

    //  //// --|    Mixins

*/
/*

    //  //// --|    Grid & Layouts

*/
/*

    //  //// --|    Features

*/
.top, .bottom {
  position: absolute;
  top: 0;
  left: 0; }

.top {
  z-index: 2;
  transition: 300ms; }
  .top:hover {
    opacity: 0; }

.bottom {
  z-index: 1; }

/*

	//  //// --|    Core

*/
* {
  box-sizing: border-box; }

img, video {
  max-width: 100%;
  height: auto;
  display: block; }

*::selection {
  color: #FAFAFA;
  background-color: #444BB0;
  text-shadow: none; }

body {
  width: 100%;
  max-width: 100%;
  position: relative;
  overflow-x: hidden;
  background-color: #FAFAFA; }

section.contain, .header-primary, footer, .hero-standard .content, .hero-carousel .content {
  width: 100%;
  padding-left: 1rem;
  padding-right: 1rem; }
  section.contain > div, .header-primary > div, footer > div, .hero-standard .content > div, .hero-carousel .content > div {
    max-width: 124rem;
    margin: 0 auto; }
  @media screen and (min-width: 768px) {
    section.contain, .header-primary, footer, .hero-standard .content, .hero-carousel .content {
      padding-left: 2rem;
      padding-right: 2rem; } }

main {
  min-height: calc( 100vh - 5rem);
  padding-top: 12rem;
  position: relative;
  background-color: #FAFAFA; }

section.contain {
  padding-top: 4rem;
  padding-bottom: 4rem; }

section.free {
  padding: 4rem 1rem; }
  @media screen and (min-width: 768px) {
    section.free {
      padding: 4rem 2rem; } }

section.grey {
  background-color: #ededed; }

section.gradient {
  padding-top: 8rem;
  padding-bottom: 8rem;
  background: #944bb0;
  background: linear-gradient(135deg, #E44BB0 0%, #444BB0 100%);
  color: #FAFAFA; }
  section.gradient h2 {
    color: #FAFAFA; }

/*

    //  //// --|    Header

*/
.header-primary {
  width: 100%;
  height: 6rem;
  padding: 1rem;
  position: fixed;
  z-index: 999;
  background-color: rgba(237, 237, 237, 0.96);
  -webkit-backdrop-filter: blur(2px);
  box-shadow: 0 0 8rem rgba(110, 110, 110, 0.4);
  transition: 400ms cubic-bezier(0.2, 0.7, 0.5, 1.1); }
  .header-primary .logo {
    min-height: 100%;
    position: absolute;
    top: 0;
    left: 0; }
    .header-primary .logo svg {
      min-height: 100%; }
  .header-primary > div {
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: center; }
    .header-primary > div > div:not(.toggle) {
      display: flex;
      align-items: center; }
      .header-primary > div > div:not(.toggle) span {
        margin-left: 4rem;
        color: #944bb0;
        font-size: 2rem;
        font-weight: 400;
        line-height: 1; }
  .header-primary.slider {
    height: 26.2rem; }
  @media screen and (min-width: 768px) {
    .header-primary {
      padding: 1rem 2rem; } }
  @media screen and (min-width: 1024px) {
    .header-primary .logo {
      position: relative; } }

/*

    //  //// --|    Footer

*/
footer {
  margin: 0 auto;
  padding: 4rem 1rem;
  position: relative;
  background-color: #ededed; }
  footer p {
    margin: 0; }
  footer .footer-info {
    display: flex;
    justify-content: space-between; }
  footer small.creator {
    margin: 0;
    color: #080808;
    font-size: 1.4rem;
    line-height: 1.6; }

/*

    //  //// --|    Typography

*/
p, h1, h2, h3, h4, h5, h6 {
  margin: 0;
  padding: 0;
  border: 0; }

html {
  font-size: 62.5%; }

body, input, textarea, button {
  font-family: "Nunito", sans-serif;
  font-size: 1.8rem;
  font-weight: 400;
  font-style: normal;
  color: #222222; }

p {
  max-width: 68.4rem;
  margin-bottom: 2.88rem;
  line-height: 1.6;
  text-align: left; }
  p:last-child {
    margin-bottom: 0; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Nunito", sans-serif;
  font-weight: 700;
  text-align: left;
  text-transform: capitalize;
  line-height: 1.5;
  color: #080808; }

article h2 {
  margin-bottom: 1.44rem; }

article h3 {
  margin-bottom: 1.44rem; }

h1 {
  font-size: 4rem;
  max-width: 68.4rem; }

h2 {
  font-size: 3.2rem;
  max-width: 68.4rem; }

h3 {
  font-size: 2.6rem;
  max-width: 68.4rem; }

h4 {
  font-size: 2.2rem;
  max-width: 68.4rem; }

h5 {
  font-size: 1.8rem;
  max-width: 68.4rem; }

h6 {
  font-size: 1.4rem;
  max-width: 68.4rem; }

a {
  color: #E44BB0;
  line-height: 1.6;
  text-decoration: none;
  transition: 300ms; }
  a:hover {
    color: #444BB0; }

a + p {
  margin-top: 2.88rem; }

p > a, li:not(.menu-item) > a, small > a, .link {
  display: inline-block;
  position: relative;
  color: inherit;
  font-weight: 700; }
  p > a::after, li:not(.menu-item) > a::after, small > a::after, .link::after {
    content: "";
    display: block;
    position: absolute;
    width: 100%;
    height: .1rem;
    background-color: #E44BB0;
    transition: 300ms;
    transform: scaleX(1); }
  p > a:hover, li:not(.menu-item) > a:hover, small > a:hover, .link:hover {
    color: #E44BB0; }
    p > a:hover::after, li:not(.menu-item) > a:hover::after, small > a:hover::after, .link:hover::after {
      transform: scaleX(0); }

/*

    //  //// --|    Lists - Ordered & Unordered

*/
ul, ol {
  margin-top: 0;
  margin-bottom: 2.4rem;
  padding-left: 0.4rem;
  line-height: 1.5; }
  ul li, ol li {
    margin-bottom: 1.44rem; }
    ul li:last-of-type, ol li:last-of-type {
      margin-bottom: 0; }

ul {
  list-style: circle outside;
  padding-left: 2rem; }

ol {
  list-style: decimal inside; }

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
  padding-left: 3rem; }

/*

    //  //// --|    Buttons

*/
.button,
button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  margin: 0;
  padding: 0.6rem 2rem;
  display: inline-block;
  border: 0.1rem solid transparent;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  line-height: 1.5;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: .1rem;
  transition: 300ms;
  cursor: pointer; }

.button,
button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  color: #FAFAFA;
  background-color: #444BB0; }
  .button:hover,
  button:hover,
  input[type="submit"]:hover,
  input[type="reset"]:hover,
  input[type="button"]:hover {
    color: #FAFAFA;
    background-color: #E44BB0; }

input[type="submit"] {
  margin: 0; }
  input[type="submit"].submitting {
    animation: pulsing 2s infinite forwards; }

@keyframes pulsing {
  0% {
    background-color: #444BB0; }
  50% {
    background-color: #E44BB0; }
  100% {
    background-color: #444BB0; } }

/*

    //  //// --|    Inputs & Labels

*/
label {
  display: block;
  font-size: 1.4rem;
  font-weight: 700;
  line-height: 1.5;
  color: #3b3b3b;
  transition: 200ms; }
  label.success {
    color: #04BF2F; }
  label.error {
    color: #E30617; }
  label.focus {
    color: #444BB0; }

input[type="name"],
input[type="email"],
input[type="number"],
input[type="search"],
input[type="text"],
input[type="tel"],
input[type="url"],
input[type="password"],
textarea {
  width: 100%;
  max-width: 50rem;
  margin-left: auto;
  margin-right: auto;
  padding: .5rem 1rem;
  display: block;
  line-height: 1;
  background-color: #ededed;
  border: none;
  border-radius: 0.4rem;
  -webkit-appearance: none;
  transition: 200ms;
  outline: none;
  outline-width: 0; }
  input[type="name"]:-webkit-autofill, input[type="name"]:-webkit-autofill:hover, input[type="name"]:-webkit-autofill:focus, input[type="name"]:-webkit-autofill:active,
  input[type="email"]:-webkit-autofill,
  input[type="email"]:-webkit-autofill:hover,
  input[type="email"]:-webkit-autofill:focus,
  input[type="email"]:-webkit-autofill:active,
  input[type="number"]:-webkit-autofill,
  input[type="number"]:-webkit-autofill:hover,
  input[type="number"]:-webkit-autofill:focus,
  input[type="number"]:-webkit-autofill:active,
  input[type="search"]:-webkit-autofill,
  input[type="search"]:-webkit-autofill:hover,
  input[type="search"]:-webkit-autofill:focus,
  input[type="search"]:-webkit-autofill:active,
  input[type="text"]:-webkit-autofill,
  input[type="text"]:-webkit-autofill:hover,
  input[type="text"]:-webkit-autofill:focus,
  input[type="text"]:-webkit-autofill:active,
  input[type="tel"]:-webkit-autofill,
  input[type="tel"]:-webkit-autofill:hover,
  input[type="tel"]:-webkit-autofill:focus,
  input[type="tel"]:-webkit-autofill:active,
  input[type="url"]:-webkit-autofill,
  input[type="url"]:-webkit-autofill:hover,
  input[type="url"]:-webkit-autofill:focus,
  input[type="url"]:-webkit-autofill:active,
  input[type="password"]:-webkit-autofill,
  input[type="password"]:-webkit-autofill:hover,
  input[type="password"]:-webkit-autofill:focus,
  input[type="password"]:-webkit-autofill:active,
  textarea:-webkit-autofill,
  textarea:-webkit-autofill:hover,
  textarea:-webkit-autofill:focus,
  textarea:-webkit-autofill:active {
    -webkit-box-shadow: 0 0 0 30px #ededed inset !important; }
  input[type="name"].focus,
  input[type="email"].focus,
  input[type="number"].focus,
  input[type="search"].focus,
  input[type="text"].focus,
  input[type="tel"].focus,
  input[type="url"].focus,
  input[type="password"].focus,
  textarea.focus {
    box-shadow: 0 0 2rem rgba(34, 34, 34, 0.2); }

.input, .textarea {
  margin-bottom: 2rem;
  position: relative; }
  .input label, .textarea label {
    padding-left: 1rem;
    text-transform: uppercase;
    letter-spacing: .15rem; }
  @media screen and (min-width: 768px) {
    .input, .textarea {
      margin-bottom: 0; } }

.validation {
  padding: .4rem 1rem;
  position: absolute;
  right: 0;
  bottom: -.2rem;
  transform: translateY(100%) scale(0);
  transform-origin: 100% 0;
  opacity: 0;
  color: #080808;
  background-color: #FAFAFA;
  border-radius: .4rem;
  box-shadow: 0.5rem 0.5rem 2rem rgba(34, 34, 34, 0.4);
  font-size: 1.4rem;
  line-height: 1;
  z-index: 100;
  transition: 200ms; }
  .validation::before {
    content: "";
    display: block;
    position: absolute;
    width: 1rem;
    height: 1rem;
    top: -.1rem;
    right: 0;
    transform: translate(50%, -50%);
    background-color: #E30617;
    border-radius: 1rem; }
  .validation.pop {
    transform: translateY(100%) scale(1);
    opacity: 1; }

textarea {
  height: 9.64rem;
  line-height: 1.5;
  resize: none; }

select {
  height: 3.6rem;
  margin-bottom: 3rem;
  padding: 0.6rem 1rem;
  display: block;
  line-height: 1.6;
  background-color: #ededed;
  border: none;
  border-radius: 0.4rem;
  -webkit-appearance: none;
  -moz-appearance: none;
       appearance: none; }

.checkbox {
  margin-bottom: 2rem;
  position: relative;
  display: flex;
  align-items: center; }
  .checkbox label {
    display: inline-block;
    padding-bottom: 0;
    padding-left: 1rem;
    vertical-align: middle; }
  .checkbox .validation {
    left: 0;
    right: auto;
    transform-origin: 0 0; }
    .checkbox .validation::before {
      left: 0;
      right: auto;
      transform: translate(-50%, -50%); }
  @media screen and (min-width: 768px) {
    .checkbox {
      margin-bottom: 0; } }

/*

    //  //// --|    Code

*/
.code {
  width: 100%;
  margin: 7.2rem 0 7.2rem 0;
  text-align: left; }
  .code span {
    margin-bottom: 0.6rem;
    padding-left: 2%;
    display: block;
    color: #6e6e6e;
    font-size: 1.2rem;
    font-weight: 700;
    text-transform: uppercase; }

pre {
  width: 100%;
  margin: 0;
  padding: 1.75rem;
  background-color: #e1e1e1;
  border-radius: .4rem;
  overflow-x: scroll;
  font-size: 80%;
  line-height: 1.4;
  transition: 200ms; }
  pre code {
    width: 100%; }
  pre:hover {
    box-shadow: 0 0 1rem rgba(8, 8, 8, 0.2);
    background-color: #d4d4d4; }
  @media screen and (min-width: 768px) {
    pre {
      padding: 3.5rem; } }

/*

    //  //// --|    Table

*/
table {
  width: 100%;
  margin-bottom: 2.4rem;
  line-height: 1.6; }
  table th {
    padding-bottom: 0rem;
    color: #080808;
    font-size: 2rem;
    font-weight: 700;
    line-height: 1.5;
    text-align: left; }
  table td {
    padding-top: 1.8rem;
    padding-bottom: 0.5rem;
    border-bottom: 0.1rem solid #080808;
    font-size: 1.6rem;
    font-weight: 400;
    line-height: 1.6; }

/*

    //  //// --|    Navigation - Header

*/
nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0; }
  nav ul a {
    transition: 300ms; }
    nav ul a:hover {
      color: #E44BB0; }

.main-nav {
  width: 100%;
  margin: 0;
  padding: 0;
  padding-top: 5rem;
  position: relative;
  z-index: 10; }
  .main-nav ul {
    width: auto;
    margin: 0 auto;
    padding: 3rem 0;
    display: block;
    position: relative; }
    .main-nav ul li {
      padding: 1.2rem 0;
      display: block;
      font-size: 2rem;
      font-weight: 300;
      text-transform: uppercase;
      text-align: right;
      line-height: 1; }
      .main-nav ul li a {
        color: #080808;
        font-weight: 300; }
        .main-nav ul li a::after {
          display: none; }
        .main-nav ul li a:hover {
          color: #E44BB0; }
      .main-nav ul li.parent {
        position: relative; }
        .main-nav ul li.parent .sub-menu {
          display: none;
          position: absolute;
          top: 100%;
          left: 0;
          background-color: #FAFAFA; }
      .main-nav ul li.show .sub-menu {
        display: block; }
      .main-nav ul li.current_page_item a {
        color: #E44BB0; }
      .main-nav ul li:last-of-type {
        margin-right: 0; }
  @media screen and (min-width: 1024px) {
    .main-nav {
      width: auto;
      padding: 0;
      display: block; }
      .main-nav ul {
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center; }
        .main-nav ul li {
          margin: 0 1rem;
          font-size: 1.6rem; } }

.no-scroll {
  overflow-y: hidden; }

/*

    //  //// --|    Hamburger Menu Toggle

*/
.toggle {
  width: 2.6rem;
  height: 4rem;
  padding: 1.55rem 0;
  display: inline-block;
  position: absolute;
  top: 0;
  right: 0;
  cursor: pointer;
  z-index: 20;
  transition: 400ms; }
  .toggle span {
    width: 2.6rem;
    height: .1rem;
    display: block;
    position: absolute;
    left: 0;
    background-color: #080808; }
  .toggle span.before {
    transition: transform 250ms 350ms ease-in, opacity 0ms 350ms;
    transform-origin: 50% 50%; }
    .toggle span.before:nth-child(1) {
      top: 1.6rem; }
    .toggle span.before:nth-child(2) {
      bottom: 1.6rem; }
  .toggle span.after {
    top: 2rem;
    visibility: hidden;
    transition: transform 150ms 200ms ease-out, visibility 0ms 350ms;
    transform-origin: 50% 50%; }
  .toggle.transition span.before {
    transition: transform 100ms ease-out, opacity 0ms 200ms;
    opacity: 0; }
    .toggle.transition span.before:nth-child(1) {
      transform: translate(0, 0.4rem); }
    .toggle.transition span.before:nth-child(2) {
      transform: translate(0, -0.4rem); }
  .toggle.transition span.after {
    visibility: visible;
    transition: transform 150ms 200ms ease-out, visibility 0ms 200ms; }
    .toggle.transition span.after:nth-of-type(3) {
      transform: rotateZ(45deg); }
    .toggle.transition span.after:nth-of-type(4) {
      visibility: visible;
      transition: transform 150ms 200ms ease-out, visibility 0ms 200ms;
      transform: rotateZ(-45deg); }
  @media screen and (min-width: 1024px) {
    .toggle {
      display: none; } }

/*

    //  //// --|    Form

*/
.form {
  max-width: 50rem;
  margin: 0 auto;
  position: relative; }
  @media screen and (min-width: 768px) {
    .form {
      display: -ms-grid;
      display: grid;
      grid-gap: 2rem;
      -ms-grid-rows: auto 2rem auto 2rem auto;
      -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr 2rem 1fr;
          grid-template: "a a b b" auto "c c c c" auto "d d d e" auto / 1fr 1fr 1fr 1fr; }
      .form .input:first-of-type {
        grid-area: a; }
      .form .input:nth-of-type(2) {
        grid-area: b; }
      .form .textarea {
        grid-area: c; }
      .form .checkbox {
        grid-area: d; }
      .form .submit {
        grid-area: e; } }
  @media screen and (min-width: 768px){
    .form .input:first-of-type {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3; }
    .form .input:nth-of-type(2) {
    -ms-grid-row: 1;
    -ms-grid-column: 5;
    -ms-grid-column-span: 3; }
    .form .textarea {
    -ms-grid-row: 3;
    -ms-grid-column: 1;
    -ms-grid-column-span: 7; }
    .form .checkbox {
    -ms-grid-row: 5;
    -ms-grid-column: 1;
    -ms-grid-column-span: 5; }
    .form .submit {
    -ms-grid-row: 5;
    -ms-grid-column: 7; } }

.submission {
  width: calc( 100vw - 2rem);
  max-width: 40rem;
  padding: 1rem;
  display: flex;
  align-items: center;
  position: fixed;
  left: 1rem;
  bottom: 1rem;
  z-index: 9999;
  background-color: #FAFAFA;
  color: #080808;
  border-radius: .4rem;
  box-shadow: 0 0 4rem rgba(8, 8, 8, 0.2);
  transition: 200ms cubic-bezier(0.2, 0.7, 0.5, 1.2);
  opacity: 0;
  transform: translateY(4rem) scale(0.8); }
  .submission span:first-of-type {
    margin-bottom: 1rem;
    display: block;
    font-size: 2.2rem;
    font-weight: 700; }
  .submission button {
    margin: 0;
    align-self: flex-end; }
  .submission span:last-of-type {
    font-size: 1.4rem;
    font-weight: 700;
    text-transform: uppercase; }
  .submission.show {
    opacity: 1;
    transform: translateY(0) scale(1); }
  @media screen and (min-width: 768px) {
    .submission {
      left: 50%;
      bottom: 50%;
      transform: translate(-50%, calc( -50% + 4rem)) scale(0.8); }
      .submission.show {
        transform: translate(-50%, -50%) scale(1); } }
  @media screen and (min-width: 1024px) {
    .submission {
      position: absolute;
      left: 50%;
      bottom: 50%;
      transform: translate(-50%, 50%) scale(0.8); }
      .submission.show {
        transform: translate(-50%, 50%) scale(1); } }

/*

    //  //// --|    Hero - All Variations

*/
.hero-standard, .hero-carousel {
  width: 100%;
  margin: 0;
  position: relative;
  display: block; }
  .hero-standard .background, .hero-carousel .background {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    overflow: hidden;
    opacity: 1; }
    .hero-standard .background img, .hero-carousel .background img {
      z-index: -1;
      width: 100%;
      height: 100%;
      -o-object-fit: cover;
         object-fit: cover;
      -o-object-position: 50% 50%;
         object-position: 50% 50%; }
  .hero-standard .content, .hero-carousel .content {
    position: absolute;
    top: calc( 50% + 3rem);
    left: 0;
    z-index: 100;
    transform: translateY(-50%); }
    .hero-standard .content h1, .hero-carousel .content h1, .hero-standard .content p, .hero-carousel .content p {
      color: #FAFAFA; }
    .hero-standard .content h1, .hero-carousel .content h1 {
      max-width: 40rem;
      font-weight: 700; }
    .hero-standard .content p, .hero-carousel .content p {
      font-size: 2.4rem;
      font-weight: 300; }
  .hero-standard + main, .hero-carousel + main {
    padding-top: 0; }

.hero-standard {
  height: 50vh; }

.hero-carousel {
  height: 67vh;
  position: relative; }
  .hero-carousel .stage {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 50;
    overflow: hidden; }
    .hero-carousel .stage .prop {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 50;
      transition: transform 800ms ease-in-out, opacity 600ms 200ms ease;
      opacity: 0;
      transform: scale(1.1); }
      .hero-carousel .stage .prop img {
        width: 100%;
        height: 100%;
        -o-object-fit: cover;
           object-fit: cover; }
      .hero-carousel .stage .prop.active {
        z-index: 100;
        opacity: 1;
        transform: scale(1); }
  .hero-carousel .stage-map {
    width: 100%;
    max-width: 80rem;
    padding: 0 1.2rem;
    position: absolute;
    left: 50%;
    bottom: 1rem;
    display: flex;
    justify-content: center;
    z-index: 100;
    transform: translateX(-50%); }
    .hero-carousel .stage-map div {
      width: 100%;
      max-width: 12rem;
      height: 1.6rem;
      margin: 0 .2rem;
      padding: .6rem;
      cursor: pointer;
      border-radius: 1rem;
      transition: 300ms; }
      .hero-carousel .stage-map div span {
        width: 100%;
        height: .4rem;
        display: block;
        background-color: rgba(250, 250, 250, 0.4);
        border-radius: .2rem;
        transition: 400ms; }
      .hero-carousel .stage-map div.active span {
        background-color: #FAFAFA; }
      .hero-carousel .stage-map div:hover span {
        background-color: #E44BB0; }
  .hero-carousel .overlay {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 75;
    background: linear-gradient(0deg, rgba(8, 8, 8, 0.6) 0%, rgba(8, 8, 8, 0.3) 100%); }
  .hero-carousel .content {
    z-index: 100;
    transition: transform 800ms ease-out, opacity 600ms 200ms ease;
    opacity: 0;
    transform: translateY(0);
    transform-origin: 0 50%; }
    .hero-carousel .content.load {
      opacity: 1;
      transform: translateY(-50%); }

/*

    //  //// --|    Popup

*/
/*

    //  //// --|    Gallery

*/
@media screen and (min-width: 768px) {
  .gallery-list {
    display: -ms-grid;
    display: grid;
    grid-gap: 2rem;
    -ms-grid-rows: auto;
    -ms-grid-columns: 1fr 2rem 1fr;
        grid-template: "a b" auto / 1fr 1fr; }
  .gallery-list > .input:first-of-type {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 1; }
  .gallery-list > .input:nth-of-type(2) {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 1; } }

@media screen and (min-width: 1024px) {
  .gallery-list {
    -ms-grid-rows: auto;
    -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr 2rem 1fr;
        grid-template: "a b c d" auto / 1fr 1fr 1fr 1fr; }
  .gallery-list > .input:first-of-type {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 1; }
  .gallery-list > .input:nth-of-type(2) {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 1; }
  .gallery-list > .textarea {
    -ms-grid-row: 1;
    -ms-grid-column: 5;
    -ms-grid-column-span: 1; }
  .gallery-list > .checkbox {
    -ms-grid-row: 1;
    -ms-grid-column: 7;
    -ms-grid-column-span: 1; } }

.gallery-item {
  width: 100%;
  padding-top: 75%;
  position: relative;
  cursor: pointer;
  transition: 200ms ease; }
  .gallery-item img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    -o-object-fit: cover;
       object-fit: cover;
    -o-object-position: 50% 50%;
       object-position: 50% 50%; }
  .gallery-item:hover {
    box-shadow: 0 0 2rem rgba(8, 8, 8, 0.2); }

.gallery-viewer {
  width: 100vw;
  height: 100vh;
  padding: 4rem;
  display: none;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
  background-color: rgba(8, 8, 8, 0.9);
  transition: 200ms;
  opacity: 0; }
  .gallery-viewer img {
    max-width: 100%;
    max-height: 100%;
    opacity: 0;
    transform: scale(0.8);
    transition: 400ms cubic-bezier(0.2, 0.7, 0.5, 1.2); }
  .gallery-viewer.pre {
    display: flex; }
  .gallery-viewer.display {
    opacity: 1; }
    .gallery-viewer.display img {
      opacity: 1;
      transform: scale(1); }

/*

    //  //// --|    Listed Items (Thumbnails, Products etc...)

*/
.listed {
  list-style-type: none;
  padding: 0; }
  @media screen and (min-width: 768px) {
    .listed {
      display: -ms-grid;
      display: grid;
      grid-gap: 1rem;
      -ms-grid-rows: auto;
      -ms-grid-columns: 1fr 1rem 1fr;
          grid-template: "a  b" auto / 1fr 1fr; }
    .listed > .input:first-of-type {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 1; }
    .listed > .input:nth-of-type(2) {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 1; } }

/*

    //  //// --|    Cookie Consent Popup

*/
.shiftr-cookie-notice {
  width: calc( 100vw - 2rem);
  max-width: 50rem;
  padding: 2rem;
  position: fixed;
  left: 1rem;
  bottom: 1rem;
  z-index: 9999;
  background-color: rgba(237, 237, 237, 0.96);
  border: .2rem solid transparent;
  border-radius: .4rem;
  box-shadow: 0 2rem 4rem rgba(34, 34, 34, 0.4);
  transition: opacity 800ms 0ms ease-out, transform 800ms 0ms ease-in-out, border 400ms 0ms ease, background-color 400ms, box-shadow 400ms;
  opacity: 0;
  transform: translateY(100%); }
  .shiftr-cookie-notice p {
    margin-bottom: 1.44rem;
    font-size: 1.6rem; }
  .shiftr-cookie-notice.posted {
    opacity: 1;
    transform: translateY(0); }
  .shiftr-cookie-notice.accepted {
    border-color: #04BF2F; }
  .shiftr-cookie-notice:hover {
    background-color: #ededed;
    box-shadow: 0 2rem 6rem rgba(34, 34, 34, 0.4); }
  @media screen and (min-width: 768px) {
    .shiftr-cookie-notice {
      max-width: 30rem;
      transform: translateX(-100%); }
      .shiftr-cookie-notice.posted {
        transform: translateX(0); } }

/*

    //  //// --|    Page Name

*/
/*

    //  //// --|    The blog

*/
.blog-layout > div {
  position: relative; }

@media screen and (min-width: 1024px) {
  .blog-layout > div {
    display: -ms-grid;
    display: grid;
    grid-gap: 2rem;
    -ms-grid-rows: auto;
    -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr 2rem 1fr;
        grid-template: "main main main side" auto / 1fr  1fr 1fr 1fr; }
    .blog-layout > div .blog-list {
      grid-area: main; }
    .blog-layout > div .blog-sidebar {
      grid-area: side; } }

@media screen and (min-width: 1024px){
  .blog-layout > div .blog-list {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 5; }
  .blog-layout > div .blog-sidebar {
    -ms-grid-row: 1;
    -ms-grid-column: 7; } }

.blog-layout article p, .blog-layout article h2, .blog-layout article h3, .blog-layout article h4, .blog-layout article h5, .blog-layout article h6 {
  margin-left: auto;
  margin-right: 0; }

.blog-layout article img {
  margin-bottom: 2.88rem; }

.blog-list .single {
  margin-bottom: 2rem;
  padding: 2rem;
  background-color: #ededed;
  border-radius: .4rem; }
  .blog-list .single .image {
    max-height: 20rem;
    margin-bottom: 1rem;
    overflow: hidden;
    position: relative;
    border-radius: .4rem; }
    .blog-list .single .image img {
      width: 100%;
      height: 100%;
      -o-object-fit: cover;
         object-fit: cover;
      -o-object-position: 50% 50%;
         object-position: 50% 50%; }
  .blog-list .single h3 {
    width: 100%;
    margin-bottom: 1rem;
    -o-object-fit: cover;
       object-fit: cover; }
  .blog-list .single .details {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between; }
    .blog-list .single .details span.date {
      display: inline-block; }
  .blog-list .single:last-of-type {
    margin-bottom: 0; }
  @media screen and (min-width: 768px) {
    .blog-list .single {
      display: -ms-grid;
      display: grid;
      grid-gap: 2rem;
      -ms-grid-rows: auto;
      -ms-grid-columns: 1fr 2rem 1fr 2rem 1fr;
          grid-template: "image details details" auto / 1fr 1fr 1fr; }
      .blog-list .single .image {
        grid-area: image;
        margin-bottom: 0; }
      .blog-list .single .details {
        grid-area: details;
        display: block; } }
  @media screen and (min-width: 768px){
    .blog-list .single .image {
    -ms-grid-row: 1;
    -ms-grid-column: 1; }
    .blog-list .single .details {
    -ms-grid-row: 1;
    -ms-grid-column: 3;
    -ms-grid-column-span: 3; } }

.blog-sidebar {
  display: none; }
  @media screen and (min-width: 1024px) {
    .blog-sidebar {
      padding: 2rem;
      display: block;
      align-self: flex-start;
      background-color: #ededed;
      border-radius: .4rem;
      transition: box-shadow 200ms ease; }
      .blog-sidebar .widget {
        margin-bottom: 2.88rem; }
        .blog-sidebar .widget:last-of-type {
          margin-bottom: 0; }
      .blog-sidebar h4 {
        margin-bottom: 1rem;
        color: #444BB0; }
      .blog-sidebar ul {
        list-style-type: none;
        margin-bottom: 0;
        padding-left: 0; }
      .blog-sidebar li a::after {
        background-color: #080808;
        transform: scaleX(0); }
      .blog-sidebar li a:hover {
        color: #E44BB0; }
        .blog-sidebar li a:hover::after {
          transform: scaleX(1); }
      .blog-sidebar .search input {
        background-color: #FAFAFA; }
      .blog-sidebar.sticky {
        position: fixed;
        box-shadow: 0 0 2rem rgba(34, 34, 34, 0.2); }
      .blog-sidebar.pause {
        align-self: flex-end; } }

.searched {
  color: #FAFAFA; }

body.single.post article {
  max-width: 68.4rem;
  margin-left: auto;
  margin-right: auto; }

/*

    //  //// --|    Accessibility

*/
@media screen and (prefers-reduced-motion: reduce), (update: slow) {
  * {
    animation-duration: .001ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: .001ms !important; } }

/*

    //  //// --|    Fixer

*/
/*

    //  //// --|    Dev Tools

*/

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
